// Generated by LiveScript 1.6.0
(function(){
  var ref$, map, pairsToObj, split, tail, getMode, parseMappingString, parseMappingObject, getMapping, toString$ = {}.toString;
  ref$ = require('prelude-ls'), map = ref$.map, pairsToObj = ref$.pairsToObj, split = ref$.split, tail = ref$.tail;
  getMode = function(config){
    if (toString$.call(config).slice(8, -1) === 'String') {
      return config.split(',')[0];
    }
    if (toString$.call(config).slice(8, -1) === 'Object') {
      return getMode(config.mode);
    }
    return 'testnet';
  };
  parseMappingString = function(config){
    var all;
    all = config.split(',').map(function(it){
      return it.trim();
    });
    if (!all.length === 1) {
      return {};
    }
    return pairsToObj(
    map(function(it){
      return [it[1], it[0]];
    })(
    map(split(' for '))(
    tail(
    all))));
  };
  parseMappingObject = function(config){
    var mapping;
    mapping = parseMappingString(config.mode);
    importAll$(mapping, config.networkMapping) == null && {};
    return mapping;
  };
  getMapping = function(config){
    if (toString$.call(config).slice(8, -1) === 'String') {
      return parseMappingString(config);
    }
    if (toString$.call(config).slice(8, -1) === 'Object') {
      return parseMappingObject(config);
    }
    return {};
  };
  module.exports = function(config){
    var mode, mapping, getModeFor;
    mode = getMode(config);
    mapping = getMapping(config);
    getModeFor = function(symbol){
      var ref$;
      return (ref$ = mapping[symbol]) != null ? ref$ : mode;
    };
    return {
      getModeFor: getModeFor
    };
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
