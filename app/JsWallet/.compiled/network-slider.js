// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, round5, round, ref$, find, filter, objToPairs, pairsToObj, map, times, icon, icons, tokenNetworks, sendFuncs, networkDetailsModal;
  react = require('react');
  getPrimaryInfo = require('../../get-primary-info.ls');
  round5 = require('../../round5.ls');
  round = require('../../round.ls');
  ref$ = require('prelude-ls'), find = ref$.find, filter = ref$.filter, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, map = ref$.map;
  times = require('../../math.ls').times;
  icon = require('../../icon.ls');
  icons = require('../../icons.ls');
  tokenNetworks = require('../../swaping/networks.ls');
  sendFuncs = require('../../send-funcs.ls');
  networkDetailsModal = require('../../pages/confirmation.ls').networkDetailsModal;
  module.exports = function(arg$){
    var web3t, wallet, store, id, onChange, getHomeFee, isNotBridge, wallets, availableNetworks, networkLabels, getNetworkById, style, style2, filterBody, inputStyle2, chooseNetworkStyle, imgIconStyle, infoStyle, tooltipStyle, limitsLabelStyle, pointerStyle, displayValue, go, dropdownClick, ref$, name, referTo, wallet2, networkFrom, ref1$, networkTo, networkToDetails, networkFromDetails, createNetworkPosition, dropdownClass, rotateClass, children;
    web3t = arg$.web3t, wallet = arg$.wallet, store = arg$.store, id = arg$.id, onChange = arg$.onChange;
    if (wallet.network.networks == null) {
      return null;
    }
    if (!(store.current.send.isSwap != null && store.current.send.isSwap === true)) {
      return null;
    }
    if (wallet.network.networks == null || Object.keys(wallet.network.networks).length === 0) {
      return null;
    }
    getHomeFee = sendFuncs(store, web3t).getHomeFee;
    isNotBridge = function(){
      var token, chosenNetwork, ref$;
      token = store.current.send.wallet.coin.token;
      chosenNetwork = store.current.send.chosenNetwork;
      return ((ref$ = chosenNetwork.referTo) === 'vlx_evm' || ref$ === 'vlx2' || ref$ === 'vlx_native') && (token === 'vlx_evm' || token === 'vlx2' || token === 'vlx_native');
    };
    wallets = pairsToObj(
    map(function(it){
      return [it.coin.token, it];
    })(
    store.current.account.wallets));
    availableNetworks = pairsToObj(
    filter(function(it){
      return wallets[it[1].referTo] != null && (it[1].disabled == null || it[1].disabled === false);
    })(
    filter(function(it){
      return it.disabled !== true;
    })(
    objToPairs(
    wallet.network.networks))));
    networkLabels = Object.keys(availableNetworks);
    if (networkLabels.length === 0) {
      return null;
    }
    getNetworkById = function(id){
      return availableNetworks[id + ""];
    };
    style = getPrimaryInfo(store);
    style2 = {
      color: style.app.icon + ""
    };
    filterBody = {
      border: "1px solid " + style.app.border,
      background: style.app.accountBg
    };
    inputStyle2 = {
      background: style.app.input,
      color: "rgb(206 148 44)",
      border: "0",
      opacity: 1,
      textTransform: "uppercase"
    };
    chooseNetworkStyle = (function(){
      switch (false) {
      case !isNotBridge():
        return {};
      default:
        return {
          textDecoration: "underline",
          cursor: "help"
        };
      }
    }());
    imgIconStyle = {
      width: "13px",
      height: "8px",
      marginLeft: "-6px",
      marginTop: "4px",
      filter: "grayscale(100%) brightness(40%) sepia(100%) hue-rotate(14deg) saturate(790%) contrast(1.5)"
    };
    infoStyle = {
      width: "10px",
      height: "10px",
      fontSize: "10px",
      marginLeft: "10px",
      marginTop: "-1px",
      float: "revert",
      display: "block"
    };
    tooltipStyle = {
      position: "absolute",
      right: "0",
      bottom: "-21px"
    };
    limitsLabelStyle = {
      fontSize: "11px",
      color: "rgb(206, 148, 44)",
      display: "block",
      position: "relative",
      left: "-24px",
      textTransform: "uppercase",
      textDecoration: "underline",
      cursor: "help"
    };
    pointerStyle = (function(){
      switch (false) {
      case !(networkLabels.length > 1):
        return {
          cursor: "pointer",
          minHeight: "36px"
        };
      default:
        return {
          cursor: "default",
          minHeight: "36px"
        };
      }
    }());
    importAll$(inputStyle2, pointerStyle);
    displayValue = store.current.send.chosenNetwork.name.toUpperCase();
    go = function(inc){
      return function(){
        var current, lenght, index, chosenNetworkId;
        current = networkLabels.indexOf(store.current.send.chosenNetwork.id);
        lenght = networkLabels.length;
        if (lenght <= 1) {
          return;
        }
        index = current + inc;
        if (current + inc >= lenght) {
          index = 0;
        } else if (current + inc < 0) {
          index = lenght - 1;
        }
        chosenNetworkId = networkLabels[index];
        store.current.send.chosenNetwork = getNetworkById(chosenNetworkId);
        store.current.send.to = tokenNetworks.getDefaultRecipientAddress(store);
        store.current.send.error = '';
        store.current.send.data = null;
        return onChange(function(err){});
      };
    };
    dropdownClick = function(){
      if (networkLabels.length <= 1) {
        return;
      }
      return store.current.switchNetwork = !store.current.switchNetwork;
    };
    ref$ = store.current.send.chosenNetwork, name = ref$.name, referTo = ref$.referTo;
    wallet2 = find(function(it){
      var ref$, ref1$;
      return ((ref$ = it != null ? (ref1$ = it.coin) != null ? ref1$.token : void 8 : void 8) != null ? ref$ : "").toLowerCase() === (referTo != null ? referTo : "").toLowerCase();
    })(
    store.current.account.wallets);
    networkFrom = (ref$ = wallet != null ? (ref1$ = wallet.coin) != null ? ref1$.name : void 8 : void 8) != null ? ref$ : "";
    networkTo = name != null ? name : "";
    networkToDetails = function(){
      if (isNotBridge()) {
        return;
      }
      store.current.currentNetworkDetails = importAll$(store.current.foreignNetworkDetails, {
        wallet: wallet2
      });
      return networkDetailsModal();
    };
    networkFromDetails = function(){
      if (isNotBridge()) {
        return;
      }
      store.current.currentNetworkDetails = importAll$(store.current.networkDetails, {
        wallet: wallet
      });
      return networkDetailsModal();
    };
    createNetworkPosition = function(it){
      var details, referTo, name, netWallet, changeNetwork, positionStyle, children;
      details = it != null ? it[1] : void 8;
      if (details == null) {
        return;
      }
      referTo = details.referTo, name = details.name;
      netWallet = find(function(it){
        return it.coin.token === referTo;
      })(
      store.current.account.wallets);
      if (netWallet == null) {
        return;
      }
      changeNetwork = function(){
        if (store.current.refreshing === true) {
          return;
        }
        if (store.current.send.chosenNetwork.referTo === referTo) {
          store.current.switchNetwork = false;
          return;
        }
        store.current.send.chosenNetwork = getNetworkById(referTo);
        store.current.send.to = tokenNetworks.getDefaultRecipientAddress(store);
        store.current.send.error = '';
        store.current.send.data = null;
        return onChange(function(err){
          store.current.refreshing = false;
          return store.current.switchNetwork = false;
        });
      };
      positionStyle = {
        color: store.current.send.chosenNetwork.referTo === referTo ? '#3cd5af' : ''
      };
      return react.createElement('div', {
        onClick: changeNetwork,
        key: "account" + referTo,
        style: positionStyle,
        className: 'table-row-menu'
      }, children = react.createElement('div', {
        className: 'col folder-menu'
      }, children = react.createElement('div', {}, ' ' + name)));
    };
    dropdownClass = (function(){
      switch (false) {
      case !(networkLabels.length > 1):
        return "";
      default:
        return "inactive";
      }
    }());
    rotateClass = (function(){
      switch (false) {
      case store.current.switchNetwork !== true:
        return 'rotate';
      default:
        return "";
      }
    }());
    /* Render */
    return react.createElement('div', {
      className: 'network-slider network-slider-1989415310'
    }, children = [
      react.createElement('label', {
        style: style2,
        className: 'control-label'
      }, ' Choose Network'), false ? react.createElement('span', {
        onClick: networkFromDetails,
        style: chooseNetworkStyle,
        className: 'chosen-network network-from'
      }, children = " " + networkFrom + " ") : void 8, false ? react.createElement('span', {
        style: chooseNetworkStyle,
        className: 'chosen-network network-to'
      }, children = " " + networkTo) : void 8, react.createElement('div', {}, children = [
        react.createElement('span', {
          style: pointerStyle,
          onClick: dropdownClick,
          className: 'bold default-network-input'
        }, children = react.createElement('input', {
          value: networkTo + "",
          style: inputStyle2,
          disabled: true,
          className: 'change-network'
        })), react.createElement('span', {
          onClick: dropdownClick,
          className: dropdownClass + " button navigation-button right"
        }, children = react.createElement('div', {
          className: 'button-inner'
        }, children = react.createElement('img', {
          src: icons.arrowDown + "",
          style: imgIconStyle,
          className: rotateClass + " icon-svg"
        }))), store.current.switchNetwork && networkLabels.length > 1 ? react.createElement('div', {
          style: filterBody,
          className: 'switch-menu'
        }, children = react.createElement('div', {
          className: 'middle account'
        }, children = map(createNetworkPosition)(
        objToPairs(
        availableNetworks)))) : void 8
      ]), !isNotBridge() ? react.createElement('div', {
        style: tooltipStyle,
        onClick: networkFromDetails,
        className: 'limits-tooltip'
      }, children = react.createElement('span', {}, children = [
        react.createElement('img', {
          src: icons.info + "",
          style: infoStyle,
          className: 'icon-svg'
        }), react.createElement('span', {
          style: limitsLabelStyle
        }, ' limits  ')
      ])) : void 8
    ]);
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
