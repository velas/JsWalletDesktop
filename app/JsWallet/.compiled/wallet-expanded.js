// Generated by LiveScript 1.6.0
(function(){
  var react, money, ref$, each, filter, foldl, map, objToPairs, groupBy, keys, walletFuncs, getLang, plus, icon, getPrimaryInfo, get, icons, roundHuman, alert, button, addressHolder, walletStats, loading, confirm, cb;
  react = require('react');
  money = require('../tools.ls').money;
  ref$ = require('prelude-ls'), each = ref$.each, filter = ref$.filter, foldl = ref$.foldl, map = ref$.map, objToPairs = ref$.objToPairs, groupBy = ref$.groupBy, keys = ref$.keys;
  walletFuncs = require('../wallet-funcs.ls');
  getLang = require('../get-lang.ls');
  plus = require('../math.ls').plus;
  icon = require('./icon.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  get = require('../../web3t/providers/superagent.js').get;
  icons = require('../icons.ls');
  roundHuman = require('../round-human.ls');
  alert = require('./confirmation.ls').alert;
  button = require('../components/button.ls');
  addressHolder = require('../components/address-holder.ls');
  walletStats = require('./wallet-stats.ls');
  loading = require('./loading.ls');
  confirm = require('./confirmation.ls').confirm;
  cb = bind$(console, 'log');
  module.exports = curry$(function(store, web3t, wallets, wallet){
    var style, walletStyle, noResultText, msgTxtStyle, children, ref$, walletIcon, uninstall, balance, balanceUsd, pending, send, receive, swap, usdRate, lang, labelUninstall, placeholder, placeholderCoin, isCustom, walletIsDisabled, isLoading, sendSwapDisabled, name, ref1$, ref2$, receiveClick, sendClick, swapClick, token, ref3$, ref4$, tokenDisplay, ref5$, locationWallet, uriProd, uriTest, uri_simplex, buy, color1, color2, getTotal, totalSent, totalReceived, installedNetworks, availableNetworks, ref6$, uninstallAction, uninstallStyle, text, colorLabel, colorLabel2, ref7$, ref8$;
    style = getPrimaryInfo(store);
    walletStyle = {
      color: style.app.text3
    };
    if (wallets == null || wallet == null) {
      noResultText = {
        fontSize: "25px",
        textTransform: "initial",
        color: "white"
      };
      msgTxtStyle = {
        fontSize: "20px",
        color: "white",
        opacity: 0.3
      };
      return react.createElement('div', {
        key: "no-details",
        style: walletStyle,
        className: 'wallet-detailed'
      }, children = react.createElement('div', {
        style: text,
        className: 'wallet-part center'
      }, children = react.createElement('div', {
        className: 'wallet-header'
      }, children = react.createElement('div', {}, children = store.loadingWallet === true
        ? loading(store.loadingWallet)
        : react.createElement('h3', {
          style: msgTxtStyle,
          className: 'text-message'
        }, ' No wallet found')))));
    }
    ref$ = walletFuncs(store, web3t, wallets, wallet), walletIcon = ref$.walletIcon, uninstall = ref$.uninstall, wallet = ref$.wallet, balance = ref$.balance, balanceUsd = ref$.balanceUsd, pending = ref$.pending, send = ref$.send, receive = ref$.receive, swap = ref$.swap, usdRate = ref$.usdRate;
    lang = getLang(store);
    labelUninstall = (function(){
      switch (false) {
      case !store.current.refreshing:
        return '...';
      default:
        return lang.hide + "";
      }
    }());
    placeholder = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder";
      default:
        return "";
      }
    }());
    placeholderCoin = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder-coin";
      default:
        return "";
      }
    }());
    isCustom = (wallet != null ? (ref$ = wallet.coin) != null ? ref$.custom : void 8 : void 8) === true;
    walletIsDisabled = isNaN(wallet != null ? wallet.balance : void 8);
    isLoading = store.current.refreshing === true;
    sendSwapDisabled = walletIsDisabled || isLoading;
    name = (ref1$ = wallet != null ? (ref2$ = wallet.coin) != null ? ref2$.name : void 8 : void 8) != null
      ? ref1$
      : wallet != null ? (ref1$ = wallet.coin) != null ? ref1$.token : void 8 : void 8;
    receiveClick = receive(wallet);
    sendClick = send(wallet);
    swapClick = swap(store, wallet);
    token = ((ref3$ = wallet != null ? (ref4$ = wallet.coin) != null ? ref4$.token : void 8 : void 8) != null ? ref3$ : "").toUpperCase();
    tokenDisplay = ((ref3$ = wallet != null ? (ref5$ = wallet.coin) != null ? ref5$.nickname : void 8 : void 8) != null ? ref3$ : "").toUpperCase();
    locationWallet = window.location.host === "wallet.testnet.velas.com" ? 'wallet_testnet' : 'wallet_mainnet';
    uriProd = "https://buy.velas.com/?address=" + wallet.address + "&crypto_currency=" + tokenDisplay + "&env=" + locationWallet;
    uriTest = "https://fiat-payments.testnet.velas.com/?address=" + wallet.address + "&crypto_currency=" + tokenDisplay + "&env=" + locationWallet;
    uri_simplex = (function(){
      switch (false) {
      case store.current.network !== 'testnet':
        return uriTest;
      default:
        return uriProd;
      }
    }());
    buy = function(){
      return window.open(uri_simplex);
    };
    style = getPrimaryInfo(store);
    color1 = {
      color: style.app.text,
      opacity: ".5"
    };
    color2 = {
      color: style.app.text,
      opacity: ".5"
    };
    getTotal = function(type, address){
      var transactions;
      transactions = clone$(store.transactions.applied);
      return roundHuman(
      foldl(plus, '0')(
      map(function(it){
        return it.amount;
      })(
      filter(function(it){
        return it.type === type && (it.pending == null || it.pending !== true);
      })(
      transactions))));
    };
    totalSent = getTotal('OUT', wallet.address);
    totalReceived = getTotal('IN', wallet.address);
    installedNetworks = map(function(it){
      return it.token;
    })(
    store.coins);
    availableNetworks = filter(function(it){
      return it.disabled !== true && in$(it.referTo, installedNetworks);
    })(
    map(function(it){
      return it[1];
    })(
    objToPairs(
    (ref3$ = wallet != null ? (ref6$ = wallet.network) != null ? ref6$.networks : void 8 : void 8) != null
      ? ref3$
      : [])));
    uninstallAction = function(e){
      if (isCustom !== true) {
        return uninstall(e);
      }
      return confirm(store, "You can add this token back in the future by going to “Add custom token”.", function(agree){
        if (!agree) {
          return;
        }
        return uninstall(e);
      });
    };
    walletStyle = {
      color: style.app.text3,
      background: style.app.wallet,
      borderBottom: "0",
      borderColor: style.app.borderColor + ""
    };
    uninstallStyle = {
      background: style.app.menu
    };
    text = {
      color: style.app.text
    };
    colorLabel = {
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    colorLabel2 = {
      background: style.app.primary1,
      backgroundColor: style.app.primary1Spare
    };
    return react.createElement('div', {
      key: token + "",
      style: walletStyle,
      className: 'wallet-expanded wallet-expanded152437774'
    }, children = [
      react.createElement('div', {
        style: text,
        className: 'wallet-part left'
      }, children = [
        react.createElement('div', {
          className: 'wallet-header'
        }, children = react.createElement('div', {
          className: 'wallet-header-part right'
        }, children = [
          react.createElement('div', {}, children = [
            react.createElement('span', {
              className: placeholder + " title"
            }, ' ' + name), (ref3$ = wallet != null ? (ref7$ = wallet.coin) != null ? ref7$.token : void 8 : void 8) !== 'btc' && ref3$ !== 'vlx' && ref3$ !== 'vlx_native' && ref3$ !== 'vlx2' && ref3$ !== 'eth' && ref3$ !== 'vlx_evm' ? react.createElement('span', {
              onClick: uninstallAction,
              style: uninstallStyle,
              className: 'uninstall'
            }, ' ' + labelUninstall) : void 8
          ]), react.createElement('div', {
            className: placeholder + " balance"
          }, children = [
            react.createElement('div', {
              title: (wallet != null ? wallet.balance : void 8) + "",
              className: 'token-balance'
            }, children = [react.createElement('span', {}, ' ' + roundHuman(wallet != null ? wallet.balance : void 8)), react.createElement('span', {}, ' ' + tokenDisplay)]), !isCustom ? react.createElement('div', {
              title: balanceUsd + "",
              className: placeholder + " usd-balance"
            }, children = [react.createElement('span', {}, ' ' + roundHuman(balanceUsd)), react.createElement('span', {}, ' USD')]) : void 8, +wallet.pendingSent > 0 && false ? react.createElement('div', {
              className: 'pending'
            }, children = react.createElement('span', {}, ' -' + pending)) : void 8
          ])
        ])), addressHolder({
          store: store,
          wallet: wallet,
          type: 'bg'
        }), availableNetworks.length > 0
          ? react.createElement('div', {
            className: 'buttons'
          }, children = [
            react.createElement('div', {
              className: 'with-swap'
            }, children = [
              button({
                store: store,
                onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : sendClick,
                text: 'send',
                icon: 'send',
                type: 'secondary',
                id: "wallets-send",
                makeDisabled: typeof makeDisabled != 'undefined' && makeDisabled !== null ? makeDisabled : sendSwapDisabled
              }), button({
                store: store,
                onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : receiveClick,
                text: 'receive',
                icon: 'get',
                type: 'primary',
                id: "wallets-receive",
                makeDisabled: typeof makeDisabled != 'undefined' && makeDisabled !== null ? makeDisabled : false
              })
            ]), react.createElement('div', {
              className: 'with-swap'
            }, children = [
              (wallet != null ? (ref3$ = wallet.coin) != null ? ref3$.token : void 8 : void 8) === "vlx_native" ? button({
                store: store,
                onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : buy,
                text: 'buy',
                icon: 'buy',
                id: "wallet-buy",
                classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
              }) : void 8, (wallet != null ? (ref8$ = wallet.coin) != null ? ref8$.token : void 8 : void 8) === "vlx_evm" ? button({
                store: store,
                onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : buy,
                text: 'buy',
                icon: 'buy',
                id: "wallet-buy",
                classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
              }) : void 8, button({
                store: store,
                onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : swapClick,
                text: 'swap',
                icon: 'swap',
                id: "wallet-swap",
                classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap",
                makeDisabled: typeof makeDisabled != 'undefined' && makeDisabled !== null ? makeDisabled : sendSwapDisabled
              })
            ])
          ])
          : react.createElement('div', {
            className: 'buttons'
          }, children = react.createElement('div', {
            className: 'with-swap'
          }, children = [
            button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : sendClick,
              text: 'send',
              icon: 'send',
              type: 'secondary',
              id: "wallets-send",
              makeDisabled: typeof makeDisabled != 'undefined' && makeDisabled !== null ? makeDisabled : sendSwapDisabled
            }), button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : receiveClick,
              text: 'receive',
              icon: 'get',
              type: 'primary',
              id: "wallets-receive",
              makeDisabled: typeof makeDisabled != 'undefined' && makeDisabled !== null ? makeDisabled : false
            })
          ])), react.createElement('div', {
          className: 'details'
        }, children = [
          react.createElement('div', {
            title: balanceUsd + "",
            className: placeholder + " price"
          }, ' $' + roundHuman(balanceUsd)), react.createElement('div', {
            title: usdRate + "",
            className: placeholder + " name"
          }, ' $' + roundHuman(usdRate))
        ])
      ]), react.createElement('div', {
        className: 'wallet-part right'
      }, children = react.createElement('div', {
        className: 'wallet-header chart'
      }, children = [
        react.createElement('div', {
          className: 'wallet-header-part left'
        }, children = react.createElement('div', {
          className: 'stats'
        }, children = [
          react.createElement('span', {
            className: 'stats-style'
          }, children = react.createElement('div', {
            style: text,
            className: 'coin'
          }, children = [
            react.createElement('img', {
              src: walletIcon + "",
              className: placeholderCoin + " label-coin"
            }), react.createElement('div', {
              className: placeholder + ""
            }, ' ' + tokenDisplay), !isCustom ? react.createElement('div', {
              title: usdRate + "",
              className: placeholder + " course"
            }, ' $' + roundHuman(usdRate)) : void 8
          ])), walletStats(store, web3t)
        ])), react.createElement('div', {
          style: text,
          className: 'wallet-header-part right'
        }, children = [
          react.createElement('div', {
            className: 'counts'
          }, children = [
            react.createElement('div', {
              style: colorLabel,
              className: 'label-icon'
            }, children = react.createElement('img', {
              src: icons.send + "",
              className: 'icon-svg'
            })), react.createElement('div', {
              className: placeholder + ""
            }, ' ' + totalSent + ' ', tokenDisplay), react.createElement('div', {
              style: color1,
              className: 'label'
            }, ' ' + lang.totalSent)
          ]), react.createElement('div', {
            className: 'counts'
          }, children = [
            react.createElement('div', {
              style: colorLabel2,
              className: 'label-icon'
            }, children = react.createElement('img', {
              src: icons.get + "",
              className: 'icon-svg'
            })), react.createElement('div', {
              className: placeholder + ""
            }, ' ' + totalReceived + ' ', tokenDisplay), react.createElement('div', {
              style: color2,
              className: 'label'
            }, ' ' + lang.totalReceived)
          ])
        ])
      ]))
    ]);
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
