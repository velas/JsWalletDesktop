// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, find, times, keyboard, parseNum, sendFuncs, roundNumber, CurrencyInput, DECIMAL_SEPARATOR;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  find = require('prelude-ls').find;
  times = require('../math.ls').times;
  keyboard = require('./keyboard.ls');
  parseNum = require('../numbers.js').parseNum;
  sendFuncs = require('../send-funcs.ls');
  roundNumber = require('../round-number.ls');
  CurrencyInput = require('./react-currency-input-field')['default'];
  DECIMAL_SEPARATOR = '.';
  module.exports = function(arg$){
    var store, value, onChange, placeholder, id, showDetails, title, token, ref$, disabled, style, amountStyle, justCryptoBackground, decimalsLimit, decimals, getNumber, valueWithoutDecimalWithDot, onChangeInternal, children;
    store = arg$.store, value = arg$.value, onChange = arg$.onChange, placeholder = arg$.placeholder, id = arg$.id, showDetails = arg$.showDetails, title = arg$.title, token = (ref$ = arg$.token) != null ? ref$ : "vlx2", disabled = (ref$ = arg$.disabled) != null ? ref$ : false;
    style = getPrimaryInfo(store);
    amountStyle = {
      background: style.app.input,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    justCryptoBackground = {
      background: style.app.wallet
    };
    decimalsLimit = 4;
    decimals = value.toString().split(DECIMAL_SEPARATOR)[1];
    if (decimals != null && decimals.length > decimalsLimit) {
      value = roundNumber(value, {
        decimals: decimalsLimit
      });
    }
    getNumber = function(val){
      var number;
      number = (val != null ? val : "").toString();
      if (number === "") {
        return '0';
      }
      return val;
    };
    valueWithoutDecimalWithDot = function(value){
      var res;
      value = (value != null ? value : "").toString();
      res = value.split(DECIMAL_SEPARATOR);
      return value.indexOf(DECIMAL_SEPARATOR) > -1 && (res.length > 1 && res[1] === "");
    };
    onChangeInternal = function(it){
      var value, result, groups, decimals, res, parsedLeft, hasDot, str_val, $value, left;
      value = it;
      value = getNumber(value);
      result = value.toString().split(DECIMAL_SEPARATOR);
      groups = result[0];
      decimals = result[1];
      if (+groups > Math.pow(10, 15)) {
        return;
      }
      if (decimals != null && decimals.length > decimalsLimit) {
        return;
      }
      res = (value != null ? value : "0").toString().split(DECIMAL_SEPARATOR);
      parsedLeft = parseNum(res != null ? res[0] : void 8);
      hasDot = res.length > 1;
      if (value == null || value === "") {
        value = "0";
      }
      str_val = (value != null ? value : "0").toString();
      $value = (function(){
        var ref$;
        switch (false) {
        case it !== "":
          return 0;
        case !valueWithoutDecimalWithDot(value):
          left = res[0];
          return parseNum(left) + DECIMAL_SEPARATOR;
        case !(hasDot && parsedLeft === parseNum(it)):
          return parsedLeft + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        case !(hasDot && str_val.length !== (+str_val).toString().length && +value === +str_val):
          return parseNum(res[0]) + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        default:
          return parseNum(value);
        }
      }());
      value = $value;
      return onChange({
        target: {
          value: value
        }
      });
    };
    return react.createElement('div', {
      style: amountStyle,
      className: 'input-wrapper small'
    }, children = [
      react.createElement('div', {
        className: 'label lusd'
      }, ' $'), react.createElement(CurrencyInput, {
        key: "amount-usd",
        style: justCryptoBackground,
        allowDecimals: true,
        value: value + "",
        decimalsLimit: decimalsLimit,
        label: "Send",
        decimalSeparator: DECIMAL_SEPARATOR,
        groupSeparator: ",",
        onValueChange: onChangeInternal,
        disabled: disabled,
        className: "textfield amount-usd"
      })
    ]);
  };
}).call(this);
