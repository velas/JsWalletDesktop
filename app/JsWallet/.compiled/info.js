// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, getLang, historyFuncs, icon, switchAccount, icons, choosestaker, validators, stakerStats, stakerStats2, stakerStats3, ref$, map, foldl, filter, plus, div, roundHuman, epoch, alertTxn, burger, totalPool, totalStakers, stakingAmount, myStake, chartAmountSizes, chartStakersCounts, info, feelReward, feelRewards, slice$ = [].slice;
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  web3 = require('../web3.ls');
  getLang = require('../get-lang.ls');
  historyFuncs = require('../history-funcs.ls');
  icon = require('./icon.ls');
  switchAccount = require('./switch-account.ls');
  icons = require('../icons.ls');
  choosestaker = require('./choosestaker.ls');
  validators = require('./validators.ls');
  stakerStats = require('./staker-stats.ls');
  stakerStats2 = require('./staker-stats2.ls');
  stakerStats3 = require('./staker-stats3.ls');
  ref$ = require('prelude-ls'), map = ref$.map, foldl = ref$.foldl, filter = ref$.filter;
  ref$ = require('../math.ls'), plus = ref$.plus, div = ref$.div;
  roundHuman = require('../round-human.ls');
  epoch = require('./epoch.ls');
  alertTxn = require('./alert-txn.ls');
  burger = require('../components/burger.ls');
  totalPool = function(store, web3t){
    var lang, info, stats, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    return react.createElement('div', {
      className: 'col col-4'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'value'
      }, children = [
        react.createElement('div', {
          className: 'symbol'
        }), react.createElement('div', {
          title: '',
          className: 'number'
        }, ' ' + store.staking.pools.length)
      ]), react.createElement('div', {
        className: 'header'
      }, ' ' + lang.totalPools)
    ]));
  };
  totalStakers = function(store, web3t){
    var lang, info, stats, stakers, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    stakers = foldl(plus, 0)(
    map(function(it){
      return it.stakers;
    })(
    store.staking.pools));
    return react.createElement('div', {
      className: 'col col-4'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'value'
      }, children = [
        react.createElement('div', {
          className: 'symbol'
        }), react.createElement('div', {
          title: '',
          className: 'number'
        }, ' ' + stakers)
      ]), react.createElement('div', {
        className: 'header'
      }, ' ' + lang.totalStakers)
    ]));
  };
  stakingAmount = function(store, web3t){
    var lang, info, stats, amount, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    amount = foldl(plus, 0)(
    map(function(it){
      return +it.stakeInitial;
    })(
    store.staking.pools));
    return react.createElement('div', {
      className: 'col col-4'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'value'
      }, children = [
        react.createElement('div', {
          className: 'symbol'
        }), react.createElement('div', {
          title: '',
          className: 'number'
        }, ' ' + roundHuman(amount))
      ]), react.createElement('div', {
        className: 'header'
      }, ' ' + lang.totalStaking)
    ]));
  };
  myStake = function(store, web3t){
    var lang, info, stats, amount, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    amount = foldl(plus, 0)(
    map(function(it){
      return +div(it.myStake, 1e18);
    })(
    filter(function(it){
      return it.myStake != null;
    })(
    store.staking.pools)));
    return react.createElement('div', {
      className: 'col col-4'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'value'
      }, children = [
        react.createElement('div', {
          className: 'symbol'
        }), react.createElement('div', {
          title: '',
          className: 'number'
        }, ' ' + roundHuman(+amount))
      ]), react.createElement('div', {
        className: 'header'
      }, ' ' + lang.totalMyStake)
    ]));
  };
  chartAmountSizes = function(store, web3t){
    var lang, info, stats, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    return react.createElement('div', {
      className: 'col-6 col'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'header'
      }, ' ' + lang.stakeSizes), stakerStats(store, web3t)
    ]));
  };
  chartStakersCounts = function(store, web3t){
    var lang, info, stats, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    stats = {
      background: info.app.stats
    };
    return react.createElement('div', {
      className: 'col-6 col'
    }, children = react.createElement('div', {
      style: stats
    }, children = [
      react.createElement('div', {
        className: 'header'
      }, ' ' + lang.poolPopulation), stakerStats2(store, web3t)
    ]));
  };
  info = function(arg$){
    var store, web3t, lang, goBack, info, style, borderStyle, borderStyle3, borderRight, buttonPrimary2Style, filterBody, buttonPrimary1Style, lightText, iconStyle, iconColor, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    goBack = historyFuncs(store, web3t).goBack;
    info = getPrimaryInfo(store);
    style = {
      background: info.app.wallet,
      color: info.app.text
    };
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    borderStyle3 = {
      color: info.app.text,
      borderBottom: "0"
    };
    borderRight = {
      color: info.app.text,
      borderRight: "1px solid " + info.app.border
    };
    buttonPrimary2Style = {
      border: "1px solid " + info.app.primary2,
      color: info.app.text,
      background: info.app.primary2,
      backgroundColor: info.app.primary2Spare
    };
    filterBody = {
      border: "1px solid " + info.app.border,
      background: info.app.header
    };
    buttonPrimary1Style = {
      border: "1px solid " + info.app.primary1,
      color: info.app.text,
      background: info.app.primary1,
      backgroundColor: info.app.primary1Spare
    };
    lightText = {
      color: info.app.color3
    };
    iconStyle = {
      filter: info.app.nothingIcon
    };
    iconColor = {
      filter: info.app.iconFilter
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'stats stats-1270740771'
    }, children = [
      alertTxn({
        store: store
      }), react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' ' + lang.statistics), react.createElement('div', {
          onClick: goBack,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          style: iconColor,
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), react.createElement('div', {
        className: 'wrapper'
      }, children = [totalPool(store, web3t), totalStakers(store, web3t), stakingAmount(store, web3t), myStake(store, web3t), chartAmountSizes(store, web3t), chartStakersCounts(store, web3t), stakerStats3(store, web3t)])
    ]);
  };
  module.exports = info;
  feelReward = function(arg$, arg1$, cb){
    var store, web3t, epoch, pool, pools;
    store = arg$.store, web3t = arg$.web3t, epoch = arg$.epoch;
    pool = arg1$[0], pools = slice$.call(arg1$, 1);
    if (pool == null) {
      return cb(null, []);
    }
    return web3t.velas.BlockReward.epochPoolNativeReward(epoch, pool.miningAddress, function(err, rewardNumber){
      if (err != null) {
        return cb(err);
      }
      return setImmediate(function(){
        return feelReward({
          store: store,
          web3t: web3t,
          epoch: epoch
        }, pools, function(err, rest){
          var reward, item, all;
          if (err != null) {
            return cb(err);
          }
          reward = div(rewardNumber, Math.pow(10, 18));
          item = {
            address: pool.address,
            epoch: epoch,
            reward: reward
          };
          all = [item].concat(rest);
          return cb(null, all);
        });
      });
    });
  };
  feelRewards = function(arg$, arg1$, cb){
    var store, web3t, epoch, epochs;
    store = arg$.store, web3t = arg$.web3t;
    epoch = arg1$[0], epochs = slice$.call(arg1$, 1);
    return feelReward({
      store: store,
      web3t: web3t,
      epoch: epoch
    }, store.staking.pools, function(err, data){
      if (err != null) {
        return cb(err);
      }
      return feelRewards({
        store: store,
        web3t: web3t
      }, epochs, function(err, rest){
        var all;
        if (err != null) {
          return cb(err);
        }
        all = [data].concat(rest);
        return cb(null, all);
      });
    });
  };
  module.exports.init = function(arg$, cb){
    var store, web3t;
    store = arg$.store, web3t = arg$.web3t;
    if (store.staking.poolsAreLoading === true) {
      return cb(null);
    }
    return validators.init({
      store: store,
      web3t: web3t
    }, function(err, data){
      return cb(null);
    });
  };
  module.exports.focus = function(arg$, cb){
    var store, web3t;
    store = arg$.store, web3t = arg$.web3t;
    return validators.focus({
      store: store,
      web3t: web3t
    }, function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
    });
  };
}).call(this);
