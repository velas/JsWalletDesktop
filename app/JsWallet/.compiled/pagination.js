// Generated by LiveScript 1.6.0
(function(){
  var react, MiddleEllipsis, getPrimaryInfo, icons, identicon, button, ref$, div, times, plus, minus;
  react = require('react');
  MiddleEllipsis = require('./middle-ellipsis');
  getPrimaryInfo = require('../get-primary-info.ls');
  icons = require('../icons.ls');
  identicon = require('./identicon.ls');
  button = require('./button.ls');
  ref$ = require('../math.ls'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  module.exports = function(arg$){
    var store, type, disabled, config, array, newArray, page, ref$, perPage, allPages, style, page$, entities, prevButtonDisabled, nextButtonDisabled, $class, goBack, goForward, normalizeCurrentPage, setPerPage, switchPerPageSelector, closePerPageSelector, pStyle, children;
    store = arg$.store, type = arg$.type, disabled = arg$.disabled, config = arg$.config;
    array = config.array;
    newArray = clone$(array);
    page = (ref$ = store.staking["current_" + type + "_page"]) != null ? ref$ : 1;
    if (!((ref$ = store.staking) != null && ref$[type + "_per_page"])) {
      store.staking[type + "_per_page"] = 10;
    }
    perPage = store.staking[type + "_per_page"];
    allPages = Math.ceil(div(array.length, perPage));
    style = getPrimaryInfo(store);
    page$ = page - 1;
    newArray.slice(page$ * perPage, (page$ + 1) * perPage);
    entities = newArray.length;
    prevButtonDisabled = +page <= 1 || disabled === true;
    nextButtonDisabled = allPages <= +page || disabled === true;
    $class = store.staking["visible_per_page_" + type + "_selector"] ? "visible" : "hidden";
    goBack = function(){
      return store.staking["current_" + type + "_page"] = (function(){
        switch (false) {
        case !(page > 1):
          return page - 1;
        default:
          return 1;
        }
      }());
    };
    goForward = function(){
      var page;
      page = store.staking["current_" + type + "_page"];
      return store.staking["current_" + type + "_page"] = (function(){
        switch (false) {
        case !(page < allPages):
          return page + 1;
        default:
          return allPages;
        }
      }());
    };
    normalizeCurrentPage = function(){
      var allPages;
      allPages = Math.ceil(div(config.array.length, store.staking[type + "_per_page"]));
      store.staking["current_" + type + "_page"] = (function(){
        switch (false) {
        case !(+page > +allPages && +allPages > 0):
          return allPages;
        case !(+allPages < 1):
          return 1;
        default:
          return store.staking["current_" + type + "_page"];
        }
      }());
      store.staking["visible_per_page_" + type + "_selector"] = false;
      return window.scrollTo(0, 0);
    };
    setPerPage = curry$(function(perPage, cb){
      cb == null && (cb = null);
      store.staking[type + "_per_page"] = perPage;
      normalizeCurrentPage();
      setTimeout(function(){
        return store.staking["visible_per_page_" + type + "_selector"] = false;
      }, 1);
    });
    switchPerPageSelector = function(){
      return store.staking["visible_per_page_" + type + "_selector"] = !store.staking["visible_per_page_" + type + "_selector"];
    };
    closePerPageSelector = function(){
      return store.staking["visible_per_page_" + type + "_selector"] = false;
    };
    pStyle = {
      backgroundColor: style.app.background,
      background: style.app.background,
      zIndex: 2
    };
    return react.createElement('div', {
      className: 'table-pagination table-pagination948035967'
    }, children = react.createElement('div', {
      className: 'pagination-holder'
    }, children = [
      react.createElement('span', {
        key: type + "-selector",
        id: type + "-selector",
        onClick: switchPerPageSelector,
        onMouseLeave: closePerPageSelector,
        style: pStyle,
        className: 'per-page-selector'
      }, children = [
        react.createElement('div', {
          className: 'to-show'
        }, ' Show ' + perPage), store.staking["visible_per_page_" + type + "_selector"] === true ? react.createElement('div', {
          style: pStyle,
          className: 'per-page-options'
        }, children = [
          react.createElement('div', {
            onClick: setPerPage(5),
            className: 'span per-page-option'
          }, ' 5'), react.createElement('div', {
            onClick: setPerPage(10),
            className: 'span per-page-option'
          }, ' 10'), react.createElement('div', {
            onClick: setPerPage(20),
            className: 'span per-page-option'
          }, ' 20')
        ]) : void 8
      ]), +entities > +store.staking[type + "_per_page"] ? react.createElement('div', {}, children = [
        button({
          store: store,
          classes: "width-auto",
          text: "<",
          noIcon: true,
          onClick: goBack,
          style: {
            width: 'auto',
            display: 'block'
          },
          makeDisabled: prevButtonDisabled
        }), react.createElement('span', {
          className: 'current-page'
        }, children = [react.createElement('span', {}, ' Page'), " " + page, " /", " " + allPages]), button({
          store: store,
          classes: "width-auto",
          text: ">",
          noIcon: true,
          onClick: goForward,
          style: {
            width: 'auto',
            display: 'block'
          },
          makeDisabled: nextButtonDisabled
        })
      ]) : void 8
    ]));
  };
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
