// Generated by LiveScript 1.6.0
(function(){
  var velasWeb3, addresses, velasSolanaWeb3, NStaking, find, abis;
  velasWeb3 = require('./velas-web3.ls');
  addresses = require('./addresses.ls');
  velasSolanaWeb3 = require('./velas-solana-web3.ls');
  NStaking = require('./velas-staking.js');
  find = require('prelude-ls').find;
  abis = {
    Staking: require("../../web3t/contracts/StakingAuRa.json").abi,
    ValidatorSet: require("../../web3t/contracts/ValidatorSetAuRa.json").abi,
    BlockReward: require("../../web3t/contracts/BlockRewardAuRa.json").abi,
    Development: require("../../web3t/contracts/VelasDevelopment.json").abi,
    Resolver: require("../../web3t/contracts/LockupResolver.json").abi,
    Timelock: require("../../web3t/contracts/LockupTimelock.json").abi,
    EvmToNativeBridge: require("../../web3t/contracts/EvmToNativeBridge.json").abi,
    HomeBridgeNativeToErc: require("../../web3t/contracts/HomeBridgeNativeToErc.json").abi,
    ForeignBridgeNativeToErc: require("../../web3t/contracts/ForeignBridgeNativeToErc.json").abi,
    ERC20BridgeToken: require("../../web3t/contracts/ERC20BridgeToken.json").abi,
    ERC677BridgeToken: require("../../web3t/contracts/ERC20BridgeToken.json").abi,
    HomeERC677Bridge: require("../../web3t/contracts/HomeBridgeNativeToErc.json").abi,
    ForeignBridgeErcToErc: require("../../web3t/contracts/ForeignBridgeErcToErc.json").abi
  };
  module.exports = function(store){
    var web3, network, ref$, stakingAddress, ref1$, validatorSetAddress, ref2$, blockRewardAddress, ref3$, developmentContractAddress, ref4$, resolverContractAddress, ref5$, homeBridgeAddress, ref6$, foreignBridgeAddress, ref7$, ERC20BridgeToken, ref8$, ERC677BridgeTokenAddress, ref9$, EvmToNativeBridgeAddress, ref10$, HomeERC677BridgeAddress, ref11$, ForeignBridgeErcToErcAddress, web3Solana, networks, api;
    web3 = velasWeb3(store);
    network = store.current.network;
    if (((ref$ = addresses[network]) != null ? ref$.Staking : void 8) != null) {
      stakingAddress = addresses[network].Staking;
    }
    if (((ref1$ = addresses[network]) != null ? ref1$.ValidatorSet : void 8) != null) {
      validatorSetAddress = addresses[network].ValidatorSet;
    }
    if (((ref2$ = addresses[network]) != null ? ref2$.BlockReward : void 8) != null) {
      blockRewardAddress = addresses[network].BlockReward;
    }
    if (((ref3$ = addresses[network]) != null ? ref3$.Development : void 8) != null) {
      developmentContractAddress = addresses[network].Development;
    }
    if (((ref4$ = addresses[network]) != null ? ref4$.ResolverAuRa : void 8) != null) {
      resolverContractAddress = addresses[network].ResolverAuRa;
    }
    if (((ref5$ = addresses[network]) != null ? ref5$.HomeBridge : void 8) != null) {
      homeBridgeAddress = addresses[network].HomeBridge;
    }
    if (((ref6$ = addresses[network]) != null ? ref6$.ForeignBridge : void 8) != null) {
      foreignBridgeAddress = addresses[network].ForeignBridge;
    }
    if (((ref7$ = addresses[network]) != null ? ref7$.ERC20BridgeToken : void 8) != null) {
      ERC20BridgeToken = addresses[network].ERC20BridgeToken;
    }
    if (((ref8$ = addresses[network]) != null ? ref8$.ERC677BridgeToken : void 8) != null) {
      ERC677BridgeTokenAddress = addresses[network].ERC677BridgeToken;
    }
    if (((ref9$ = addresses[network]) != null ? ref9$.EvmToNative : void 8) != null) {
      EvmToNativeBridgeAddress = addresses[network].EvmToNative;
    }
    if (((ref10$ = addresses[network]) != null ? ref10$.HomeERC677Bridge : void 8) != null) {
      HomeERC677BridgeAddress = addresses[network].HomeERC677Bridge;
    }
    if (((ref11$ = addresses[network]) != null ? ref11$.ForeignBridgeErcToErcAddress : void 8) != null) {
      ForeignBridgeErcToErcAddress = addresses[network].ForeignBridgeErcToErcAddress;
    }
    web3Solana = velasSolanaWeb3(store);
    networks = {
      mainnet: 'https://api.velas.com',
      testnet: 'https://api.testnet.velas.com/rpc',
      devnet: 'https://api.devnet.velas.com'
    };
    api = {
      Staking: stakingAddress != null ? web3.eth.contract(abis.Staking).at(stakingAddress) : void 8,
      NativeStaking: new NStaking({
        NODE_HOST: networks[network]
      }),
      Connection: new web3Solana.Connection(web3Solana._rpcEndpoint),
      StakingLockup: web3.eth.contract(abis.Staking),
      ValidatorSet: validatorSetAddress != null ? web3.eth.contract(abis.ValidatorSet).at(validatorSetAddress) : void 8,
      BlockReward: blockRewardAddress != null ? web3.eth.contract(abis.BlockReward).at(blockRewardAddress) : void 8,
      Development: developmentContractAddress != null ? web3.eth.contract(abis.Development).at(developmentContractAddress) : void 8,
      Resolver: resolverContractAddress != null ? web3.eth.contract(abis.Resolver).at(resolverContractAddress) : void 8,
      Timelock: web3.eth.contract(abis.Timelock),
      web3: web3.eth,
      EvmToNativeBridge: EvmToNativeBridgeAddress != null ? web3.eth.contract(abis.EvmToNativeBridge).at(EvmToNativeBridgeAddress) : void 8,
      HomeBridgeNativeToErc: homeBridgeAddress != null ? web3.eth.contract(abis.HomeBridgeNativeToErc).at(homeBridgeAddress) : void 8,
      ForeignBridgeNativeToErc: foreignBridgeAddress != null ? web3.eth.contract(abis.ForeignBridgeNativeToErc).at(foreignBridgeAddress) : void 8,
      ERC20BridgeToken: ERC20BridgeToken != null ? web3.eth.contract(abis.ERC20BridgeToken).at(ERC20BridgeToken) : void 8,
      ERC677BridgeToken: ERC677BridgeTokenAddress != null ? web3.eth.contract(abis.ERC677BridgeToken).at(ERC677BridgeTokenAddress) : void 8,
      HomeERC677BridgeLegacyToErc: HomeERC677BridgeAddress != null ? web3.eth.contract(abis.HomeERC677Bridge).at(HomeERC677BridgeAddress) : void 8,
      ForeignBridgeErcToErc: ForeignBridgeErcToErcAddress != null ? web3.eth.contract(abis.ForeignBridgeErcToErc).at(ForeignBridgeErcToErcAddress) : void 8,
      ForeignBridgeErcToErcDefault: web3.eth.contract(abis.ForeignBridgeErcToErc),
      HomeBridgeNativeToErc677: web3.eth.contract(abis.HomeBridgeNativeToErc)
    };
    return api;
  };
}).call(this);
