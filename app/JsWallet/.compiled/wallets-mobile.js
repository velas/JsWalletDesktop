// Generated by LiveScript 1.6.0
(function(){
  var react, wallet, ref$, map, take, drop, filter, groupBy, keys, objToPairs, find, reverse, menu, web3, walletsFuncs, walletFuncs, roundHuman, roundNumber, button, addressHolder, manageAccount, tokenMigration, addCoinPage, getLang, getPrimaryInfo, history, icons, icon, div, times, minus, Line, cb, walletGroup, mobile;
  react = require('react');
  wallet = require('./wallet.ls');
  ref$ = require('prelude-ls'), map = ref$.map, take = ref$.take, drop = ref$.drop, filter = ref$.filter, groupBy = ref$.groupBy, keys = ref$.keys, objToPairs = ref$.objToPairs, find = ref$.find, reverse = ref$.reverse;
  menu = require('./menu.ls');
  web3 = require('../web3.ls');
  walletsFuncs = require('../wallets-funcs.ls');
  walletFuncs = require('../wallet-funcs.ls');
  roundHuman = require('../round-human.ls');
  roundNumber = require('../round-number.ls');
  button = require('../components/button.ls');
  addressHolder = require('../components/address-holder.ls');
  manageAccount = require('./manage-account.ls');
  tokenMigration = require('./token-migration.ls');
  addCoinPage = require('./add-coin.ls');
  getLang = require('../get-lang.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  history = require('./history.ls');
  icons = require('../icons.ls');
  icon = require('./icon.ls');
  ref$ = require('../math.ls'), div = ref$.div, times = ref$.times, minus = ref$.minus;
  Line = require('react-chartjs-2').Line;
  cb = bind$(console, 'log');
  walletGroup = curry$(function(store, web3t, wallets, walletsGroups, walletsGroup){
    var lang, style, labelUninstall, walletStyle, borderStyle, border, buttonPrimary3Style, flexStyle, addressInput, btnIcon, iconColor, placeholder, placeholderCoin, isLoading, groupName, children;
    lang = getLang(store);
    style = getPrimaryInfo(store);
    labelUninstall = (function(){
      switch (false) {
      case !store.current.refreshing:
        return '...';
      default:
        return lang.hide + "";
      }
    }());
    walletStyle = {
      color: style.app.text
    };
    borderStyle = {
      borderBottom: "1px solid " + style.app.border
    };
    border = {
      borderTop: "1px solid " + style.app.border,
      borderRight: "1px solid " + style.app.border
    };
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    flexStyle = {
      display: "flex"
    };
    addressInput = {
      color: style.app.color3,
      background: style.app.bgPrimaryLight
    };
    btnIcon = {
      filter: style.app.btnIcon
    };
    iconColor = {
      filter: style.app.iconFilter
    };
    placeholder = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder";
      default:
        return "";
      }
    }());
    placeholderCoin = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "placeholder-coin";
      default:
        return "";
      }
    }());
    isLoading = store.current.refreshing === true;
    groupName = (function(){
      switch (false) {
      case (walletsGroup != null ? walletsGroup[0] : void 8) == null:
        return walletsGroup[0];
      default:
        return '';
      }
    }());
    wallets = walletsGroup[1];
    return react.createElement('div', {
      className: 'wallet-group'
    }, children = [
      react.createElement('div', {
        className: 'group-name'
      }, ' ' + groupName + ' Network'), map(function(wallet){
        var ref$, buttonStyle, uninstall, active, big, balance, balanceUsd, pending, send, receive, swap, expand, usdRate, last, name, receiveClick, sendClick, swapClick, token, tokenDisplay, makeDisabled, walletIsDisabled, disabledClass, sendSwapDisabled, marketHistoryPrices, historyPrices, prev, lastPrice, prevPrice, ref1$, borderColor, percent, percentRounded, percentDisplay, percentClass, getGradient, buildData, data, fnCb, options, legend, installedNetworks, availableNetworks, ref2$, locationWallet, uriProd, uriTest, uri_simplex, buy, children, ref3$;
        ref$ = walletFuncs(store, web3t, wallets, wallet, walletsGroups, groupName), buttonStyle = ref$.buttonStyle, uninstall = ref$.uninstall, wallet = ref$.wallet, active = ref$.active, big = ref$.big, balance = ref$.balance, balanceUsd = ref$.balanceUsd, pending = ref$.pending, send = ref$.send, receive = ref$.receive, swap = ref$.swap, expand = ref$.expand, usdRate = ref$.usdRate, last = ref$.last;
        name = (ref$ = wallet.coin.name) != null
          ? ref$
          : wallet.coin.token;
        receiveClick = receive(wallet);
        sendClick = send(wallet);
        swapClick = swap(store, wallet);
        token = wallet.coin.token;
        tokenDisplay = ((ref$ = wallet.coin.nickname) != null ? ref$ : "").toUpperCase();
        makeDisabled = store.current.refreshing;
        walletIsDisabled = isNaN(wallet.balance);
        disabledClass = !isLoading && walletIsDisabled ? "disabled-wallet-item" : "";
        walletIsDisabled = isNaN(wallet.balance);
        sendSwapDisabled = walletIsDisabled || isLoading;
        marketHistoryPrices = (function(){
          var ref$, ref1$;
          switch (false) {
          case wallet.marketHistoryPrices == null:
            return (ref$ = (ref$ = wallet.marketHistoryPrices) != null ? (ref1$ = ref$.data) != null ? ref1$.points : void 8 : void 8) != null
              ? ref$
              : {};
          default:
            return {};
          }
        }());
        historyPrices = take(10)(
        reverse(
        map(function(it){
          return import$({
            ts: it[0]
          }, it[1]);
        })(
        objToPairs(
        marketHistoryPrices))));
        last = historyPrices[0];
        prev = historyPrices[1];
        lastPrice = last != null ? (ref$ = last.v) != null ? ref$[0] : void 8 : void 8;
        prevPrice = prev != null ? (ref1$ = prev.v) != null ? ref1$[0] : void 8 : void 8;
        /* Line color */
        borderColor = (function(){
          switch (false) {
          case !(lastPrice < prevPrice):
            return 'rgba(255, 0, 80, 0.9)';
          default:
            return 'rgb(108, 253, 73)';
          }
        }());
        percent = (function(){
          switch (false) {
          case !(prevPrice == null || lastPrice == null):
            return "";
          default:
            return div(times(minus(lastPrice, prevPrice), 100), prevPrice);
          }
        }());
        percentRounded = roundNumber(percent, {
          decimals: 4
        });
        percentDisplay = (function(){
          switch (false) {
          case !(percent > 0):
            return "+" + percentRounded;
          default:
            return percentRounded;
          }
        }());
        if (percent !== "") {
          percentDisplay += "%";
        }
        percentClass = (function(){
          switch (false) {
          case !(percent < 0):
            return "negative";
          default:
            return "positive";
          }
        }());
        /* get gradient */
        getGradient = function(ctx, chartArea){
          var chartWidth, chartHeight, width, height, gradient;
          chartWidth = chartArea.right - chartArea.left;
          chartHeight = chartArea.bottom - chartArea.top;
          if (deepEq$(gradient, null, '===') || !deepEq$(width, chartWidth, '===') || !deepEq$(height, chartHeight, '===')) {
            width = chartWidth;
            height = chartHeight;
            gradient = ctx.createLinearGradient(chartArea.left, 0, chartArea.right, 0);
            if (lastPrice < prevPrice) {
              gradient.addColorStop(0, "rgba(255, 0, 80, 0.01)");
              gradient.addColorStop(0.7, "rgba(255, 0, 80, 0.1)");
              gradient.addColorStop(1, "rgba(255, 0, 80, 0.3)");
            } else {
              gradient.addColorStop(0, "rgba(119, 255, 0, 0.01)");
              gradient.addColorStop(0.7, "rgba(30, 255, 6, 0.11)");
              gradient.addColorStop(1, "rgba(4, 255, 14, 0.14)");
            }
          }
          return gradient;
        };
        /* History Prices Linear Graph */
        buildData = function(items){
          var data;
          data = map(function(it){
            var ref$;
            return it != null ? (ref$ = it.v) != null ? ref$[0] : void 8 : void 8;
          })(
          reverse(
          items));
          return {
            datasets: [{
              data: data,
              backgroundColor: function(context){
                var chart, ctx, chartArea;
                chart = context.chart;
                ctx = chart.ctx, chartArea = chart.chartArea;
                if (!chartArea) {
                  return null;
                }
                return getGradient(ctx, chartArea);
              },
              borderColor: borderColor,
              borderWidth: 1,
              lineTension: 0.3,
              grid: borderColor,
              label: {
                display: false
              },
              pointRadius: 0
            }],
            labels: data
          };
        };
        data = buildData(historyPrices);
        fnCb = function(tooltipItem){
          return tooltipItem.yLabel;
        };
        options = {
          legend: {
            display: false
          },
          tooltips: {
            callbacks: {
              label: fnCb
            }
          },
          scales: {
            xAxes: [{
              display: false,
              gridLines: {
                color: "red",
                display: false
              }
            }],
            yAxes: [{
              display: false,
              gridLines: {
                color: 'red',
                display: false
              }
            }]
          }
        };
        legend = {
          display: false
        };
        installedNetworks = map(function(it){
          return it.token;
        })(
        store.coins);
        availableNetworks = filter(function(it){
          return it.disabled !== true && in$(it.referTo, installedNetworks);
        })(
        map(function(it){
          return it[1];
        })(
        objToPairs(
        (ref2$ = wallet.network.networks) != null
          ? ref2$
          : [])));
        locationWallet = window.location.host === "wallet.testnet.velas.com" ? 'wallet_testnet' : 'wallet_mainnet';
        uriProd = "https://buy.velas.com/?address=" + wallet.address + "&crypto_currency=" + tokenDisplay + "&env=" + locationWallet;
        uriTest = "https://fiat-payments.testnet.velas.com/?address=" + wallet.address + "&crypto_currency=" + tokenDisplay + "&env=" + locationWallet;
        uri_simplex = (function(){
          switch (false) {
          case store.current.network !== 'testnet':
            return uriTest;
          default:
            return uriProd;
          }
        }());
        buy = function(){
          return window.open(uri_simplex);
        };
        /* Render */
        return react.createElement('div', {
          key: token + "",
          style: borderStyle,
          className: big + " " + disabledClass + " wallet wallet-mobile wallet-item wallet-mobile1769991819"
        }, children = react.createElement('div', {
          onClick: expand,
          className: 'wallet-top'
        }, children = [
          react.createElement('div', {
            style: walletStyle,
            className: 'top-left'
          }, children = [
            react.createElement('div', {
              className: placeholderCoin + " img"
            }, children = react.createElement('img', {
              src: wallet.coin.image + ""
            })), react.createElement('div', {
              className: 'info'
            }, children = [
              react.createElement('div', {
                className: placeholder + " balance title"
              }, ' ' + name), store.current.device === 'desktop' ? react.createElement('div', {
                title: wallet.balance + "",
                className: placeholder + " price token"
              }, children = [react.createElement('span', {}, ' ' + roundHuman(wallet.balance)), react.createElement('span', {}, ' ' + tokenDisplay)]) : void 8, react.createElement('div', {
                title: balanceUsd + "",
                className: placeholder + " price"
              }, children = [react.createElement('span', {}, ' ' + roundHuman(balanceUsd)), react.createElement('span', {}, ' USD')])
            ])
          ]), store.current.device === 'mobile' ? react.createElement('div', {
            style: walletStyle,
            className: 'top-middle'
          }, children = [
            +wallet.pendingSent === 0 ? react.createElement('div', {
              className: placeholder + " balance title"
            }, ' ' + name) : void 8, react.createElement('div', {
              className: placeholder + " balance"
            }, children = [
              react.createElement('span', {
                title: wallet.balance + ""
              }, ' ' + roundHuman(wallet.balance)), react.createElement('img', {
                src: wallet.coin.image + "",
                className: placeholderCoin + " label-coin"
              }), react.createElement('span', {}, ' ' + tokenDisplay), +wallet.pendingSent > 0 ? react.createElement('div', {
                className: 'pending'
              }, children = react.createElement('span', {}, ' -' + pending)) : void 8
            ])
          ]) : void 8, react.createElement('div', {
            className: 'top-right'
          }, children = [
            false && store.current.device === 'desktop' ? react.createElement('span', {
              onClick: expand,
              className: 'icon'
            }, children = react.createElement('img', {
              src: icons.arrowDown + "",
              style: iconColor,
              className: 'icon-svg-create'
            }, children = react.createElement('div', {}, ' expand'))) : void 8, button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : sendClick,
              text: 'send',
              icon: 'send',
              type: 'secondary',
              makeDisabled: makeDisabled != null ? makeDisabled : sendSwapDisabled
            }), button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : receiveClick,
              text: 'receive',
              icon: 'get',
              type: 'primary'
            }), availableNetworks.length > 0 ? button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : swapClick,
              text: 'swap',
              icon: 'swap',
              id: "wallet-swap",
              makeDisabled: makeDisabled != null ? makeDisabled : sendSwapDisabled,
              classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
            }) : void 8, (wallet != null ? (ref2$ = wallet.coin) != null ? ref2$.token : void 8 : void 8) === "vlx_native" ? button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : buy,
              text: 'buy',
              icon: 'buy',
              id: "wallet-buy",
              classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
            }) : void 8, (wallet != null ? (ref3$ = wallet.coin) != null ? ref3$.token : void 8 : void 8) === "vlx_evm" ? button({
              store: store,
              onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : buy,
              text: 'buy',
              icon: 'buy',
              id: "wallet-buy",
              classes: typeof classes != 'undefined' && classes !== null ? classes : "wallet-swap"
            }) : void 8
          ]), react.createElement('div', {
            style: border,
            className: 'wallet-middle'
          }, children = [
            addressHolder({
              store: store,
              wallet: wallet,
              type: 'bg'
            }), token !== 'btc' && token !== 'vlx' && token !== 'vlx_native' && token !== 'vlx2' && token !== 'eth' && token !== 'vlx_evm' ? react.createElement('div', {
              onClick: uninstall,
              style: walletStyle,
              className: 'uninstall'
            }, ' ' + labelUninstall) : void 8
          ])
        ]));
      })(
      wallets)
    ]);
  });
  mobile = function(arg$){
    var store, web3t, ref$, wallets, goUp, canUp, goDown, canDown, style, lang, borderStyleW, borderStyle, row, leftSide, rightSide, headerStyle, input, headerLeft, borderRight, openAccount, editAccountName, defaultAccountName, editAccount, doneEdit, cancelEditAccountName, currentAccountName, accountName, rotateClass, walletsGroups, groups, groupIndex, groupsWallets, groupWallets, walletDetail, viewAccountTemplate, editAccountTemplate, chosenAccountTemplate, children;
    store = arg$.store, web3t = arg$.web3t;
    if (store.current.account == null) {
      return null;
    }
    ref$ = walletsFuncs(store, web3t), wallets = ref$.wallets, goUp = ref$.goUp, canUp = ref$.canUp, goDown = ref$.goDown, canDown = ref$.canDown;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    borderStyleW = {
      border: "1px solid " + style.app.border,
      background: style.app.input + "99"
    };
    borderStyle = {
      borderTop: "1px solid " + style.app.border
    };
    row = {
      display: "flex",
      height: "100vh",
      marginLeft: "60px"
    };
    leftSide = {
      width: "45%"
    };
    rightSide = {
      width: "55%",
      borderLeft: "1px solid " + style.app.border
    };
    headerStyle = {
      borderTop: "1px solid " + style.app.border,
      padding: "17px 0px 20px",
      color: style.app.text,
      textAlign: "left"
    };
    input = {
      background: style.app.wallet,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    headerLeft = {
      marginLeft: "10px"
    };
    borderRight = {
      borderRight: "1px solid " + style.app.border
    };
    openAccount = function(){
      return store.current.switchAccount = !store.current.switchAccount;
    };
    editAccountName = function(){
      return store.current.editAccountName = currentAccountName();
    };
    defaultAccountName = function(){
      return "Account " + store.current.accountIndex;
    };
    editAccount = function(e){
      return store.current.editAccountName = e.target.value;
    };
    doneEdit = function(){
      localStorage.setItem(defaultAccountName(), store.current.editAccountName);
      return cancelEditAccountName();
    };
    cancelEditAccountName = function(){
      return store.current.editAccountName = "";
    };
    currentAccountName = function(){
      var ref$;
      return (ref$ = localStorage.getItem(defaultAccountName())) != null
        ? ref$
        : defaultAccountName();
    };
    accountName = currentAccountName();
    rotateClass = store.current.switchAccount ? 'rotate' : "";
    walletsGroups = groupBy(function(it){
      return it.network.group;
    })(
    filter(function(arg$){
      var coin, network;
      coin = arg$.coin, network = arg$.network;
      return (coin.name + coin.token).toLowerCase().indexOf(store.current.search.toLowerCase()) !== -1 && network.disabled !== true;
    })(
    wallets));
    groups = keys(
    walletsGroups);
    groupIndex = store.current.groupIndex;
    groupsWallets = map(function(it){
      return it[1];
    })(
    objToPairs(
    walletsGroups));
    groupWallets = groupsWallets[groupIndex];
    walletDetail = find(function(it){
      return groupWallets.indexOf(it) === store.current.walletIndex;
    })(
    groupWallets != null
      ? groupWallets
      : []);
    viewAccountTemplate = function(){
      var children;
      return react.createElement('div', {
        className: 'switch-account h1'
      }, children = [
        react.createElement('span', {
          onClick: openAccount,
          className: 'name'
        }, ' ' + accountName), react.createElement('span', {
          onClick: editAccountName,
          className: 'icon'
        }, children = react.createElement('img', {
          src: icons.create + "",
          className: 'icon-svg1'
        })), react.createElement('span', {
          onClick: openAccount,
          className: rotateClass + " icon"
        }, children = react.createElement('img', {
          src: icons.arrowDown + "",
          className: 'icon-svg2'
        }))
      ]);
    };
    editAccountTemplate = function(){
      var children;
      return react.createElement('div', {
        className: 'switch-account h1'
      }, children = [
        react.createElement('input', {
          value: store.current.editAccountName + "",
          onChange: editAccount,
          style: input,
          className: 'h1'
        }), react.createElement('span', {
          onClick: doneEdit,
          className: 'ckeck icon'
        }, children = icon("Check", 20)), react.createElement('span', {
          onClick: cancelEditAccountName,
          className: 'cancel icon'
        }, children = icon("X", 20))
      ]);
    };
    chosenAccountTemplate = store.current.editAccountName === ""
      ? viewAccountTemplate()
      : editAccountTemplate();
    return react.createElement('div', {
      key: "wallets",
      className: 'wallet-mobile wallet-mobile1769991819'
    }, children = [
      menu({
        store: store,
        web3t: web3t
      }), manageAccount({
        store: store,
        web3t: web3t
      }), tokenMigration({
        store: store,
        web3t: web3t
      }), addCoinPage({
        store: store,
        web3t: web3t
      }), react.createElement('div', {
        key: "wallets-body",
        className: 'wallets'
      }, children = [
        react.createElement('div', {
          style: headerStyle,
          className: 'header'
        }, children = [
          react.createElement('span', {
            style: headerLeft,
            className: 'head left h1 hidden'
          }, ' ' + lang.yourWallets), chosenAccountTemplate
        ]), react.createElement('div', {
          key: "wallets-viewport",
          style: borderStyleW,
          className: 'wallet-container'
        }, children = map(walletGroup(store, web3t, wallets, groups))(
        objToPairs(
        groupBy(function(it){
          return it.network.group;
        })(
        wallets))))
      ])
    ]);
  };
  module.exports = mobile;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) {
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
