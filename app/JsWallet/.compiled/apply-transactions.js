// Generated by LiveScript 1.6.0
(function(){
  var ref$, sortBy, reverse, filter, find, keys, map, makeArray, filterTxs;
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, reverse = ref$.reverse, filter = ref$.filter, find = ref$.find, keys = ref$.keys, map = ref$.map;
  makeArray = function(obj){
    return map(function(it){
      return obj[it];
    })(
    keys(
    obj));
  };
  filterTxs = curry$(function(store, tx){
    var type, token, from, to, filterProps, found;
    type = tx.type, token = tx.token, from = tx.from, to = tx.to;
    filterProps = keys(
    store.current.filter);
    found = filter(function(prop){
      return store.current.filter[prop] === tx[prop];
    })(
    filterProps);
    return found.length === filterProps.length;
  });
  module.exports = function(store){
    return store.transactions.applied = reverse(
    sortBy(function(it){
      return it.time;
    })(
    filter(filterTxs(store))(
    filter(function(it){
      return in$(it.type, store.current.filterTxsTypes);
    })(
    store.transactions.all))));
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
