// Generated by LiveScript 1.6.0
(function(){
  var react, scrollTop, modalControl, current, makeChoice, acceptAsk, cancelAsk, reduceOrCancel, plug, install, replace, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
  react = require('react');
  scrollTop = require('./scroll-top.ls');
  out$.modalControl = modalControl = function(store){
    var ref$, text, callback, enabled, accept, reject, coinImage, coinType, children, i;
    ref$ = store.ask, text = ref$.text, callback = ref$.callback, enabled = ref$.enabled;
    if (enabled !== true) {
      return;
    }
    accept = function(){
      return acceptAsk(store);
    };
    reject = function(){
      return cancelAsk(store);
    };
    coinImage = {
      backgroundImage: "url(" + store.ask.image + ")"
    };
    coinType = store.ask.type + "-type";
    return react.createElement('div', {
      key: "modal-container",
      className: 'modal-container modal-container-994859877'
    }, children = react.createElement('div', {
      className: 'modal'
    }, children = [
      react.createElement('div', {
        className: 'bg'
      }), react.createElement('div', {
        className: 'blur'
      }), react.createElement('div', {
        className: 'install-body'
      }, children = react.createElement('div', {
        className: 'install'
      }, children = [
        react.createElement('div', {
          className: 'decoration'
        }, children = [
          react.createElement('div', {
            className: 'left item'
          }), react.createElement('div', {
            className: 'right item'
          })
        ]), react.createElement('div', {
          className: 'close-area'
        }, children = react.createElement('div', {
          onClick: reject,
          className: 'close'
        }, ' X')), react.createElement('div', {
          className: 'title'
        }, ' ' + text), react.createElement('div', {
          className: 'animation'
        }, children = react.createElement('div', {
          className: 'coin-container'
        }, children = react.createElement('div', {
          className: coinType + " coin"
        }, children = [
          react.createElement('div', {
            style: coinImage,
            className: 'front'
          }), react.createElement('div', {
            style: coinImage,
            className: 'back'
          }), react.createElement('div', {
            className: 'side'
          }, children = (function(){
            var i$, ref$, len$, results$ = [];
            for (i$ = 0, len$ = (ref$ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]).length; i$ < len$; ++i$) {
              i = ref$[i$];
              results$.push(react.createElement('div', {
                style: coinImage,
                className: 'spoke'
              }));
            }
            return results$;
          }()))
        ]))), react.createElement('div', {
          onClick: accept,
          className: 'button'
        }, ' INSTALL')
      ]))
    ]));
  };
  current = {
    timer: null
  };
  makeChoice = function(err){
    return function(store){
      var cb;
      current.timer = clearTimeout(current.timer);
      cb = store.ask.callback;
      store.ask.enabled = false;
      store.ask.text = "";
      store.ask.callback = null;
      store.ask.image = "";
      if (toString$.call(cb).slice(8, -1) === 'Function') {
        return cb(err);
      }
    };
  };
  acceptAsk = makeChoice(null);
  out$.cancelAsk = cancelAsk = makeChoice('Cancelled');
  reduceOrCancel = function(store, timerSec){
    return function(_){
      current.timer = clearTimeout(current.timer);
      if (timerSec <= 0) {
        return cancelAsk(store);
      }
      return current.timer = setTimeout(reduceOrCancel(store, timerSec - 1), 1000);
    };
  };
  plug = function(type){
    return function(store, plugin, cb){
      if (toString$.call(store).slice(8, -1) !== 'Object') {
        return cb("store is required");
      }
      if (toString$.call(plugin).slice(8, -1) !== 'Object') {
        return cb("plugin is required");
      }
      if (store.ask.enabled === true) {
        return cb("Cannot ask because ask modal is busy with another task");
      }
      store.ask.enabled = true;
      store.ask.text = (plugin.token + " " + plugin.type).toUpperCase();
      store.ask.image = plugin.image;
      store.ask.type = plugin.type;
      store.ask.callback = cb;
      scrollTop();
      return reduceOrCancel(store, 11)();
    };
  };
  out$.install = install = plug('install');
  out$.replace = replace = plug('replace');
}).call(this);
