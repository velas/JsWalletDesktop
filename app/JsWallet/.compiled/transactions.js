// Generated by LiveScript 1.6.0
(function(){
  var ref$, each, map, pairsToObj, filter, find, getTransactions, run, task, getPendingTxs, removeTx, applyTransactions, addTask, same, extend, transformPtx, makeNotPending, checkTransactionTask, checkPtxInBackground, checkPtxsInBackground, rebuildHistory, buildLoader, loadAllTransactions, loadWalletTransactions, slice$ = [].slice, out$ = typeof exports != 'undefined' && exports || this;
  ref$ = require('prelude-ls'), each = ref$.each, map = ref$.map, pairsToObj = ref$.pairsToObj, filter = ref$.filter, find = ref$.find;
  getTransactions = require('./api.ls').getTransactions;
  ref$ = require('./workflow.ls'), run = ref$.run, task = ref$.task;
  ref$ = require('./pending-tx.ls'), getPendingTxs = ref$.getPendingTxs, removeTx = ref$.removeTx;
  applyTransactions = require('./apply-transactions.ls');
  addTask = require('./background/background-task.ls').addTask;
  same = function(x, y){
    return (x != null ? typeof x.toUpperCase == 'function' ? x.toUpperCase() : void 8 : void 8) === (y != null ? typeof y.toUpperCase == 'function' ? y.toUpperCase() : void 8 : void 8);
  };
  extend = curry$(function(arg$, tx){
    var address, coin, pending, network, type, ref$;
    address = arg$.address, coin = arg$.coin, pending = arg$.pending, network = arg$.network;
    type = (function(){
      switch (false) {
      case !same(tx.to, address):
        return 'IN';
      default:
        return 'OUT';
      }
    }());
    if (tx.type == null) {
      tx.type = type;
    }
    tx.token = (ref$ = coin.token) != null
      ? ref$
      : tx.token;
    tx.pending = pending != null
      ? pending
      : tx.pending;
    return tx.network = network != null
      ? network
      : tx.network;
  });
  transformPtx = curry$(function(config, arg$){
    var tx, amount, fee, time, from, to2, ref$, ref1$, url, linktx, cluster, _cluster;
    tx = arg$[0], amount = arg$[1], fee = arg$[2], time = arg$[3], from = arg$[4], to2 = arg$[5];
    ref$ = (ref$ = (ref1$ = config.network) != null ? ref1$.api : void 8) != null
      ? ref$
      : {}, url = ref$.url, linktx = ref$.linktx, cluster = ref$.cluster;
    _cluster = cluster != null ? "?cluster=" + cluster : "";
    url = (function(){
      switch (false) {
      case !linktx:
        return linktx.replace(':hash', tx);
      case !url:
        return url + "/tx/" + tx + _cluster;
      }
    }());
    return {
      tx: tx,
      amount: amount,
      url: url,
      fee: fee,
      time: time,
      from: from,
      to: to2
    };
  });
  makeNotPending = function(store, tx){
    tx.pending = false;
    return removeTx({
      store: store,
      token: tx.token,
      network: tx.network,
      tx: tx.tx
    }, function(err, result){
      return applyTransactions(store);
    });
  };
  checkTransactionTask = function(bgStore, web3, network, token, ptx){
    return function(store, cb){
      var check, ref$;
      check = (ref$ = web3[token]) != null ? ref$.getTransactionReceipt : void 8;
      if (check == null) {
        return cb(null);
      }
      return check(ptx[0], function(err, data){
        var tx, ref$;
        tx = find(function(it){
          return it.token === token && it.tx === ptx[0];
        })(
        store.transactions.all);
        if (tx == null) {
          return cb(null);
        }
        tx.checked = (ref$ = tx.checked) != null ? ref$ : 0;
        tx.checked += 1;
        if (tx == null) {
          return cb(null);
        }
        if ((data != null ? data.status : void 8) === 'confirmed') {
          makeNotPending(store, tx);
        }
        if ((data != null ? data.status : void 8) === 'reverted') {
          makeNotPending(store, tx);
        }
        if ((data != null ? data.status : void 8) === 'confirmed') {
          return cb(null);
        }
        if ((data != null ? data.status : void 8) === 'reverted') {
          return cb(null);
        }
        return cb('pending');
      });
    };
  };
  checkPtxInBackground = function(store, web3, network, token, ptx, cb){
    addTask(ptx[0], checkTransactionTask(store, web3, network, token, ptx));
    return cb(null);
  };
  checkPtxsInBackground = function(store, web3, network, token, arg$, cb){
    var ptx, rest;
    ptx = arg$[0], rest = slice$.call(arg$, 1);
    if (ptx == null) {
      return cb(null);
    }
    return checkPtxInBackground(store, web3, network, token, ptx, function(err){
      return setTimeout(function(){
        if (err) {
          rest.push(ptx);
        }
        return checkPtxsInBackground(store, web3, network, token, rest, cb);
      }, 1000);
    });
  };
  out$.rebuildHistory = rebuildHistory = function(store, web3, wallet, cb){
    var address, network, coin, privateKey;
    address = wallet.address, network = wallet.network, coin = wallet.coin, privateKey = wallet.privateKey;
    return getTransactions({
      address: address,
      network: network,
      token: coin.token,
      account: {
        address: address,
        privateKey: privateKey
      }
    }, function(err, data){
      var ids, dummy;
      if (err != null) {
        return cb(err);
      }
      ids = map(function(it){
        return it.tx.toUpperCase();
      })(
      data);
      dummy = function(err, data){
        return console.log(err, data);
      };
      return getPendingTxs({
        network: network,
        store: store,
        token: coin.token
      }, function(err, ptxs){
        if (err != null) {
          return cb(err);
        }
        each(function(it){
          return removeTx({
            store: store,
            token: coin.token,
            network: network,
            tx: it[0]
          }, dummy);
        })(
        filter(function(it){
          return ids.indexOf(it[0].toUpperCase()) !== -1;
        })(
        ptxs));
        return getPendingTxs({
          network: network,
          store: store,
          token: coin.token
        }, function(err, ptxs){
          if (err != null) {
            return cb(err);
          }
          return checkPtxsInBackground(store, web3, network, coin.token, ptxs, function(err){
            var txs;
            if (err != null) {
              return cb(err);
            }
            txs = store.transactions.all;
            each(function(it){
              return txs.splice(txs.indexOf(it), 1);
            })(
            filter(function(it){
              return it.token === coin.token;
            })(
            txs));
            each(bind$(txs, 'push'))(
            each(extend({
              address: address,
              coin: coin,
              network: network
            }))(
            data));
            each(bind$(txs, 'push'))(
            each(extend({
              address: address,
              coin: coin,
              network: network,
              pending: true,
              checked: 0
            }))(
            map(transformPtx({
              address: address,
              coin: coin,
              network: network
            }))(
            ptxs)));
            return cb();
          });
        });
      });
    });
  };
  buildLoader = function(store, web3){
    return function(wallet){
      return task(function(cb){
        wallet.txsStatus = 'loading';
        return rebuildHistory(store, web3, wallet, function(err){
          wallet.txsStatus = 'loaded';
          if (err != null) {
            return cb();
          }
          return cb(null);
        });
      });
    };
  };
  out$.loadAllTransactions = loadAllTransactions = function(store, web3, cb){
    var wallets, wallet, token;
    wallets = store.current.account.wallets;
    wallet = store.current.wallet;
    token = wallet.coin.token;
    return loadWalletTransactions(store, web3, token, function(err){
      if (err != null) {
        console.error("[load-wallet-transactions]", err);
      }
      return cb(null);
    });
  };
  out$.loadWalletTransactions = loadWalletTransactions = function(store, web3, token, cb){
    var wallet, ref$, loaders, tasks;
    if (token == null) {
      return cb("[load-wallet-transactions] error: token is not defined");
    }
    wallet = find(function(it){
      return it.coin.token === token;
    })(
    store.current.account.wallets);
    if ((ref$ = wallet.txsStatus) === 'loading' || ref$ === 'loaded') {
      return;
    }
    loaders = (function(){
      switch (false) {
      case wallet == null:
        return map(buildLoader(store, web3))(
        [wallet]);
      default:
        return [];
      }
    }());
    tasks = pairsToObj(
    map(function(it){
      return [loaders.indexOf(it).toString(), it];
    })(
    loaders));
    return run([tasks]).then(function(){
      applyTransactions(store);
      return cb(null);
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
