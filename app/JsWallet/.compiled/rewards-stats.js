// Generated by LiveScript 1.6.0
(function(){
  var Line, react, ref$, map, reverse, take, filter, roundNumber, div, times, plus, minus, getColor, buildData, legend;
  Line = require('react-chartjs-2').Line;
  react = require('react');
  ref$ = require('prelude-ls'), map = ref$.map, reverse = ref$.reverse, take = ref$.take, filter = ref$.filter;
  roundNumber = require('../../round-number.ls');
  ref$ = require('../../math.ls'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  getColor = function(items){
    return function(it){
      var index, base, h;
      index = items.indexOf(it);
      base = (function(){
        switch (false) {
        case it.status !== 'active':
          return 3986863 + index * 2;
        case it.status !== 'inactive':
          return 3872625;
        case it.status !== 'banned':
          return 16730920;
        default:
          return 3872625;
        }
      }());
      h = base.toString(16);
      return '#' + h;
    };
  };
  buildData = function(items){
    var data;
    data = map(function(it){
      return div(it.amount, Math.pow(10, 9));
    })(
    items);
    return {
      datasets: [{
        data: data,
        backgroundColor: 'rgba(75,192,192,0.4)',
        borderColor: 'rgba(75,192,192,1)',
        lineTension: 0,
        grid: {
          borderColor: 'rgb(255 255 255 / 42%)'
        }
      }],
      labels: map(function(it){
        return it.epoch;
      })(
      items)
    };
  };
  legend = {
    display: false
  };
  module.exports = function(props){
    var rewards, currentEpoch, data, options, children;
    rewards = props.rewards;
    if (store.staking.chosenAccount == null) {
      return null;
    }
    if (rewards.length < 2) {
      return null;
    }
    currentEpoch = store.staking.currentEpoch;
    rewards = reverse(
    take(10)(
    filter(function(it){
      return it.epoch !== currentEpoch;
    })(
    rewards)));
    data = buildData(rewards);
    options = {
      scales: {
        xAxes: [{
          gridLines: {
            color: "rgba(240, 237, 237, 0.16)"
          }
        }],
        yAxes: [{
          gridLines: {
            color: 'rgba(240, 237, 237, 0.16)'
          }
        }]
      }
    };
    return react.createElement('div', {
      className: 'rewards-linear-graph rewards-linear-graph1297541056'
    }, children = react.createElement('div', {
      className: 'rewards-stats-container'
    }, children = react.createElement(Line, {
      data: data,
      options: options,
      width: 300,
      height: 100,
      legend: legend
    })));
  };
}).call(this);
