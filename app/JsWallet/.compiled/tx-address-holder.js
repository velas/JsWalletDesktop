// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, getAddressTitle, getAddressDisplay, MiddleEllipsis, getPrimaryInfo, icons, identicon, copy, contracts;
  react = require('react');
  ref$ = require('../address-link.ls'), getAddressTitle = ref$.getAddressTitle, getAddressDisplay = ref$.getAddressDisplay;
  MiddleEllipsis = require('./middle-ellipsis');
  getPrimaryInfo = require('../get-primary-info.ls');
  icons = require('../icons.ls');
  identicon = require('./identicon.ls');
  copy = require('./copy.ls');
  contracts = require('../contracts.ls');
  module.exports = function(arg$){
    var store, wallet, type, url, text, style, addressSuffix, addressInput, addressInputBg, input, filterIcon, icon1, addressTitle, addressDisplay, showDetails, hideDetails, active, rotateAddressSuffix, getAddress, address, isContract, children;
    store = arg$.store, wallet = arg$.wallet, type = arg$.type, url = arg$.url, text = arg$.text;
    if (url == null) {
      return null;
    }
    style = getPrimaryInfo(store);
    addressSuffix = store.current.addressSuffix;
    addressInput = {
      color: style.app.color3
    };
    addressInputBg = {
      color: style.app.color3,
      background: style.app.input
    };
    input = (function(){
      switch (false) {
      case type !== 'bg':
        return addressInputBg;
      default:
        return addressInput;
      }
    }());
    filterIcon = {
      filter: style.app.filterIcon
    };
    icon1 = {
      filter: style.app.icon1
    };
    addressTitle = (function(){
      switch (false) {
      case store.current.refreshing !== false:
        return getAddressTitle(wallet, addressSuffix);
      default:
        return "...";
      }
    }());
    addressDisplay = (function(){
      switch (false) {
      case store.current.refreshing !== false:
        return getAddressDisplay(store, wallet, addressSuffix);
      default:
        return "...";
      }
    }());
    showDetails = function(){
      return store.current.hoveredAddress.address = wallet.address;
    };
    hideDetails = function(){
      return store.current.hoveredAddress.address = null;
    };
    active = wallet.address === store.current.hoveredAddress.address ? '' : '';
    rotateAddressSuffix = function(){
      return store.current.addressSuffix = (function(){
        switch (false) {
        case !(store.current.addressSuffix === '' && wallet.address2):
          return "2";
        case !(store.current.addressSuffix === '2' && wallet.address3):
          return '3';
        default:
          return "";
        }
      }());
    };
    getAddress = function(wallet, addressSuffix){
      addressSuffix == null && (addressSuffix = "");
      return wallet["address" + addressSuffix];
    };
    address = getAddress(wallet, addressSuffix);
    isContract = contracts.isContract(store, address);
    return react.createElement('div', {
      className: 'address-holder address-holder315309714'
    }, children = [
      identicon({
        store: store,
        address: addressTitle
      }), react.createElement('span', {
        style: input,
        className: 'inner-address-holder'
      }, children = [
        store.urlParams.internal != null
          ? react.createElement('a', {
            onClick: rotateAddressSuffix,
            className: 'browse'
          }, children = react.createElement('img', {
            src: icons.choose + "",
            style: filterIcon
          }))
          : react.createElement('a', {
            target: "_blank",
            rel: "noopener noreferrer nofollow",
            href: url + "",
            className: 'browse'
          }, children = react.createElement('img', {
            src: icons.browseOpen + "",
            style: icon1
          })), isContract && false
          ? (addressDisplay = contracts.getContractName(store, address), react.createElement('a', {
            target: "_blank",
            rel: "noopener noreferrer nofollow",
            href: url + "",
            className: active + ""
          }, ' ' + addressDisplay))
          : text != null
            ? react.createElement('a', {
              target: "_blank",
              rel: "noopener noreferrer nofollow",
              href: url + "",
              className: active + " custom-title"
            }, ' ' + text)
            : react.createElement(MiddleEllipsis, {
              key: addressTitle
            }, children = react.createElement('a', {
              target: "_blank",
              rel: "noopener noreferrer nofollow",
              href: url + "",
              className: active + ""
            }, ' ' + addressDisplay))
      ]), copy({
        store: store,
        text: addressTitle
      })
    ]);
  };
}).call(this);
