// Generated by LiveScript 1.6.0
(function(){
  var ref$, objToPairs, map, pairsToObj, each, find, keys, guid, waitFormResult, div, plus, times, protect, navigate, useNetwork, getBalance, getTransactionInfo, getMarketHistoryPrices, buildInstall, buildUninstall, buildInstallByName, buildQuickInstall, backgroundRefreshAccount, setAccount, Web3, getRecord, setPageTheme, mirror, getCoins, velasApi, sendFuncs, pages, themes, localStorage, supportedThemes, state, titles, showCases, buildGetBalance, buildUnlock, buildSendTransaction, getContractInstance, buildContract, buildNetworkEthereum, buildOtherNetworks, buildNetworkSpecific, buildGetUsdAmount, buildGetTransactionReceipt, buildGetMarketHistoryPrices, buildApi, buildUse, getApis, refreshApis, setupRefreshTimer, buildGetAccountName, buildGetSupportedTokens, buildGetAddress, slice$ = [].slice, toString$ = {}.toString;
  ref$ = require('prelude-ls'), objToPairs = ref$.objToPairs, map = ref$.map, pairsToObj = ref$.pairsToObj, each = ref$.each, find = ref$.find, keys = ref$.keys;
  guid = require('./guid.ls');
  waitFormResult = require('./send-form.ls').waitFormResult;
  ref$ = require('./math.ls'), div = ref$.div, plus = ref$.plus, times = ref$.times;
  protect = require('protect');
  navigate = require('./navigate.ls');
  useNetwork = require('./use-network.ls');
  ref$ = require('./api.ls'), getBalance = ref$.getBalance, getTransactionInfo = ref$.getTransactionInfo, getMarketHistoryPrices = ref$.getMarketHistoryPrices;
  ref$ = require('./install-plugin.ls'), buildInstall = ref$.buildInstall, buildUninstall = ref$.buildUninstall, buildInstallByName = ref$.buildInstallByName, buildQuickInstall = ref$.buildQuickInstall;
  ref$ = require('./refresh-account.ls'), backgroundRefreshAccount = ref$.backgroundRefreshAccount, setAccount = ref$.setAccount;
  Web3 = require('web3');
  getRecord = require('./get-record.ls');
  setPageTheme = require('./set-page-theme.ls');
  mirror = require('./mirror.ls');
  getCoins = require('./plugin-loader.ls').getCoins;
  velasApi = require('./velas/velas-api.ls');
  sendFuncs = require('./send-funcs.ls');
  pages = require('./pages.ls');
  themes = require('./themes.ls');
  localStorage = require('localStorage');
  supportedThemes = map(function(it){
    return it[0];
  })(
  objToPairs(
  themes));
  state = {
    time: null
  };
  titles = ['name@email.com', 'name.ethnamed.io', 'domain.com'];
  showCases = function(store, arg$, cb){
    var title, titles;
    title = arg$[0], titles = slice$.call(arg$, 1);
    if (title == null) {
      return cb(null);
    }
    store.current.sendToMask = title;
    return setTimeout(function(){
      return showCases(store, titles, function(){
        return cb(null);
      });
    }, 1000);
  };
  buildGetBalance = function(store, coin){
    return function(cb){
      var network, wallet;
      network = coin[store.current.network];
      wallet = coin.wallet;
      return getBalance({
        token: coin.token,
        network: network,
        address: wallet.address
      }, cb);
    };
  };
  buildUnlock = function(store, cweb3){
    return function(cb){
      if (store.page === 'locked') {
        return cb(null);
      }
      return waitFormResult('unlock', function(err, data){
        if (err != null) {
          return cb(err);
        }
        return cb(null, data);
      });
    };
  };
  buildSendTransaction = function(store, cweb3, coin){
    return function(tx, cb){
      var network, to, data, decodedData, value, gas, amount, gasPrice, swap, ref$, id, current, send, amountObtain, amountObtainUsd, amountSendUsd, amountSendFee, amountSendFeeUsd, proposeEscrow, details, amountSend, wallet, sendAnyway, changeAmount, chooseAuto;
      network = coin[store.current.network];
      if (toString$.call(tx).slice(8, -1) !== 'Object') {
        return cb("Transaction is required");
      }
      to = tx.to, data = tx.data, decodedData = tx.decodedData, value = tx.value, gas = tx.gas, amount = tx.amount, gasPrice = tx.gasPrice, swap = tx.swap;
      if (toString$.call(tx.to).slice(8, -1) !== 'String') {
        return cb("Recipient (to) is required");
      }
      value = (function(){
        switch (false) {
        case value == null:
          return value;
        case amount == null:
          return times(amount, Math.pow(10, network.decimals));
        default:
          return null;
        }
      }());
      if ((ref$ = toString$.call(value).slice(8, -1)) !== 'String' && ref$ !== 'Number') {
        return cb("Either Value or Amount is required");
      }
      id = guid();
      current = store.current;
      send = current.send;
      amountObtain = '0';
      amountObtainUsd = '0';
      amountSendUsd = '0';
      amountSendFee = network.txFee != null ? network.txFee : '0';
      amountSendFeeUsd = '0';
      proposeEscrow = false;
      details = (data != null ? data : "").length === 0;
      amountSend = div(value, Math.pow(10, network.decimals));
      wallet = find(function(it){
        return it.coin.token === coin.token;
      })(
      store.current.account.wallets);
      importAll$(send, {
        to: to,
        data: data,
        decodedData: decodedData,
        network: network,
        coin: coin,
        wallet: wallet,
        value: value,
        gas: gas,
        gasPrice: gasPrice,
        id: id,
        amountSend: amountSend,
        amountObtain: amountObtain,
        amountObtainUsd: amountObtainUsd,
        amountSendUsd: amountSendUsd,
        amountSendFee: amountSendFee,
        amountSendFeeUsd: amountSendFeeUsd,
        proposeEscrow: proposeEscrow,
        details: details,
        swap: swap
      });
      ref$ = sendFuncs(store, web3t), sendAnyway = ref$.sendAnyway, changeAmount = ref$.changeAmount, chooseAuto = ref$.chooseAuto;
      chooseAuto();
      return changeAmount(store, amountSend, true, function(){
        var helps;
        navigate(store, cweb3, 'send', false);
        if (tx.to !== "" && (tx.swap != null && tx.value !== 0)) {
          sendAnyway();
        }
        helps = titles.concat([network.mask]);
        return waitFormResult(id, function(err, data){
          if (err != null) {
            return cb(err);
          }
          return cb(null, data);
        });
      });
    };
  };
  getContractInstance = function(web3, abi, addr){
    switch (false) {
    case toString$.call(web3.eth.contract).slice(8, -1) !== 'Function':
      return web3.eth.contract(abi).at(addr);
    default:
      return new web3.eth.Contract(abi, addr);
    }
  };
  buildContract = function(store, methods, coin){
    return function(abi){
      return {
        at: function(address){
          var sendTransaction, network, web3;
          sendTransaction = methods.sendTransaction;
          network = coin[store.current.network];
          web3 = new Web3();
          web3.setProvider(new web3.providers.HttpProvider(network.api.web3Provider));
          web3.eth.sendTransaction = function(arg$, cb){
            var value, data, to, gas, gasPrice;
            value = arg$.value, data = arg$.data, to = arg$.to, gas = arg$.gas, gasPrice = arg$.gasPrice;
            return sendTransaction({
              to: to,
              data: data,
              value: value,
              gas: gas,
              gasPrice: gasPrice
            }, cb);
          };
          return getContractInstance(web3, abi, address);
        }
      };
    };
  };
  buildNetworkEthereum = function(store, methods, coin){
    var sendTransaction, getBalance, getAddress, contract;
    sendTransaction = methods.sendTransaction, getBalance = methods.getBalance, getAddress = methods.getAddress;
    contract = buildContract(store, methods, coin);
    return {
      sendTransaction: sendTransaction,
      getBalance: getBalance,
      getAddress: getAddress,
      contract: contract
    };
  };
  buildOtherNetworks = function(store, methods, coin){
    var sendTransaction, getBalance, getAddress, getTransactionReceipt, contract;
    sendTransaction = methods.sendTransaction, getBalance = methods.getBalance, getAddress = methods.getAddress, getTransactionReceipt = methods.getTransactionReceipt;
    contract = function(){
      throw "Not Implemented For this network";
    };
    return {
      sendTransaction: sendTransaction,
      getBalance: getBalance,
      getAddress: getAddress,
      contract: contract,
      getTransactionReceipt: getTransactionReceipt
    };
  };
  buildNetworkSpecific = function(store, methods, coin){
    var builder;
    builder = (function(){
      switch (false) {
      case coin.token !== 'eth':
        return buildNetworkEthereum;
      default:
        return buildOtherNetworks;
      }
    }());
    return builder(store, methods, coin);
  };
  buildGetUsdAmount = function(store, coin){
    return function(amount, cb){
      var ref$, wallet, usd;
      if (toString$.call((ref$ = store.current.account) != null ? ref$.wallets : void 8).slice(8, -1) !== 'Array') {
        return cb("wallet isnt loaded");
      }
      wallet = find(function(it){
        return it.coin.token === coin.token;
      })(
      store.current.account.wallets);
      if (wallet == null) {
        return cb("wallet not found for " + token);
      }
      if (wallet.usdRate == null) {
        return cb("usd rate not found " + token);
      }
      if (wallet.usdRate === "") {
        wallet.usdRate = 0;
      }
      usd = times(amount, wallet.usdRate);
      return cb(null, usd);
    };
  };
  buildGetTransactionReceipt = function(store, cweb3, coin){
    return function(tx, cb){
      var network, wallet;
      network = coin[store.current.network];
      wallet = coin.wallet;
      return getTransactionInfo({
        token: coin.token,
        network: network,
        tx: tx
      }, cb);
    };
  };
  buildGetMarketHistoryPrices = function(store, cweb3, coin){
    return function(cb){
      var network;
      network = coin[store.current.network];
      return getMarketHistoryPrices({
        network: network
      }, cb);
    };
  };
  buildApi = function(store, cweb3, coin){
    var getTransactionReceipt, sendTransaction, getMarketHistoryPrices, getBalance, getAddress, getUsdAmount, methods;
    getTransactionReceipt = buildGetTransactionReceipt(store, cweb3, coin);
    sendTransaction = buildSendTransaction(store, cweb3, coin);
    getMarketHistoryPrices = buildGetMarketHistoryPrices(cweb3, store);
    getBalance = buildGetBalance(store, coin);
    getAddress = buildGetAddress(store, coin);
    getUsdAmount = buildGetUsdAmount(store, coin);
    methods = {
      getAddress: getAddress,
      sendTransaction: sendTransaction,
      getBalance: getBalance,
      getUsdAmount: getUsdAmount,
      getTransactionReceipt: getTransactionReceipt,
      getMarketHistoryPrices: getMarketHistoryPrices
    };
    return buildNetworkSpecific(store, methods, coin);
  };
  buildUse = function(web3, store){
    return function(network){
      return useNetwork(web3, store, network, function(){});
    };
  };
  getApis = function(cweb3, store, cb){
    var res;
    res = pairsToObj(
    map(function(it){
      return [it.token, buildApi(store, cweb3, it)];
    })(
    store.coins));
    return cb(null, res);
  };
  refreshApis = function(cweb3, store, cb){
    each(function(it){
      var ref$;
      return ref$ = cweb3[it], delete cweb3[it], ref$;
    })(
    map(function(it){
      return it.token;
    })(
    store.coins));
    cweb3.velas = velasApi(store);
    return getCoins(store, function(err, coins){
      if (err != null) {
        return cb(err);
      }
      store.coins = coins;
      return getApis(cweb3, store, function(err, apis){
        if (err != null) {
          return cb(err);
        }
        importAll$(cweb3, apis);
        return cb(null);
      });
    });
  };
  setupRefreshTimer = function(arg$){
    var refreshTimer, refreshBalances;
    refreshTimer = arg$.refreshTimer, refreshBalances = arg$.refreshBalances;
    if (toString$.call(refreshTimer).slice(8, -1) !== 'Number') {
      return;
    }
    clearTimeout(setupRefreshTimer.timer);
    return setupRefreshTimer.timer = setTimeout(refreshBalances, refreshTimer);
  };
  buildGetAccountName = function(cweb3, naming){
    return function(store, cb){
      var record;
      record = getRecord(store);
      return naming.whois(record, function(err, data){
        if (err != null) {
          return cb(err);
        }
        return cb(null, data);
      });
    };
  };
  buildGetSupportedTokens = function(cweb3, store){
    return function(cb){
      var ref$, tokens;
      if (toString$.call((ref$ = store.current.account) != null ? ref$.wallets : void 8).slice(8, -1) !== 'Array') {
        return cb("wallet isnt loaded");
      }
      tokens = map(function(it){
        return it.token;
      })(
      store.coins);
      return cb(null, tokens);
    };
  };
  buildGetAddress = function(store, coin){
    return function(cb){
      var address;
      if (mirror.accountAddresses == null) {
        return cb("wallet isnt loaded");
      }
      address = mirror.accountAddresses[coin.token];
      if (address == null) {
        return cb("wallet not found for " + coin.token);
      }
      return cb(null, address);
    };
  };
  module.exports = function(store, config){
    var cweb3, refreshTimer, use, install, installQuick, uninstall, installByName, naming, getSupportedTokens, getAccountName, refreshBalances, init, refreshInterface, refreshPage, refresh, setTheme, setLang, setPreference, lock, unlock, web3, velas;
    cweb3 = {};
    refreshTimer = config != null ? config.refreshTimer : void 8;
    use = buildUse(cweb3, store);
    install = buildInstall(cweb3, store);
    installQuick = buildQuickInstall(cweb3, store);
    uninstall = buildUninstall(cweb3, store);
    installByName = buildInstallByName(cweb3, store);
    naming = {};
    getSupportedTokens = buildGetSupportedTokens(cweb3, store);
    getAccountName = buildGetAccountName(cweb3, naming);
    refreshBalances = function(cb){
      setupRefreshTimer({
        refreshTimer: refreshTimer,
        refreshBalances: refreshBalances
      });
      return backgroundRefreshAccount(cweb3, store, function(err){
        return typeof cb == 'function' ? cb(null) : void 8;
      });
    };
    setupRefreshTimer({
      refreshTimer: refreshTimer,
      refreshBalances: refreshBalances
    });
    init = function(cb){
      return setAccount(cweb3, store, cb);
    };
    refreshInterface = function(cb){
      return refreshApis(cweb3, store, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    };
    refreshPage = function(cb){
      var page;
      if (store.current.page === 'wallets') {
        return cb(null);
      }
      page = pages[store.current.page];
      if (page == null) {
        return cb(null);
      }
      if (toString$.call(page.init).slice(8, -1) !== 'Function') {
        return cb(null);
      }
      return page.init({
        store: store,
        web3t: web3t,
        callAgain: false
      }, function(){
        if (toString$.call(page.focus).slice(8, -1) !== 'Function') {
          return cb(null);
        }
        return page.focus({
          store: store,
          web3t: web3t
        }, function(){
          return cb(null);
        });
      });
    };
    refresh = function(cb){
      return refreshInterface(function(err){
        if (err != null) {
          return cb(err);
        }
        return refreshBalances(function(err){
          if (err != null) {
            return cb(err);
          }
          return refreshPage(cb);
        });
      });
    };
    setTheme = function(it){
      if (!in$(it, supportedThemes)) {
        return;
      }
      store.theme = it;
      localStorage.setItem('theme', it);
      setPageTheme(store, it);
    };
    setLang = function(it, cb){
      if (it !== 'en' && it !== 'ru' && it !== 'uk') {
        return cb("support only en, ru");
      }
      store.lang = it;
      return cb(null);
    };
    setPreference = function(preference){
      var set;
      set = function(key){
        var ref$;
        if (keys !== 'disablevlx1') {
          return;
        }
        return store.preference[key] = (ref$ = preference[key]) != null
          ? ref$
          : store.preference[key];
      };
      return each(set)(
      keys(
      store.preference));
    };
    lock = function(){
      return navigate(store, void 8, 'locked');
    };
    unlock = buildUnlock(store, cweb3);
    if (toString$.call(config).slice(8, -1) === 'Object') {
      setPreference(config);
    }
    refreshInterface(function(){});
    web3 = new Web3();
    velas = velasApi(store);
    importAll$(cweb3, {
      velas: velas,
      utils: web3.utils,
      unlock: unlock,
      setPreference: setPreference,
      getSupportedTokens: getSupportedTokens,
      use: use,
      refresh: refresh,
      refreshBalances: refreshBalances,
      lock: lock,
      init: init,
      install: install,
      uninstall: uninstall,
      installByName: installByName,
      naming: naming,
      getAccountName: getAccountName,
      setTheme: setTheme,
      setLang: setLang,
      installQuick: installQuick
    });
    return cweb3;
  };
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
