// Generated by LiveScript 1.6.0
(function(){
  var web3, round5, getPrimaryInfo, navigate, applyTransactions, find, times, transaction, icons;
  web3 = require('./web3.ls');
  round5 = require('./round5.ls');
  getPrimaryInfo = require('./get-primary-info.ls');
  navigate = require('./navigate.ls');
  applyTransactions = require('./apply-transactions.ls');
  find = require('prelude-ls').find;
  times = require('./math.ls').times;
  transaction = require('mobx').transaction;
  icons = require('./icons.ls');
  module.exports = function(store, web3t, wallets, wallet, walletsGroups, groupName){
    var ref$, index, groupIndex, getPlugin, addFeePayerCoin, send, receive, swap, usdRate, ref1$, uninstall, expand, active, big, status, balance, balanceUsd, pending, walletIcon, style, buttonStyle, last;
    if (store == null || web3t == null || wallets == null || (wallet != null ? (ref$ = wallet.coin) != null ? ref$.token : void 8 : void 8) == null) {
      return null;
    }
    index = wallets.indexOf(wallet);
    groupIndex = (function(){
      switch (false) {
      case walletsGroups == null:
        return walletsGroups.indexOf(groupName);
      default:
        return 0;
      }
    }());
    if (store == null || wallet == null) {
      return null;
    }
    getPlugin = function(token, cb){
      var loadCoins;
      loadCoins = require("../web3t/load-coins.js");
      return loadCoins({
        plugins: []
      }, function(err, $web3tTokens){
        var found;
        if (err != null) {
          console.error(err);
        }
        if ($web3tTokens == null) {
          return cb(null);
        }
        found = $web3tTokens[token];
        return cb(null, found);
      });
    };
    addFeePayerCoin = function(cb){
      var coin, network, txFeeIn, found;
      coin = wallet.coin, network = wallet.network;
      txFeeIn = network.txFeeIn;
      if (txFeeIn == null) {
        return cb(null);
      }
      found = find(function(it){
        return it.coin.token === txFeeIn;
      })(
      store.current.account.wallets);
      if (found != null) {
        return cb(null);
      }
      return getPlugin(txFeeIn, function(err, feePayerPlugin){
        if (feePayerPlugin == null) {
          console.error("[add-fee-payer-coin] error: ", "Plugin " + txFeeIn + " is not found");
        }
        if (feePayerPlugin == null) {
          return cb(null);
        }
        return web3t.installQuick(feePayerPlugin, function(err){
          if (err != null) {
            return cb(err);
          }
          console.log("Fee payer plugin was installed succesfully");
          return cb(null);
        });
      });
    };
    send = curry$(function(wallet, event){
      var walletIsDisabled, isLoading;
      if (wallet == null) {
        return alert("Not yet loaded");
      }
      if (web3t[wallet.coin.token] == null) {
        return alert("Not yet loaded");
      }
      walletIsDisabled = isNaN(wallet.balance);
      isLoading = store.current.refreshing === true;
      if (walletIsDisabled || isLoading) {
        return;
      }
      return addFeePayerCoin(function(err){
        var sendTransaction, to, value;
        sendTransaction = web3t[wallet.coin.token].sendTransaction;
        to = "";
        value = 0;
        return sendTransaction({
          to: to,
          value: value
        }, function(err){});
      });
    });
    receive = curry$(function(wallet, event){
      var network;
      event.stopPropagation();
      store.current.sendMenuOpen = false;
      network = wallet.coin[store.current.network];
      importAll$(store.current.invoice, {
        coin: wallet.coin,
        wallet: wallet,
        network: network
      });
      return navigate(store, web3t, 'invoice');
    });
    swap = curry$(function(store, wallet, event){
      var walletIsDisabled, isLoading, cb;
      walletIsDisabled = isNaN(wallet.balance);
      isLoading = store.current.refreshing === true;
      if (walletIsDisabled || isLoading) {
        return;
      }
      cb = console.log;
      store.current.send.contractAddress = null;
      store.current.send.isSwap = true;
      if (wallet == null) {
        return alert("Not yet loaded");
      }
      if (web3t[wallet.coin.token] == null) {
        return alert("Not yet loaded");
      }
      return addFeePayerCoin(function(err){
        var sendTransaction, config;
        sendTransaction = web3t[wallet.coin.token].sendTransaction;
        config = {
          to: "",
          value: 0,
          swap: true
        };
        return sendTransaction(config, function(err){
          if (err != null) {
            store.current.send.error = err;
          }
          if (err != null) {
            return cb(err);
          }
        });
      });
    });
    usdRate = (ref1$ = wallet != null ? wallet.usdRate : void 8) != null ? ref1$ : "..";
    uninstall = function(e){
      var walletIndex, groupIndex;
      store.loadingWallet = true;
      e.stopPropagation();
      walletIndex = store.current.account.wallets.indexOf(wallet);
      groupIndex = store.current.groupIndex;
      if (walletIndex === -1 || groupIndex === -1) {
        store.loadingWallet = false;
        return;
      }
      store.current.account.wallets.splice(walletIndex, 1);
      return web3t.uninstall(wallet.coin.token, function(err){
        store.loadingWallet = false;
        store.current.walletIndex = 0;
        return store.current.groupIndex = 0;
      });
    };
    expand = function(e){
      e.stopPropagation();
      store.current.walletIndex = index;
      store.current.groupIndex = groupIndex;
      store.current.filter = {
        token: wallet.coin.token
      };
      return applyTransactions(store);
    };
    active = index === store.current.walletIndex && groupIndex === store.current.groupIndex ? 'active' : '';
    big = (function(){
      switch (false) {
      case !(index === store.current.walletIndex && groupIndex === store.current.groupIndex):
        return 'big';
      default:
        return "";
      }
    }());
    status = wallet.status;
    balance = round5(wallet.balance) + ' ' + wallet.coin.token.toUpperCase();
    balanceUsd = times(wallet.balance, usdRate);
    pending = round5(wallet.pendingSent) + ' ' + wallet.coin.token.toUpperCase();
    walletIcon = (function(){
      var ref$;
      switch (false) {
      case !(((ref$ = wallet.coin) != null ? ref$.custom : void 8) === true && icons.customWalletIcon != null):
        return icons.customWalletIcon;
      default:
        return wallet.coin.image;
      }
    }());
    style = getPrimaryInfo(store);
    buttonStyle = {
      color: style.app.text,
      background: style.app.background + "36",
      border: "1px solid " + style.app.border
    };
    last = (function(){
      switch (false) {
      case !(wallets.length < 4 && index + 1 === wallets.length):
        return 'last';
      default:
        return "";
      }
    }());
    return {
      walletIcon: walletIcon,
      buttonStyle: buttonStyle,
      wallet: wallet,
      active: active,
      status: status,
      big: big,
      balance: balance,
      balanceUsd: balanceUsd,
      pending: pending,
      send: send,
      swap: swap,
      expand: expand,
      usdRate: usdRate,
      last: last,
      receive: receive,
      uninstall: uninstall
    };
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
