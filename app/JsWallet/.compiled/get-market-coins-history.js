// Generated by LiveScript 1.6.0
(function(){
  var getMarketHistoryPrices, ref$, times, plus, find, map, pairsToObj, foldl, filter, run, task, round5, roundHuman, getMarketCoinsHistory;
  getMarketHistoryPrices = require('./api.ls').getMarketHistoryPrices;
  ref$ = require('./math.ls'), times = ref$.times, plus = ref$.plus;
  ref$ = require('prelude-ls'), find = ref$.find, map = ref$.map, pairsToObj = ref$.pairsToObj, foldl = ref$.foldl, filter = ref$.filter;
  ref$ = require('./workflow.ls'), run = ref$.run, task = ref$.task;
  round5 = require('./round5.ls');
  roundHuman = require('./round-human.ls');
  getMarketCoinsHistory = function(store, cb){
    var wallets, buildLoader, loaders, tasks;
    if (store == null) {
      return cb("Store is required");
    }
    wallets = store.current.account.wallets;
    buildLoader = function(wallet){
      return task(function(cb){
        var token;
        token = wallet.coin.token;
        token = wallet.coin.token.toLowerCase();
        return getMarketHistoryPrices({
          network: wallet.network,
          coin: wallet.coin
        }, function(err, historyPrices){
          var ref$;
          if (err != null) {
            console.error(token + " get-market-history-prices error:", err);
          }
          if ((historyPrices != null ? (ref$ = historyPrices.data) != null ? ref$.points : void 8 : void 8) != null) {
            wallet.marketHistoryPrices = historyPrices;
          }
          return cb();
        });
      });
    };
    loaders = map(buildLoader)(
    wallets);
    tasks = pairsToObj(
    map(function(it){
      return [loaders.indexOf(it).toString(), it];
    })(
    loaders));
    return run([tasks]).then(function(){
      return cb(null);
    });
  };
  module.exports = getMarketCoinsHistory;
}).call(this);
