// Generated by LiveScript 1.6.0
(function(){
  var react, walletExpanded, wallet, walletGroup, ref$, map, take, drop, filter, find, groupBy, sortBy, objToPairs, keys, menu, web3, walletsFuncs, manageAccount, tokenMigration, addCoinPage, getLang, getPrimaryInfo, history, yourAccount, icon, localStorage, icons, header, mobile;
  react = require('react');
  walletExpanded = require('./wallet-expanded.ls');
  wallet = require('./wallet.ls');
  walletGroup = require('./wallet-group.ls');
  ref$ = require('prelude-ls'), map = ref$.map, take = ref$.take, drop = ref$.drop, filter = ref$.filter, find = ref$.find, groupBy = ref$.groupBy, sortBy = ref$.sortBy, objToPairs = ref$.objToPairs, keys = ref$.keys;
  menu = require('./menu.ls');
  web3 = require('../web3.ls');
  walletsFuncs = require('../wallets-funcs.ls');
  manageAccount = require('./manage-account.ls');
  tokenMigration = require('./token-migration.ls');
  addCoinPage = require('./add-coin.ls');
  getLang = require('../get-lang.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  history = require('./history.ls');
  yourAccount = require('./your-account.ls');
  icon = require('./icon.ls');
  localStorage = require('localStorage');
  icons = require('../icons.ls');
  header = require('../components/header.ls');
  mobile = function(arg$){
    var store, web3t, ref$, wallets, goUp, canUp, goDown, canDown, style, lang, row, leftSide, rightSide, headerStyle, iconStyle, input, headerLeft, borderRight, tooltipVisibility, openAccount, editAccountName, defaultAccountName, editAccount, doneEdit, cancelEditAccountName, currentAccountName, accountName, rotateClass, viewAccountTemplate, editAccountTemplate, chosenAccountTemplate, walletsGroups, groups, groupIndex, groupsWallets, groupWallets, walletDetail, children;
    store = arg$.store, web3t = arg$.web3t;
    if (store.current.account == null) {
      return null;
    }
    ref$ = walletsFuncs(store, web3t), wallets = ref$.wallets, goUp = ref$.goUp, canUp = ref$.canUp, goDown = ref$.goDown, canDown = ref$.canDown;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    row = {
      display: "flex",
      height: "calc( 100vh - 61px )",
      overflow: "hidden"
    };
    leftSide = {
      minWidth: "200px",
      width: "30%",
      background: style.app.leftSide + ""
    };
    rightSide = {
      width: "70%",
      borderLeft: "1px solid " + style.app.border
    };
    headerStyle = {
      borderTop: "1px solid " + style.app.border,
      padding: "17px 0px 20px",
      color: style.app.text,
      textAlign: "left"
    };
    iconStyle = {
      filter: style.app.iconFilter
    };
    input = {
      background: style.app.wallet,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    headerLeft = {
      marginLeft: "10px"
    };
    borderRight = {
      borderRight: "1px solid " + style.app.border
    };
    tooltipVisibility = store.showTooltip
      ? {
        top: store.tooltipCoordinates.y + "px",
        left: store.tooltipCoordinates.x + "px",
        opacity: 1,
        display: "block"
      }
      : {
        opacity: 0,
        display: "none"
      };
    openAccount = function(){
      return store.current.switchAccount = !store.current.switchAccount;
    };
    editAccountName = function(){
      return store.current.editAccountName = currentAccountName();
    };
    defaultAccountName = function(){
      return "Account " + store.current.accountIndex;
    };
    editAccount = function(e){
      return store.current.editAccountName = e.target.value;
    };
    doneEdit = function(){
      localStorage.setItem(defaultAccountName(), store.current.editAccountName);
      return cancelEditAccountName();
    };
    cancelEditAccountName = function(){
      return store.current.editAccountName = "";
    };
    currentAccountName = function(){
      var ref$;
      return (ref$ = localStorage.getItem(defaultAccountName())) != null
        ? ref$
        : defaultAccountName();
    };
    accountName = currentAccountName();
    rotateClass = store.current.switchAccount ? 'rotate' : "";
    viewAccountTemplate = function(){
      var children;
      return react.createElement('div', {
        className: 'switch-account h1'
      }, children = [
        react.createElement('span', {
          onClick: openAccount,
          className: 'name'
        }, ' ' + accountName), react.createElement('span', {
          onClick: editAccountName,
          className: 'icon'
        }, children = react.createElement('img', {
          src: icons.create + "",
          style: iconStyle,
          className: 'icon-svg1'
        })), react.createElement('span', {
          onClick: openAccount,
          className: rotateClass + " icon"
        }, children = react.createElement('img', {
          src: icons.arrowDown + "",
          style: iconStyle,
          className: 'icon-svg2'
        }))
      ]);
    };
    editAccountTemplate = function(){
      var children;
      return react.createElement('div', {
        className: 'switch-account h1'
      }, children = [
        react.createElement('input', {
          value: store.current.editAccountName + "",
          onChange: editAccount,
          style: input,
          className: 'h1'
        }), react.createElement('span', {
          onClick: doneEdit,
          className: 'ckeck icon'
        }, children = icon("Check", 20)), react.createElement('span', {
          onClick: cancelEditAccountName,
          className: 'cancel icon'
        }, children = icon("X", 20))
      ]);
    };
    chosenAccountTemplate = store.current.editAccountName === ""
      ? viewAccountTemplate()
      : editAccountTemplate();
    walletsGroups = groupBy(function(it){
      return it.network.group;
    })(
    filter(function(arg$){
      var coin, network;
      coin = arg$.coin, network = arg$.network;
      return (coin.name + coin.token).toLowerCase().indexOf(store.current.search.toLowerCase()) !== -1 && network.disabled !== true;
    })(
    filter(function(it){
      return it != null;
    })(
    clone$(wallets))));
    groups = keys(
    walletsGroups);
    groupIndex = store.current.groupIndex;
    groupsWallets = map(function(it){
      return it[1];
    })(
    objToPairs(
    walletsGroups));
    groupWallets = groupsWallets[groupIndex];
    if (groupWallets == null) {
      groupWallets = [];
    }
    walletDetail = find(function(it){
      return groupWallets.indexOf(it) === store.current.walletIndex;
    })(
    groupWallets);
    return react.createElement('div', {
      key: "wallets",
      className: 'wallets-container wallets-container-923505056'
    }, children = [
      react.createElement('div', {
        style: tooltipVisibility,
        className: 'tooltipContent'
      }, children = react.createElement('div', {
        className: 'inner-tooltip'
      }, children = [
        react.createElement('div', {}, ' ' + store.tooltipMessage), react.createElement('div', {
          className: 'triangle'
        })
      ])), header(store, web3t), react.createElement('div', {
        style: row,
        className: 'left-side'
      }, children = [
        react.createElement('div', {
          style: leftSide
        }, children = [
          false ? menu({
            store: store,
            web3t: web3t
          }) : void 8, false ? (manageAccount({
            store: store,
            web3t: web3t
          }), tokenMigration({
            store: store,
            web3t: web3t
          })) : void 8, addCoinPage({
            store: store,
            web3t: web3t
          }), react.createElement('div', {
            key: "wallets-body",
            className: 'wallets hide-detail'
          }, children = [
            false ? react.createElement('div', {
              style: headerStyle,
              className: 'header'
            }, children = [
              react.createElement('span', {
                style: headerLeft,
                className: 'head left h1 hidden'
              }, ' ' + lang.yourWallets), chosenAccountTemplate, yourAccount(store, web3t)
            ]) : void 8, react.createElement('div', {
              key: "wallets-viewport",
              className: 'wallet-container'
            }, children = map(walletGroup(store, web3t, wallets, groups))(
            objToPairs(
            groupBy(function(it){
              return it.network.group;
            })(
            filter(function(arg$){
              var coin, network;
              coin = arg$.coin, network = arg$.network;
              return (coin.name + coin.token).toLowerCase().indexOf(store.current.search.toLowerCase()) !== -1 && network.disabled !== true;
            })(
            filter(function(it){
              return it != null;
            })(
            wallets))))))
          ])
        ]), react.createElement('div', {
          style: rightSide,
          className: 'show-detail'
        }, children = [
          walletExpanded(store, web3t, wallets, walletDetail), react.createElement('div', {
            key: store.current.walletIndex + "",
            className: 'history-area'
          }, children = history({
            store: store,
            web3t: web3t
          }))
        ])
      ])
    ]);
  };
  module.exports = mobile;
  function clone$(it){
    function fun(){} fun.prototype = it;
    return new fun;
  }
}).call(this);
