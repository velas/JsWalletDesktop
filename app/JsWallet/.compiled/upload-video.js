// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, map, find, icons, getPrimaryInfo, jsonParse, asCallback, waitXhrUpload, makeVideoThumbnail, onBrowseFiles, getVlxPrivateAddress, uploadVideoFilesRecursive, dropZone, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  react = require('react');
  ref$ = require('prelude-ls'), map = ref$.map, find = ref$.find;
  icons = require('../icons.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  jsonParse = require('../../web3t/json-parse.js');
  asCallback = function(p, cb){
    p['catch'](function(err){
      return cb(err);
    });
    return p.then(function(data){
      return cb(null, data);
    });
  };
  waitXhrUpload = function(xhr, cb){
    return xhr.addEventListener('load', function(event){
      if (xhr.readyState !== 4) {
        return null;
      }
      if (xhr.status !== 200) {
        return cb(xhr.statusText);
      }
      return cb(null, xhr.responseText);
      return cb(null, event);
    });
  };
  makeVideoThumbnail = function(file, cb){
    var url, video, timeupdate, snapImage;
    url = URL.createObjectURL(file);
    video = document.createElement('video');
    timeupdate = function(){
      if (snapImage()) {
        video.removeEventListener('timeupdate', timeupdate);
        return video.pause();
      }
    };
    video.addEventListener('loadeddata', function(){
      if (snapImage()) {
        return video.removeEventListener('timeupdate', timeupdate);
      }
    });
    video.addEventListener('error', function(){
      if (cb && !cb.isCallbackCalled) {
        cb(null);
        return cb.isCallbackCalled = true;
      }
    });
    snapImage = function(){
      var canvas, image, success, img;
      canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);
      image = canvas.toDataURL();
      success = image.length > 1000;
      if (success) {
        img = document.createElement('img');
        img.src = image;
        document.getElementsByTagName('div')[0].appendChild(img);
        URL.revokeObjectURL(url);
        if (cb && !cb.isCallbackCalled) {
          cb(image);
          cb.isCallbackCalled = true;
        }
      } else {
        if (cb && !cb.isCallbackCalled) {
          cb(null);
          cb.isCallbackCalled = true;
        }
      }
      return success;
    };
    video.addEventListener('timeupdate', timeupdate);
    video.preload = 'metadata';
    video.src = url;
    video.muted = true;
    video.playsInline = true;
    return video.play();
  };
  onBrowseFiles = function(){
    return document.getElementById('browse-files-video').click();
  };
  getVlxPrivateAddress = function(arg$, cb){
    var store, wallets, ref$, ref1$, ref2$, wallet;
    store = arg$.store;
    wallets = (ref$ = store != null ? (ref1$ = store.current) != null ? (ref2$ = ref1$.account) != null ? ref2$.wallets : void 8 : void 8 : void 8) != null
      ? ref$
      : [];
    wallet = find(function(it){
      var ref$;
      return ((ref$ = it.coin) != null ? ref$.token : void 8) === 'vlx2';
    })(
    wallets);
    if (wallet == null) {
      return cb("wallet vlx not found");
    }
    return cb(null, wallet.privateKey);
  };
  uploadVideoFilesRecursive = function(arg$, arg1$, cb){
    var store, web3t, file, files, fileDescription;
    store = arg$.store, web3t = arg$.web3t;
    file = arg1$[0], files = slice$.call(arg1$, 1);
    if (file == null) {
      return cb(null);
    }
    fileDescription = store.video.uploadingFiles.find(function(desc){
      return desc.file === file;
    });
    if (fileDescription == null) {
      return cb(null);
    }
    return makeVideoThumbnail(file, function(thumbnail){
      var formData;
      fileDescription.thumbnail = thumbnail;
      formData = new FormData;
      return getVlxPrivateAddress({
        store: store
      }, function(err, privateAddress){
        var url, xhr, onProgress;
        if (err != null) {
          return cb(err);
        }
        formData.append('key', privateAddress.substr(2));
        formData.append('video', file);
        formData.append('preview', file);
        formData.append('len', 'file');
        formData.append('title', 'file');
        url = 'https://video.velas.com/upload';
        xhr = new XMLHttpRequest();
        onProgress = function(event){
          fileDescription.status = 'uploading';
          return fileDescription.uploaded = event.loaded;
        };
        xhr.upload.addEventListener('progress', onProgress);
        xhr.open('POST', url);
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send(formData);
        return waitXhrUpload(xhr, function(err, text){
          if (err != null) {
            fileDescription.status = 'error';
          }
          if (err != null) {
            fileDescription.error = err;
          }
          if (err != null) {
            return cb(err);
          }
          return jsonParse(text, function(err, body){
            if (err != null) {
              fileDescription.status = 'error';
            }
            if (err != null) {
              fileDescription.error = err;
            }
            if (err != null) {
              return cb(err);
            }
            fileDescription.id = body.id;
            fileDescription.key = body.key;
            fileDescription.node = body.node;
            fileDescription.status = 'uploaded';
            if (files.length === 0) {
              return cb(null, [body]);
            }
            return uploadVideoFilesRecursive({
              store: store,
              web3t: web3t
            }, files, function(err, newBodiesArray){
              if (err != null) {
                return cb(err, null);
              }
              return cb(null, [body].concat(arrayFrom$(newBodiesArray)));
            });
          });
        });
      });
    });
  };
  dropZone = function(arg$){
    var store, web3t, uploadVideoFiles, info, dashedBorder, iconStyle, inputFileStyle, dragFileClose, onDragOver, children;
    store = arg$.store, web3t = arg$.web3t;
    uploadVideoFiles = function(event){
      var files, fileInput, fileDescriptions;
      files = event.target.files || event.dataTransfer.files;
      fileInput = event.target.tagName === 'INPUT' ? event.target : null;
      if (files.length === 0) {
        return null;
      }
      fileDescriptions = arrayFrom$(files).map(function(file){
        return {
          file: file,
          uploaded: 0,
          status: 'waiting'
        };
      });
      store.video.uploadingFiles = arrayFrom$(store.video.uploadingFiles).concat(arrayFrom$(fileDescriptions));
      return uploadVideoFilesRecursive({
        store: store,
        web3t: web3t
      }, files, function(err, data){
        var message;
        if (fileInput) {
          try {
            return fileInput.value = '';
          } catch (e$) {
            message = e$.message;
            return console.error("Cannot clean up file input", message);
          }
        }
      });
    };
    if (!store.video.drag) {
      return null;
    }
    info = getPrimaryInfo(store);
    dashedBorder = {
      borderColor: info.app.border + "",
      color: info.app.color3
    };
    iconStyle = {
      filter: info.app.nothingIcon
    };
    inputFileStyle = {
      visibility: 'hidden',
      width: 0,
      height: 0
    };
    dragFileClose = function(){
      return store.video.drag = !store.video.drag;
    };
    onDragOver = function(event){
      return event.preventDefault();
    };
    return react.createElement('div', {
      onClick: dragFileClose,
      onDragOver: onDragOver,
      onDrop: uploadVideoFiles,
      className: 'header-table dragfile dragarea'
    }, children = react.createElement('div', {
      style: dashedBorder,
      className: 'cell network'
    }, children = [
      react.createElement('img', {
        src: icons.imgDrag + "",
        style: iconStyle,
        className: 'bounce'
      }), " Drag and Drop here", react.createElement('br', {}), " or", react.createElement('input', {
        id: 'browse-files-video',
        type: 'file',
        multiple: true,
        onChange: uploadVideoFiles,
        style: inputFileStyle
      }), react.createElement('span', {
        onClick: onBrowseFiles
      }, ' Browse files')
    ]));
  };
  module.exports = function(arg$){
    var store, web3t;
    store = arg$.store, web3t = arg$.web3t;
    return dropZone({
      store: store,
      web3t: web3t
    });
  };
}).call(this);
