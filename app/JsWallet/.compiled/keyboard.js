// Generated by LiveScript 1.6.0
(function(){
  var react, map, getPrimaryInfo, genCharArray, az, di, sp, buildKey, numpad, all, toString$ = {}.toString;
  react = require('react');
  map = require('prelude-ls').map;
  getPrimaryInfo = require('../get-primary-info.ls');
  genCharArray = function(charA, charZ){
    var a, i, j;
    a = [];
    i = charA.charCodeAt(0);
    j = charZ.charCodeAt(0);
    while (i <= j) {
      a.push(String.fromCharCode(i));
      ++i;
    }
    return a;
  };
  az = genCharArray('a', 'z');
  di = genCharArray('0', '9');
  sp = [".", "←"];
  buildKey = function(store, value, onChange){
    return function(key){
      var style, change, buttonStyle;
      style = getPrimaryInfo(store);
      change = function(e){
        var value2, target;
        value2 = (function(){
          switch (false) {
          case !(key === '←' && toString$.call(value).slice(8, -1) === 'String' && value.length > 0):
            return value.substr(0, value.length - 1);
          case key !== '←':
            return value + "";
          case value == null:
            return value + "" + key;
          default:
            return key;
          }
        }());
        target = {
          value: value2
        };
        return onChange({
          target: target
        });
      };
      buttonStyle = {
        background: style.app.background,
        backgroundColor: style.app.bgspare,
        color: style.app.text
      };
      return react.createElement('div', {
        onClick: change,
        style: buttonStyle,
        className: 'key'
      }, ' ' + key);
    };
  };
  numpad = function(store, value, onChange){
    var children;
    return react.createElement('div', {
      className: 'keyboard keyboard-1406577857'
    }, children = map(buildKey(store, value, onChange))(
    di.concat(sp)));
  };
  all = function(store, value, onChange){
    var children;
    return react.createElement('div', {
      className: 'keyboard keyboard-1406577857'
    }, children = map(buildKey(store, value, onChange))(
    az.concat(di, sp)));
  };
  module.exports = function(arg$){
    var store, type, onChange, value;
    store = arg$.store, type = arg$.type, onChange = arg$.onChange, value = arg$.value;
    if (store.current.device === 'mobile') {
      return null;
    }
    if (type === 'number') {
      return numpad(store, value, onChange);
    }
    return all(store, value, onChange);
  };
}).call(this);
