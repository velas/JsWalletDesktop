// Generated by LiveScript 1.6.0
(function(){
  var react, getLang, round5, icons, getPrimaryInfo, ref$, div, times, plus, minus, map, split, filter, find, foldl, drop, take, roundHuman, button, getCheckedAmount, calcRewardEpoch, calcNextReward, calcReward, buildClaimReward, slice$ = [].slice;
  react = require('react');
  getLang = require('../get-lang.ls');
  round5 = require('../round5.ls');
  icons = require('../icons.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  ref$ = require('../math.ls'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, filter = ref$.filter, find = ref$.find, foldl = ref$.foldl, drop = ref$.drop, take = ref$.take;
  roundHuman = require('../round-human.ls');
  button = require('../components/button.ls');
  getCheckedAmount = function(store){
    return foldl(plus, 0)(
    map(function(it){
      return it.reward;
    })(
    filter(function(it){
      return it.checked;
    })(
    store.staking.rewards)));
  };
  calcRewardEpoch = function(store, web3t, check, arg$, cb){
    var item, items, miningAddress, stakingAddress, poolAddress;
    item = arg$[0], items = slice$.call(arg$, 1);
    miningAddress = store.staking.keystore.mining.address;
    if (item == null) {
      return cb(null);
    }
    stakingAddress = store.staking.keystore.staking.address;
    poolAddress = store.staking.chosenPool.address;
    return web3t.velas.Staking.getRewardAmount([item.epoch], poolAddress, stakingAddress, function(err, rewardLong){
      var nextCheck;
      if (err != null) {
        return cb(err);
      }
      nextCheck = check - 1;
      if (nextCheck < 0) {
        return cb(null);
      }
      return calcRewardEpoch(store, web3t, nextCheck, items, function(err, rest){
        if (err != null) {
          return cb(err);
        }
        item.reward = div(rewardLong, Math.pow(10, 18));
        item.checked = +store.staking.epoch !== +item.epoch && check > 0;
        return cb(null);
      });
    });
  };
  calcNextReward = function(store, web3t, cb){
    var unloaded;
    unloaded = filter(function(it){
      return it.reward === '..';
    })(
    store.staking.rewards);
    return calcRewardEpoch(store, web3t, 15, unloaded, function(err){
      var reward;
      if (err != null) {
        return cb(err);
      }
      reward = foldl(plus, 0)(
      map(function(it){
        return it.reward;
      })(
      filter(function(it){
        return it.reward !== '..';
      })(
      store.staking.rewards)));
      store.staking.reward = round5(reward);
      store.staking.rewardClaim = round5(getCheckedAmount(store));
      return cb(null);
    });
  };
  calcReward = function(store, web3t){
    var cb, miningAddress, stakingAddress;
    cb = function(err, data){
      return store.staking.rewardLoading = false;
    };
    store.staking.rewardLoading = true;
    miningAddress = store.staking.keystore.mining.address;
    stakingAddress = store.staking.keystore.staking.address;
    return web3t.velas.BlockReward.epochsToClaimRewardFrom(store.staking.chosenPool.address, stakingAddress, function(err, epochs){
      if (err != null) {
        return cb(err);
      }
      epochs = epochs.sort(function(a, b){
        return a.comparedTo(b);
      });
      store.staking.rewards = map(function(it){
        return {
          epoch: it,
          reward: '..',
          checked: false
        };
      })(
      epochs);
      return calcNextReward(store, web3t, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    });
  };
  buildClaimReward = function(store, web3t){
    return function(item){
      var style, lang, boxBackground, checked, loadOrSkip, check, children;
      style = getPrimaryInfo(store);
      lang = getLang(store);
      boxBackground = {
        background: style.app.bgPrimaryLight
      };
      checked = item.checked;
      loadOrSkip = function(item, cb){
        if (item.reward !== '..') {
          return cb(null);
        }
        return calcRewardEpoch(store, web3t, 1, [item], function(err){
          if (err != null) {
            return cb(err);
          }
          item.checked = false;
          return cb(null);
        });
      };
      check = function(){
        return loadOrSkip(item, function(err){
          item.checked = !item.checked;
          return store.staking.rewardClaim = round5(getCheckedAmount(store));
        });
      };
      return react.createElement('div', {
        className: 'col col-4'
      }, children = react.createElement('div', {
        style: boxBackground
      }, children = [
        react.createElement('div', {
          className: 'value'
        }, children = [
          react.createElement('input', {
            type: 'checkbox',
            checked: checked,
            onChange: check
          }), react.createElement('div', {
            className: 'number'
          }, children = react.createElement('span', {}, ' ' + item.epoch)), react.createElement('div', {
            className: 'number label'
          }, children = react.createElement('span', {}, ' ' + lang.epoch))
        ]), react.createElement('div', {
          title: item.reward + "",
          className: 'header'
        }, ' ' + roundHuman(item.reward)), react.createElement('div', {
          className: 'header label'
        }, ' ' + lang.award)
      ]));
    };
  };
  module.exports = function(store, web3t){
    var checkUncheck, style, lang, calcRewardClick, claim, bg, children;
    if (store.staking.chosenPool == null || +store.staking.stakeAmountTotal === 0) {
      return null;
    }
    checkUncheck = function(){
      var change;
      change = !store.staking.rewards[0].checked;
      return map(function(it){
        return it.checked = change;
      })(
      store.staking.rewards);
    };
    style = getPrimaryInfo(store);
    lang = getLang(store);
    calcRewardClick = function(){
      return calcReward(store, web3t);
    };
    claim = function(){
      var epochs, max, rest, data, to, amount;
      epochs = map(function(it){
        return it.epoch;
      })(
      filter(function(it){
        return it.checked;
      })(
      store.staking.rewards));
      max = 25;
      rest = epochs.length - max;
      if (rest > 0) {
        return alert(lang.epochLength.replace("^", max).replace('^', rest));
      }
      data = web3t.velas.Staking.claimReward.getData(epochs, store.staking.chosenPool.address);
      to = web3t.velas.Staking.address;
      amount = 0;
      return web3t.vlx2.sendTransaction({
        to: to,
        data: data,
        amount: amount,
        gas: 9600000,
        gasPrice: 1000000
      }, function(err){});
    };
    bg = {
      backgroundImage: store.staking.rewardLoading === true ? 'none' : ' '
    };
    return react.createElement('div', {
      style: bg,
      className: 'section-reward reward section-reward133174922'
    }, children = [
      react.createElement('div', {
        className: 'title'
      }, children = react.createElement('h3', {}, ' ' + lang.uRewards)), react.createElement('div', {
        className: 'description'
      }, children = store.staking.reward != null
        ? react.createElement('div', {}, children = [
          react.createElement('div', {
            className: 'note'
          }, ' ' + lang.rewardAlert), react.createElement('div', {
            className: 'balance'
          }, children = [
            react.createElement('span', {}, ' ' + lang.availableReward + ':'), react.createElement('span', {
              className: 'color'
            }, ' ' + store.staking.reward), react.createElement('img', {
              src: icons.vlxIcon + "",
              className: 'label-coin'
            }), react.createElement('span', {
              className: 'color'
            }, '  VLX')
          ]), react.createElement('div', {
            className: 'staking-reward'
          }, children = map(buildClaimReward(store, web3t))(
          store.staking.rewards)), react.createElement('div', {
            className: 'balance'
          }, children = [
            react.createElement('span', {}, ' ' + lang.claimReward + ':'), react.createElement('span', {
              className: 'color'
            }, ' ' + store.staking.rewardClaim), react.createElement('img', {
              src: icons.vlxIcon + "",
              className: 'label-coin'
            }), react.createElement('span', {
              className: 'color'
            }, '  VLX')
          ]), button({
            store: store,
            onClick: claim,
            icon: 'reward',
            text: 'claimReward',
            type: 'secondary'
          })
        ])
        : store.staking.rewardLoading === true
          ? react.createElement('div', {
            className: 'placeholder'
          }, ' Loading... Please wait')
          : button({
            store: store,
            onClick: calcRewardClick,
            icon: 'calculate',
            text: 'calculateReward',
            type: 'secondary'
          }))
    ]);
  };
  module.exports.calcReward = calcReward;
}).call(this);
