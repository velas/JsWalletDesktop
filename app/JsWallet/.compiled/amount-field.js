// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, round5, round, roundNumber, find, times, keyboard, parseNum, CurrencyInput, icons, bignumber, DECIMAL_SEPARATOR;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  round5 = require('../round5.ls');
  round = require('../round.ls');
  roundNumber = require('../round-number.ls');
  find = require('prelude-ls').find;
  times = require('../math.ls').times;
  keyboard = require('./keyboard.ls');
  parseNum = require('../numbers.js').parseNum;
  CurrencyInput = require('./react-currency-input-field')['default'];
  icons = require('../icons.ls');
  bignumber = require('bignumber.js');
  DECIMAL_SEPARATOR = '.';
  module.exports = function(arg$){
    var store, value, onChange, placeholder, id, showDetails, token, ref$, disabled, style, usd, eur, ref, inputStyle, current, wallets, wallet, decimalsLimit, decimals, actualPlaceholder, getNumber, onChangeInternal, isCustom, ref1$, tokenLabel, valueWithoutDecimalWithDot, walletIcon, children;
    store = arg$.store, value = arg$.value, onChange = arg$.onChange, placeholder = arg$.placeholder, id = arg$.id, showDetails = arg$.showDetails, token = (ref$ = arg$.token) != null ? ref$ : "vlx2", disabled = (ref$ = arg$.disabled) != null ? ref$ : false;
    style = getPrimaryInfo(store);
    usd = null;
    eur = null;
    ref = null;
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      overflowX: 'auto'
    };
    current = {
      ref: null
    };
    wallets = store.current.account.wallets;
    wallet = find(function(it){
      return it.coin.token === token;
    })(
    wallets);
    if (wallet != null) {
      usd = (function(){
        switch (false) {
        case wallet.usdRate == null:
          return times(value || "0", wallet.usdRate);
        default:
          return "..";
        }
      }());
      eur = (function(){
        switch (false) {
        case wallet.eurRate == null:
          return times(value || "0", wallet.eurRate);
        default:
          return "..";
        }
      }());
    }
    if (value === "" || value == null) {
      value = 0;
    }
    decimalsLimit = Math.min(wallet != null ? (ref$ = wallet.network) != null ? ref$.decimals : void 8 : void 8, 8);
    decimals = value.toString().split(DECIMAL_SEPARATOR)[1];
    if (decimals != null && decimals.length > decimalsLimit) {
      value = roundNumber(value, {
        decimals: decimalsLimit
      });
    }
    actualPlaceholder = placeholder != null ? placeholder : "";
    getNumber = function(val){
      var number;
      number = (val != null ? val : "").toString();
      if (number === "") {
        return '0';
      }
      return val;
    };
    onChangeInternal = function(it){
      var value, result, groups, decimals, balance, res, parsedLeft, hasDot, str_val, $value, left;
      value = it;
      value = getNumber(value);
      result = value.toString().split(DECIMAL_SEPARATOR);
      groups = result[0];
      decimals = result[1];
      if (+groups > Math.pow(10, 15)) {
        return;
      }
      if (decimals != null && decimals.length > decimalsLimit) {
        value = roundNumber(value, {
          decimals: decimalsLimit
        });
      }
      balance = +wallet.balance;
      res = (value != null ? value : "0").toString().split(DECIMAL_SEPARATOR);
      parsedLeft = parseNum(res != null ? res[0] : void 8);
      hasDot = res.length > 1;
      if (value == null || value === "") {
        value = "0";
      }
      str_val = (value != null ? value : "0").toString();
      $value = (function(){
        var ref$;
        switch (false) {
        case it !== "":
          return 0;
        case !valueWithoutDecimalWithDot(value):
          left = res[0];
          return parseNum(left) + DECIMAL_SEPARATOR;
        case !(hasDot && parsedLeft === parseNum(it)):
          return parsedLeft + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        case !(hasDot && str_val.length !== (+str_val).toString().length && +value === +str_val):
          return parseNum(res[0]) + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        default:
          return parseNum(value);
        }
      }());
      value = $value;
      return onChange({
        target: {
          value: value
        }
      });
    };
    if (token === 'vlx2') {
      token = 'vlx';
    }
    isCustom = (wallet != null ? (ref1$ = wallet.coin) != null ? ref1$.custom : void 8 : void 8) === true;
    tokenLabel = (function(){
      var ref$;
      switch (false) {
      case isCustom !== true:
        return wallet.coin.name;
      default:
        return ((ref$ = wallet.coin.nickname) != null ? ref$ : token).toUpperCase();
      }
    }());
    valueWithoutDecimalWithDot = function(value){
      var res;
      value = (value != null ? value : "0").toString();
      res = value.split(DECIMAL_SEPARATOR);
      return value.indexOf(DECIMAL_SEPARATOR) > -1 && (res.length > 1 && res[1] === "");
    };
    walletIcon = (function(){
      var ref$;
      switch (false) {
      case !(((ref$ = wallet.coin) != null ? ref$.custom : void 8) === true && icons.customWalletIcon != null):
        return icons.customWalletIcon;
      default:
        return wallet.coin.image;
      }
    }());
    return react.createElement('div', {
      className: 'input-area input-area-2107940614'
    }, children = [
      react.createElement(CurrencyInput, {
        id: "value-input",
        style: inputStyle,
        key: "amount",
        allowDecimals: true,
        allowNegativeValue: false,
        value: value + "",
        decimalsLimit: decimalsLimit,
        label: "Send",
        decimalSeparator: DECIMAL_SEPARATOR,
        groupSeparator: ",",
        onValueChange: onChangeInternal,
        className: "textfield"
      }), react.createElement('span', {
        style: inputStyle,
        className: 'suffix'
      }, children = [
        react.createElement('img', {
          src: walletIcon + "",
          className: 'icon'
        }), react.createElement('span', {}, ' ' + tokenLabel)
      ]), showDetails != null && showDetails ? react.createElement('div', {
        className: 'show-details'
      }, children = react.createElement('div', {
        className: 'panel'
      }, children = react.createElement('div', {}, ' USD: ' + round(usd)))) : void 8
    ]);
  };
}).call(this);
