// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, getLang, icon, icons, sendFuncs, parseNum, ref$, times, minus, div, plus, find, roundHuman, CurrencyInput, DECIMAL_SEPARATOR, trxFee;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('../pages/icon.ls');
  icons = require('../icons.ls');
  sendFuncs = require('../send-funcs.ls');
  parseNum = require('../numbers.js').parseNum;
  ref$ = require('../math.ls'), times = ref$.times, minus = ref$.minus, div = ref$.div, plus = ref$.plus;
  find = require('prelude-ls').find;
  roundHuman = require('../round-human.ls');
  CurrencyInput = require('./react-currency-input-field')['default'];
  DECIMAL_SEPARATOR = '.';
  trxFee = function(arg$){
    var store, web3t, wallet, feeToken, style, lang, send, activeCheap, activeCustom, activeAuto, activeClass, decimalsLimit, ref$, chooseCustomGasPrice, chooseAutoGasPrice, hasSendError, disabledClass, selectCustomGasPrice, getNumber, valueWithoutDecimalWithDot, onChangeInternal, borderStyle, text, iconStyle, inputStyle, gasPriceCustomAmount_GWEI, gasPriceCustomAmount, autoGasPrice, customOption, autoFeeDisplayFieldClass, autoOption, feePayer, txFeeInWallet, gasPriceTooltip, gasPriceIslower, lowGasWarn, warnLabel, children;
    store = arg$.store, web3t = arg$.web3t, wallet = arg$.wallet, feeToken = arg$.feeToken;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    send = store.current.send;
    activeCheap = send.gasPriceType === 'cheap';
    activeCustom = send.gasPriceType === 'custom';
    activeAuto = send.gasPriceType === 'auto';
    activeClass = function(gasPriceType){
      if (gasPriceType !== send.gasPriceType) {
        return null;
      }
      return 'active';
    };
    decimalsLimit = 9;
    ref$ = sendFuncs(store, web3t), chooseCustomGasPrice = ref$.chooseCustomGasPrice, chooseAutoGasPrice = ref$.chooseAutoGasPrice, hasSendError = ref$.hasSendError;
    disabledClass = hasSendError() ? "disabled" : "";
    selectCustomGasPrice = function(){
      if (hasSendError()) {
        return;
      }
      return chooseCustomGasPrice(send.gasPriceCustomAmount);
    };
    getNumber = function(val){
      var number;
      number = (val != null ? val : "").toString();
      if (number === "") {
        return '0';
      }
      return val;
    };
    valueWithoutDecimalWithDot = function(value){
      var res;
      value = (value != null ? value : "").toString();
      res = value.split(DECIMAL_SEPARATOR);
      return value.indexOf(DECIMAL_SEPARATOR) > -1 && (res.length > 1 && res[1] === "");
    };
    onChangeInternal = function(it){
      var value, result, groups, decimals, decimalsLimit, res, parsedLeft, hasDot, str_val, $value, left;
      console.log("[on-change-internal]");
      value = it;
      value = getNumber(value);
      result = value.toString().split(DECIMAL_SEPARATOR);
      groups = result[0];
      decimals = result[1];
      if (+groups > Math.pow(10, 15)) {
        return;
      }
      if (decimals != null && decimals.length > decimalsLimit) {
        value = roundNumber(value, {
          decimals: decimalsLimit
        });
      } else {
        decimalsLimit = 0;
      }
      res = (value != null ? value : "0").toString().split(DECIMAL_SEPARATOR);
      parsedLeft = parseNum(res != null ? res[0] : void 8);
      hasDot = res.length > 1;
      if (value == null || value === "") {
        value = "0";
      }
      str_val = (value != null ? value : "0").toString();
      $value = (function(){
        var ref$;
        switch (false) {
        case it !== "":
          return 0;
        case !valueWithoutDecimalWithDot(value):
          left = res[0];
          return parseNum(left) + DECIMAL_SEPARATOR;
        case !(hasDot && parsedLeft === parseNum(it)):
          return parsedLeft + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        case !(hasDot && str_val.length !== (+str_val).toString().length && +value === +str_val):
          return parseNum(res[0]) + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        default:
          return parseNum(value);
        }
      }());
      value = $value;
      if (send.gasPriceType === 'custom') {
        send.gasPriceCustomAmount = value;
        chooseCustomGasPrice(value);
      } else {
        send.gasPriceAuto = value;
      }
      return send.amountBuffer.gasPrice = send.gasPriceCustomAmount;
    };
    borderStyle = {
      border: "1px solid " + style.app.border
    };
    text = {
      color: style.app.icon + ""
    };
    iconStyle = {
      color: "rgb(38 98 145)"
    };
    inputStyle = {
      background: style.app.input,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    gasPriceCustomAmount_GWEI = send.gasPriceCustomAmount;
    gasPriceCustomAmount = roundHuman(gasPriceCustomAmount_GWEI);
    autoGasPrice = roundHuman(div((ref$ = send.gasPriceAuto) != null ? ref$ : 0, Math.pow(10, 9)));
    customOption = function(){
      var children;
      return react.createElement('td', {
        onClick: selectCustomGasPrice,
        className: activeClass('custom') + ""
      }, children = [
        react.createElement('div', {
          className: 'field type'
        }, ' ' + lang.custom), react.createElement('div', {
          className: 'field coin'
        }, ' ' + gasPriceCustomAmount + " GWEI")
      ]);
    };
    autoFeeDisplayFieldClass = (function(){
      switch (false) {
      case !(store.current.send.feeCalculating === true && send.gasPriceType === 'auto'):
        return "placeholder";
      default:
        return "";
      }
    }());
    autoOption = function(){
      var children;
      return react.createElement('td', {
        onClick: chooseAutoGasPrice,
        className: activeClass('auto') + ""
      }, children = [
        react.createElement('div', {
          className: 'field type'
        }, ' ' + lang.auto), react.createElement('div', {
          className: autoFeeDisplayFieldClass + " field coin"
        }, ' ' + autoGasPrice + " GWEI")
      ]);
    };
    feePayer = (function(){
      var ref$;
      switch (false) {
      case wallet.network.txFeeIn == null:
        txFeeInWallet = find(function(it){
          return it.coin.token === wallet.network.txFeeIn;
        })(
        store.current.account.wallets);
        return txFeeInWallet != null ? (ref$ = txFeeInWallet.coin) != null ? ref$.name : void 8 : void 8;
      default:
        return wallet.coin.name;
      }
    }());
    gasPriceTooltip = "Gas price specifies the amount of " + feePayer + " you are willing to pay for each unit of gas.";
    gasPriceIslower = send.gasPriceCustomAmount < div((ref$ = send.gasPriceAuto) != null ? ref$ : 0, Math.pow(10, 9));
    lowGasWarn = (function(){
      switch (false) {
      case !(send.gasPriceType === 'custom' && gasPriceIslower):
        return "Gas price is lower than offered. Transaction will be confirmed longer or canceled.";
      default:
        return "";
      }
    }());
    warnLabel = function(){
      var children;
      return react.createElement('div', {
        className: 'warn-label'
      }, children = send.gasPriceType === 'custom' && gasPriceIslower ? react.createElement('div', {
        className: 'warn-label-text'
      }, ' ' + lowGasWarn) : void 8);
    };
    return react.createElement('div', {
      className: disabledClass + " trx-custom-gas-price trx-custom-gas-price-2070405877"
    }, children = [
      react.createElement('div', {}, children = [
        react.createElement('label', {
          style: text
        }, ' Gas Price'), react.createElement('div', {
          className: 'question-mark'
        }, children = [
          react.createElement('div', {
            style: iconStyle,
            className: 'label'
          }, ' ?'), react.createElement('div', {
            className: 'question-mark-text'
          }, children = [
            react.createElement('div', {
              className: 'triangle'
            }), react.createElement('span', {}, ' ' + gasPriceTooltip)
          ])
        ]), warnLabel()
      ]), react.createElement('table', {
        style: borderStyle,
        className: 'fee'
      }, children = react.createElement('tbody', {}, children = react.createElement('tr', {}, children = [customOption(), autoOption()]))), store.current.send.gasPriceType === 'custom' ? react.createElement(CurrencyInput, {
        key: "tx-fee-input",
        allowNegativeValue: false,
        style: inputStyle,
        defaultValue: "0",
        allowDecimals: true,
        value: gasPriceCustomAmount_GWEI + "",
        decimalsLimit: decimalsLimit,
        label: "Send",
        decimalSeparator: DECIMAL_SEPARATOR,
        groupSeparator: ",",
        onValueChange: onChangeInternal,
        className: "textfield tx-fee"
      }) : void 8
    ]);
  };
  module.exports = trxFee;
}).call(this);
