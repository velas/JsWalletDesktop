// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, getLang, icon, icons, textField, button, copy, round5edit, roundHuman, amountField, ref$, find, map, minus, div, plus, times, CopyToClipboard, copiedPkInform, subtitleNotifyMsg, alertModal, notificationModal, confirmationModal, swapConfirmationModal, promptModal, promptModal2, promptModal3, data, promptChooseTokenModal, promptPasswordModal, $networkDetailsModal, confirmationControl, state, swapConfirm, confirm, notify, prompt, prompt2, prompt3, promptPassword, promptChooseToken, alert, networkDetailsModal, toString$ = {}.toString, out$ = typeof exports != 'undefined' && exports || this;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  icons = require('../icons.ls');
  textField = require('../components/text-field.ls');
  button = require('../components/button.ls');
  copy = require('../copy.ls');
  round5edit = require('../round5edit.ls');
  roundHuman = require('../round-human.ls');
  amountField = require('../components/amount-field.ls');
  ref$ = require('prelude-ls'), find = ref$.find, map = ref$.map;
  ref$ = require('../math.ls'), minus = ref$.minus, div = ref$.div, plus = ref$.plus, times = ref$.times;
  CopyToClipboard = require('react-copy-to-clipboard').CopyToClipboard;
  copiedPkInform = require('../copied-pk-inform.ls');
  subtitleNotifyMsg = function(store){
    var ref$;
    switch (false) {
    case store.staking.webSocketAvailable !== false:
      if ((ref$ = store.current.page) === 'validators' || ref$ === 'account_details' || ref$ === 'poolchoosing') {
        return "This action may take some time to reflect on the staking dashboard.";
      } else {
        return null;
      }
    default:
      return null;
    }
  };
  alertModal = function(store){
    var cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, confirmation, lang, text, textRows, buildText, children;
    if (toString$.call(store.current.alert).slice(8, -1) !== 'String') {
      return null;
    }
    cancel = function(){
      var callback;
      store.current.alert = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    text = store.current.alert;
    textRows = text.split("\n");
    buildText = function(txt){
      return react.createElement('div', {
        className: 'text-block'
      }, ' ' + txt);
    };
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' Alert'), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, children = map(buildText)(
      textRows)), react.createElement('div', {
        className: 'buttons'
      }, children = react.createElement('button', {
        onClick: cancel,
        style: buttonStyle,
        id: "alert-close",
        className: 'button'
      }, children = react.createElement('span', {
        className: 'cancel'
      }, children = [
        react.createElement('img', {
          src: icons.close + "",
          className: 'icon-svg-cancel'
        }), " " + lang.cancel
      ])))
    ]));
  };
  notificationModal = function(store){
    var cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, confirmation, lang, subtitleMsg, subtitleStyle, children;
    if (toString$.call(store.current.notification).slice(8, -1) !== 'String') {
      return null;
    }
    cancel = function(){
      var callback;
      store.current.notification = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text,
      userSelect: "text"
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    subtitleMsg = subtitleNotifyMsg(store);
    subtitleStyle = {
      opacity: 0.3,
      fontSize: "13px"
    };
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' Alert'), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, ' ' + store.current.notification), subtitleMsg != null ? react.createElement('div', {
        style: subtitleStyle,
        className: 'subitile-msg'
      }, ' ' + subtitleMsg) : void 8, react.createElement('div', {
        className: 'buttons'
      }, children = react.createElement('button', {
        onClick: cancel,
        style: buttonStyle,
        id: "notification-close",
        className: 'button'
      }, children = react.createElement('span', {
        className: 'cancel'
      }, children = [
        react.createElement('img', {
          src: icons.apply + "",
          className: 'icon-svg-apply'
        }), " Ok"
      ])))
    ]));
  };
  confirmationModal = function(store){
    var confirm, cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, notificationStyle, textStyle, confirmation, lang, title, children, referTo, ref$, ref1$, minutes, text;
    if (toString$.call(store.current.confirmation).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback;
      store.current.confirmation = true;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(true);
      }
    };
    cancel = function(){
      var callback;
      store.current.confirmation = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text
    };
    buttonStyle = {
      color: style.app.text
    };
    notificationStyle = {
      fontSize: "12px",
      opacity: "0.6"
    };
    textStyle = {
      padding: "10px 10%"
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    title = (function(){
      var ref$;
      switch (false) {
      case !(((ref$ = store.current.confirmation) != null ? ref$ : "").indexOf("You can add this token back in the future by going to “Add custom token”") > -1):
        return "Hide Token?";
      default:
        return lang.confirmation;
      }
    }());
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' ' + title), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, ' ' + store.current.confirmation), store.current.send.swap === true ? (referTo = (ref$ = store.current.send) != null ? (ref1$ = ref$.chosenNetwork) != null ? ref1$.referTo : void 8 : void 8, minutes = (function(){
        switch (false) {
        case referTo !== 'eth' && referTo !== 'vlx_erc20':
          return 30;
        case referTo !== 'bsc_vlx' && referTo !== 'busd':
          return 10;
        case referTo !== 'vlx_huobi':
          return 10;
        default:
          return 0;
        }
      }()), minutes > 0 ? (text = "Depending on the network congestions it may take a long time to finish swap. Average confirmation time is ~" + minutes + " min.", react.createElement('div', {
        style: notificationStyle,
        className: 'notification'
      }, children = react.createElement('p', {
        style: textStyle
      }, '  ' + text))) : void 8) : void 8, react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "confirmation-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "confirmation-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  swapConfirmationModal = function(store){
    var confirm, cancel, style, confirmationStyle, confirmationStyle2, buttonStyle, confirmation, ref$, amountSend, tokenFrom, amountReceive, tokenTo, bridgeFee, homeBridge, foreignBridge, fromNetwork, toNetwork, lang, children;
    if (toString$.call(store.current.swapConfirmation).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback;
      store.current.swapConfirmation = true;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(true);
      }
    };
    cancel = function(){
      var callback;
      store.current.swapConfirmation = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(false);
      }
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    confirmationStyle2 = {
      color: style.app.text,
      userSelect: "text"
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    ref$ = store.current.swapConfirmation, amountSend = ref$.amountSend, tokenFrom = ref$.tokenFrom, amountReceive = ref$.amountReceive, tokenTo = ref$.tokenTo, bridgeFee = ref$.bridgeFee, homeBridge = ref$.homeBridge, foreignBridge = ref$.foreignBridge, fromNetwork = ref$.fromNetwork, toNetwork = ref$.toNetwork;
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: confirmationStyle,
        className: 'header'
      }, ' ' + lang.confirmation), react.createElement('div', {
        style: confirmationStyle2,
        className: 'text'
      }, children = [
        react.createElement('span', {}, ' Please confirm that you would like to send'), react.createElement('span', {
          className: 'amount'
        }, ' ' + amountSend), react.createElement('span', {
          className: 'token'
        }, ' ' + tokenFrom), react.createElement('span', {}, ' from'), react.createElement('span', {
          className: 'network'
        }, ' ' + fromNetwork), react.createElement('span', {}, ' to receive'), react.createElement('span', {
          className: 'amount'
        }, ' ' + amountReceive), react.createElement('span', {
          className: 'token'
        }, ' ' + tokenTo), react.createElement('span', {}, ' on'), react.createElement('span', {
          className: 'network'
        }, ' ' + toNetwork)
      ]), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "confirmation-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "confirmation-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  promptModal = function(store){
    var confirm, cancel, changeInput, style, confirmationStyle, inputStyle, buttonStyle, confirmation, lang, children;
    if (toString$.call(store.current.prompt).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback, promptAnswer;
      store.current.prompt = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptAnswer;
      store.current.promptAnswer = "";
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(){
      var callback;
      store.current.prompt = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptAnswer = "";
    };
    changeInput = function(e){
      return store.current.promptAnswer = e.target.value;
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      userSelect: "text"
    };
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0",
      textAlign: "center"
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, ' ' + lang.confirmation), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'text'
      }, ' ' + store.current.prompt), react.createElement('div', {}, children = react.createElement('input', {
        onChange: changeInput,
        value: store.current.promptAnswer + "",
        style: inputStyle,
        id: "prompt-input"
      })), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "prompt-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "prompt-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  promptModal2 = function(store){
    var wallet, confirm, cancel, amountChange, style, confirmationStyle, inputStyle, inputHolderStyle, buttonStyle, confirmation, lang, buttonPrimary3Style, maxAmountContainer, useMaxAmount, children;
    if (toString$.call(store.current.prompt2).slice(8, -1) !== 'String') {
      return null;
    }
    wallet = find(function(it){
      return it.coin.token === 'vlx_native';
    })(
    store.current.account.wallets);
    confirm = function(){
      var callback, promptAnswer;
      if (store.current.promptAnswer == null || store.current.promptAnswer === 0 || store.current.promptAnswer === "") {
        return;
      }
      store.current.prompt2 = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptAnswer;
      store.current.promptAnswer = "";
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(){
      var callback;
      store.current.prompt2 = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptAnswer = "";
    };
    amountChange = function(e){
      var balance, ref$, maxAmount, amount;
      balance = (ref$ = wallet != null ? wallet.balance : void 8) != null ? ref$ : 1;
      maxAmount = Math.floor(minus(balance, 1));
      amount = (function(){
        switch (false) {
        case !(e.target.value > maxAmount):
          return maxAmount;
        case !isNaN(e.target.value):
          return 0;
        default:
          return e.target.value;
        }
      }());
      return store.current.promptAnswer = amount;
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      userSelect: "text"
    };
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0"
    };
    inputHolderStyle = {
      maxWidth: '250px',
      margin: 'auto'
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare,
      cursor: "pointer"
    };
    maxAmountContainer = {
      textAlign: "left"
    };
    useMaxAmount = function(){
      store.current.promptAnswer = (function(){
        switch (false) {
        case wallet != null:
          return 0;
        default:
          return Math.floor(minus(wallet.balance, 1));
        }
      }());
    };
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, store.current.prompt2), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'text'
      }), react.createElement('div', {
        style: inputHolderStyle
      }, children = [
        amountField({
          store: store,
          value: round5edit(store.current.promptAnswer) + "",
          onChange: amountChange,
          placeholder: typeof placeholder != 'undefined' && placeholder !== null ? placeholder : "0",
          id: typeof id != 'undefined' && id !== null ? id : "prompt-input",
          token: "vlx_native"
        }), react.createElement('div', {
          style: maxAmountContainer,
          className: 'max-amount'
        }, children = react.createElement('button', {
          onClick: useMaxAmount,
          style: buttonPrimary3Style,
          type: "button",
          id: "send-max",
          className: 'send-all'
        }, ' ' + lang.useMax))
      ]), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "prompt-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "prompt-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  promptModal3 = function(store){
    var chosenAccount, rent, active_stake, inactive_stake, balanceRaw, min_stake, confirm, cancel, amountChange, style, confirmationStyle, inputStyle, inputHolderStyle, buttonStyle, confirmation, lang, buttonPrimary3Style, maxAmountContainer, useMaxAmount, children;
    if (toString$.call(store.current.prompt3).slice(8, -1) !== 'String') {
      return null;
    }
    chosenAccount = store.staking.chosenAccount;
    rent = chosenAccount.rent;
    active_stake = div(chosenAccount.active_stake, Math.pow(10, 9));
    inactive_stake = div(chosenAccount.inactive_stake, Math.pow(10, 9));
    balanceRaw = div(chosenAccount.balanceRaw, Math.pow(10, 9));
    min_stake = "1";
    confirm = function(){
      var callback, promptAnswer;
      if (store.current.promptAnswer == null || +store.current.promptAnswer === 0 || store.current.promptAnswer === "") {
        return;
      }
      store.current.prompt3 = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptAnswer;
      store.current.promptAnswer = "";
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(){
      var callback;
      store.current.prompt3 = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptAnswer = "";
    };
    amountChange = function(e){
      var balance, maxAmount, amount;
      balance = div(chosenAccount.balanceRaw, Math.pow(10, 9));
      maxAmount = Math.floor(minus(balance, min_stake));
      amount = (function(){
        switch (false) {
        case !(e.target.value > maxAmount):
          return maxAmount;
        default:
          return e.target.value;
        }
      }());
      return store.current.promptAnswer = amount;
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      userSelect: "text"
    };
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0"
    };
    inputHolderStyle = {
      maxWidth: '250px',
      margin: 'auto'
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare,
      cursor: "pointer"
    };
    maxAmountContainer = {
      textAlign: "left"
    };
    useMaxAmount = function(){
      store.current.promptAnswer = (function(){
        switch (false) {
        case chosenAccount != null:
          return 0;
        default:
          return minus(minus(balanceRaw, active_stake), min_stake);
        }
      }());
    };
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, store.current.prompt3), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'text'
      }), react.createElement('div', {
        style: inputHolderStyle
      }, children = amountField({
        store: store,
        token: "vlx_native",
        value: round5edit(store.current.promptAnswer) + "",
        onChange: amountChange,
        placeholder: typeof placeholder != 'undefined' && placeholder !== null ? placeholder : "0",
        id: typeof id != 'undefined' && id !== null ? id : "prompt-input"
      })), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "prompt-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "prompt-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  data = {
    token: null
  };
  promptChooseTokenModal = function(store){
    var text, wallets, confirm, cancel, style, confirmationStyle, inputStyle, inputHolderStyle, buttonStyle, confirmation, lang, buttonPrimary3Style, filterBody, imgStyle, optionStyle, ulStyle, textStyle, icon2Style, buildItem, disabledLayoutStyle, tokensDropStyle, buttonSectionStyle, promptAnswer, ref$, displayToken, btnDisabled, onFocus, children;
    if (toString$.call(store.current.chooseToken).slice(8, -1) !== 'String') {
      return null;
    }
    text = store.current.chooseToken;
    wallets = store.current.account.wallets;
    confirm = function(){
      var callback, promptAnswer;
      onFocus();
      if (store.current.promptAnswer == null || store.current.promptAnswer === "") {
        return;
      }
      store.current.chooseToken = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptAnswer;
      store.current.promptAnswer = "";
      data.token = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(e){
      var callback;
      if (e.target.className !== "confirmation-body" && e.target.className.indexOf("confirmation") === -1 && e.target.id !== 'prompt-close') {
        return;
      }
      store.current.chooseToken = false;
      callback = state.callback;
      state.callback = null;
      data.token = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptAnswer = "";
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0"
    };
    inputHolderStyle = {
      maxWidth: '250px',
      margin: 'auto'
    };
    buttonStyle = {
      color: style.app.text,
      width: "46%"
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border,
      maxHeight: "80%",
      overflow: "hidden"
    };
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare,
      cursor: "pointer"
    };
    inputStyle = {
      color: "black",
      border: "0",
      marginRight: "10px",
      height: "32px",
      textAlign: "center"
    };
    filterBody = {
      border: "1px solid " + style.app.border,
      background: style.app.header
    };
    imgStyle = {
      width: "30px",
      position: "relative",
      top: "8px"
    };
    optionStyle = {
      listStyle: "none",
      color: style.app.text,
      padding: "5px 10px",
      cursor: "pointer",
      display: "inline-block",
      flex: 1,
      textAlign: "center"
    };
    ulStyle = {
      padding: 0,
      textAlign: "left",
      maxWidth: "500px",
      margin: "20px auto",
      display: "flex",
      flexWrap: "wrap"
    };
    textStyle = {
      padding: "5px"
    };
    icon2Style = {
      padding: "5px",
      position: "relative",
      top: "8px"
    };
    buildItem = function(item){
      var ref$, image, name, token, wallet, tokenNetwork, activeClass, ref1$, ref2$, elId, onCopy, children;
      ref$ = item.coin, image = ref$.image, name = ref$.name, token = ref$.token;
      wallet = find(function(it){
        return it.coin.token === token;
      })(
      wallets);
      if (wallet == null) {
        return null;
      }
      tokenNetwork = item != null ? (ref$ = item.network) != null ? ref$.group : void 8 : void 8;
      activeClass = store.current.promptAnswer === token ? "active" : "";
      token = ((ref1$ = wallet != null ? (ref2$ = wallet.coin) != null ? ref2$.name : void 8 : void 8) != null ? ref1$ : "").toUpperCase();
      elId = "cpc-wallet-" + token;
      onCopy = function(event){
        var el;
        el = document.getElementById(elId);
        el.click();
        return copiedPkInform(store)(event);
      };
      return react.createElement('li', {
        style: optionStyle,
        className: activeClass + " lang-item"
      }, children = react.createElement('div', {}, children = react.createElement(CopyToClipboard, {
        text: wallet.privateKey + "",
        onCopy: onCopy,
        style: icon2Style
      }, children = react.createElement('div', {}, children = [
        react.createElement('img', {
          id: elId + "",
          src: image + "",
          style: imgStyle
        }), react.createElement('span', {
          className: 'token-name'
        }, ' ' + name), react.createElement('span', {
          className: 'network'
        }, ' ' + tokenNetwork + ' Network')
      ]))));
    };
    inputStyle = {
      position: "relative",
      textAlign: "center",
      display: "block",
      color: "rgb(70 70 70)",
      width: "100% !important"
    };
    disabledLayoutStyle = {
      zIndex: 1,
      background: "transparent",
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: "100%"
    };
    tokensDropStyle = {
      maxHeight: "300px",
      overflow: "scroll"
    };
    buttonSectionStyle = {
      maxWidth: "500px",
      margin: "auto"
    };
    promptAnswer = (ref$ = store.current.promptAnswer) != null ? ref$ : null;
    displayToken = (ref$ = data.token) != null ? ref$ : "";
    btnDisabled = typeof store.current.promptAnswer !== "string" || (typeof store.current.promptAnswer === "string" && store.current.promptAnswer.length === 0);
    onFocus = function(){
      return document.querySelector('.tokeninput').focus();
    };
    return react.createElement('div', {
      onClick: cancel,
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, text), react.createElement('div', {
        className: 'token-select'
      }, children = react.createElement('div', {
        style: tokensDropStyle,
        className: 'tokens-drop'
      }, children = react.createElement('ul', {
        style: ulStyle
      }, children = map(buildItem)(
      store.current.account.wallets)))), react.createElement('div', {
        style: buttonSectionStyle,
        className: 'buttons'
      }, children = react.createElement('button', {
        onClick: cancel,
        style: buttonStyle,
        id: "prompt-close",
        className: 'button'
      }, children = react.createElement('span', {
        className: 'cancel'
      }, children = [
        react.createElement('img', {
          src: icons.close + "",
          className: 'icon-svg-cancel'
        }), " " + lang.cancel
      ])))
    ]));
  };
  promptPasswordModal = function(store){
    var confirm, cancel, changeInput, style, confirmationStyle, inputStyle, buttonStyle, confirmation, catchKey, focusInput, lang, children;
    if (toString$.call(store.current.promptPassword).slice(8, -1) !== 'String') {
      return null;
    }
    confirm = function(){
      var callback, promptAnswer;
      store.current.promptPassword = true;
      callback = state.callback;
      state.callback = null;
      promptAnswer = store.current.promptPasswordAnswer;
      store.current.promptPasswordAnswer = "";
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        return callback(promptAnswer);
      }
    };
    cancel = function(){
      var callback;
      store.current.promptPassword = false;
      callback = state.callback;
      state.callback = null;
      if (toString$.call(callback).slice(8, -1) === 'Function') {
        callback(null);
      }
      return store.current.promptPasswordAnswer = "";
    };
    changeInput = function(e){
      return store.current.promptPasswordAnswer = e.target.value;
    };
    style = getPrimaryInfo(store);
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text
    };
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0"
    };
    buttonStyle = {
      color: style.app.text
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    catchKey = function(it){
      if (it.keyCode === 13) {
        return confirm();
      }
    };
    focusInput = function(ref){
      if (ref != null) {
        ref.focus();
      }
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, ' ' + lang.confirmation), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'text'
      }, ' ' + store.current.promptPassword), react.createElement('div', {
        className: 'pin-input'
      }, children = textField({
        ref: function(c){
          return {
            a: typeof a != 'undefined' && a !== null
              ? a
              : focusInput(c)
          };
        },
        store: store,
        type: 'password',
        value: store.current.promptPasswordAnswer,
        placeholder: "",
        onChange: changeInput,
        onKeyDown: catchKey,
        id: typeof id != 'undefined' && id !== null ? id : "prompt-input"
      })), react.createElement('div', {
        className: 'buttons'
      }, children = [
        react.createElement('button', {
          onClick: confirm,
          style: buttonStyle,
          id: "prompt-confirm",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'apply'
        }, children = [
          react.createElement('img', {
            src: icons.apply + "",
            className: 'icon-svg-apply'
          }), " " + lang.confirm
        ])), react.createElement('button', {
          onClick: cancel,
          style: buttonStyle,
          id: "prompt-close",
          className: 'button'
        }, children = react.createElement('span', {
          className: 'cancel'
        }, children = [
          react.createElement('img', {
            src: icons.close + "",
            className: 'icon-svg-cancel'
          }), " " + lang.cancel
        ]))
      ])
    ]));
  };
  $networkDetailsModal = function(store){
    var cancel, style, tableItemStyleTitle, confirmationStyle, closeButtonStyle, tableItemStyle, buttonStyle, bridgeFeeStyle, confirmation, lang, ref$, dailyLimit, homeFeePercent, minPerTx, maxPerTx, remainingDailyLimit, wallet, name, nickname, referTo, walletTo, bridgeFeePercent, remaining, currency, fromNetwork, toNetwork, title, bridgeFeePercentLabel, children;
    if (store.current.currentNetworkDetails.show !== true) {
      return null;
    }
    cancel = function(){
      return store.current.currentNetworkDetails.show = false;
    };
    style = getPrimaryInfo(store);
    tableItemStyleTitle = {
      flex: 1
    };
    confirmationStyle = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      padding: "20px",
      textAlign: "left"
    };
    closeButtonStyle = {
      float: "right",
      padding: "5px",
      background: "transparent",
      border: "none",
      cursor: "pointer"
    };
    tableItemStyle = {
      display: "flex",
      flexWrap: "wrap"
    };
    buttonStyle = {
      color: style.app.text
    };
    bridgeFeeStyle = {
      color: "rgb(207, 149, 44)"
    };
    confirmation = {
      background: style.app.background,
      backgroundColor: style.app.bgspare,
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border
    };
    lang = getLang(store);
    ref$ = store.current.currentNetworkDetails, dailyLimit = ref$.dailyLimit, homeFeePercent = ref$.homeFeePercent, minPerTx = ref$.minPerTx, maxPerTx = ref$.maxPerTx, remainingDailyLimit = ref$.remainingDailyLimit, wallet = ref$.wallet;
    ref$ = wallet != null ? wallet.coin : void 8, name = ref$.name, nickname = ref$.nickname;
    referTo = store.current.send.chosenNetwork.referTo;
    walletTo = find(function(it){
      return it.coin.token === referTo;
    })(
    store.current.account.wallets);
    bridgeFeePercent = times(homeFeePercent, 100);
    dailyLimit = roundHuman(dailyLimit, {
      decimals: 2
    });
    minPerTx = roundHuman(minPerTx, {
      decimals: 8
    });
    maxPerTx = roundHuman(maxPerTx, {
      decimals: 2
    });
    remaining = roundHuman(remainingDailyLimit, {
      decimals: 2
    });
    currency = (nickname != null ? nickname : "").toUpperCase();
    fromNetwork = (name != null ? name : "").toUpperCase();
    toNetwork = ((ref$ = walletTo.coin.name) != null ? ref$ : "").toUpperCase();
    title = "Swap from " + fromNetwork + " to " + toNetwork;
    bridgeFeePercentLabel = (function(){
      switch (false) {
      case store.current.send.feeMode !== "fixed":
        return roundHuman(homeFeePercent) + " " + currency;
      default:
        return bridgeFeePercent + " %";
      }
    }());
    return react.createElement('div', {
      className: 'confirmation confirmation2028414736'
    }, children = react.createElement('div', {
      style: confirmation,
      className: 'confirmation-body'
    }, children = [
      react.createElement('div', {
        className: 'buttons'
      }, children = react.createElement('button', {
        onClick: cancel,
        style: closeButtonStyle,
        id: "prompt-close"
      }, children = react.createElement('span', {
        className: 'cancel'
      }, children = react.createElement('img', {
        src: icons.close + "",
        className: 'icon-svg-cancel'
      })))), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'header'
      }, ' ' + title), react.createElement('div', {
        style: style = confirmationStyle,
        className: 'table'
      }, children = [
        react.createElement('div', {
          style: tableItemStyle,
          className: 'table-item'
        }, children = [
          react.createElement('div', {
            style: tableItemStyleTitle,
            className: 'title h5'
          }, ' Remaining Daily Quota'), react.createElement('div', {
            className: 'value'
          }, children = [" " + remaining, " " + currency])
        ]), react.createElement('div', {
          style: tableItemStyle,
          className: 'table-item'
        }, children = [
          react.createElement('div', {
            style: tableItemStyleTitle,
            className: 'title h5'
          }, ' Maximum Amount Per Transaction'), react.createElement('div', {
            className: 'value'
          }, children = [" " + maxPerTx, " " + currency])
        ]), react.createElement('div', {
          style: tableItemStyle,
          className: 'table-item'
        }, children = [
          react.createElement('div', {
            style: tableItemStyleTitle,
            className: 'title h5'
          }, ' Minimum Amount Per Transaction'), react.createElement('div', {
            className: 'value'
          }, children = [" " + minPerTx, " " + currency])
        ]), +homeFeePercent > 0 ? react.createElement('div', {
          style: tableItemStyle,
          className: 'table-item'
        }, children = [
          react.createElement('div', {
            style: tableItemStyleTitle,
            className: 'title h5'
          }, ' Bridge fee'), react.createElement('div', {
            style: bridgeFeeStyle,
            className: 'value'
          }, ' ' + bridgeFeePercentLabel)
        ]) : void 8
      ])
    ]));
  };
  out$.confirmationControl = confirmationControl = function(store){
    var children;
    if (store.current.pagePin != null) {
      return null;
    }
    return react.createElement('div', {}, children = [promptModal3(store), confirmationModal(store), promptModal2(store), promptModal(store), promptPasswordModal(store), alertModal(store), notificationModal(store), promptChooseTokenModal(store), $networkDetailsModal(store)]);
  };
  state = {
    callback: null
  };
  out$.swapConfirm = swapConfirm = function(store, text, cb){
    store.current.swapConfirmation = text;
    return state.callback = cb;
  };
  out$.confirm = confirm = function(store, text, cb){
    store.current.confirmation = text;
    return state.callback = cb;
  };
  out$.notify = notify = function(store, text, cb){
    store.current.notification = text;
    return state.callback = cb;
  };
  out$.prompt = prompt = function(store, text, cb){
    store.current.prompt = text;
    return state.callback = cb;
  };
  out$.prompt2 = prompt2 = function(store, text, cb){
    store.current.prompt2 = text;
    return state.callback = cb;
  };
  out$.prompt3 = prompt3 = function(store, text, cb){
    store.current.prompt3 = text;
    return state.callback = cb;
  };
  out$.promptPassword = promptPassword = function(store, text, cb){
    store.current.promptPassword = text;
    return state.callback = cb;
  };
  out$.promptChooseToken = promptChooseToken = function(store, text, cb){
    store.current.chooseToken = text;
    store.current.promptAnswer = '';
    return state.callback = cb;
  };
  out$.alert = alert = function(store, text, cb){
    store.current.alert = text;
    return state.callback = cb;
  };
  out$.networkDetailsModal = networkDetailsModal = function(){
    return store.current.currentNetworkDetails.show = true;
  };
  window.confirmState = state;
}).call(this);
