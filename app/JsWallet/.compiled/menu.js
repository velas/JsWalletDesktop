// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, cut, money, times, plus, map, foldl, filter, find, projectLinks, menuFuncs, yourAccount, getPrimaryInfo, getLang, icon, icons, header, navigate, roundHuman, addCoin, tor;
  react = require('react');
  ref$ = require('../tools.ls'), cut = ref$.cut, money = ref$.money;
  ref$ = require('../math.ls'), times = ref$.times, plus = ref$.plus;
  ref$ = require('prelude-ls'), map = ref$.map, foldl = ref$.foldl, filter = ref$.filter, find = ref$.find;
  projectLinks = require('./project-links.ls');
  menuFuncs = require('../menu-funcs.ls');
  yourAccount = require('./your-account.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  icons = require('../icons.ls');
  header = require('./header.ls');
  navigate = require('../navigate.ls');
  roundHuman = require('../round-human.ls');
  addCoin = require('../add-coin.ls');
  tor = require('./tor.ls');
  module.exports = function(arg$){
    var store, web3t, ref$, current, openAccount, lock, walletStyle, info, activateS1, activateS2, activateS3, switchNetwork, refresh, style, menuStyle, iconStyle, gotoWallet, buttonAdd, buttonSyncing, logoStyle, lang, syncing, placeholder, usdBalances, notLoadedBalancesExists, totalBalance, children;
    store = arg$.store, web3t = arg$.web3t;
    if (store == null) {
      return null;
    }
    ref$ = menuFuncs(store, web3t), current = ref$.current, openAccount = ref$.openAccount, lock = ref$.lock, walletStyle = ref$.walletStyle, info = ref$.info, activateS1 = ref$.activateS1, activateS2 = ref$.activateS2, activateS3 = ref$.activateS3, switchNetwork = ref$.switchNetwork, refresh = ref$.refresh, lock = ref$.lock;
    style = getPrimaryInfo(store);
    menuStyle = {
      color: style.app.text
    };
    iconStyle = {
      color: style.app.loader,
      marginTop: "10px"
    };
    gotoWallet = function(){
      return navigate(store, web3t, 'wallets');
    };
    buttonAdd = {
      color: style.app.text,
      borderRadius: "50px",
      border: "0",
      background: style.app.bgBtn,
      lineHeight: "25px",
      padding: "10px",
      width: "40px",
      height: "40px",
      margin: "10px 5px 0"
    };
    buttonSyncing = {
      color: style.app.loader,
      borderRadius: "50px",
      border: "0",
      background: style.app.bgBtn,
      lineHeight: "25px",
      padding: "10px",
      width: "40px",
      height: "40px",
      margin: "0px 5px 0"
    };
    logoStyle = {
      filter: style.app.filterLogo
    };
    lang = getLang(store);
    syncing = (function(){
      switch (false) {
      case !store.current.refreshing:
        return 'syncing';
      default:
        return "";
      }
    }());
    placeholder = (function(){
      switch (false) {
      case !find(function(it){
        return it.status === "loading";
      })(
      store.current.account.wallets):
        return "placeholder";
      default:
        return "";
      }
    }());
    usdBalances = foldl(plus, 0)(
    map(function(it){
      return it.balanceUsd;
    })(
    filter(function(it){
      return !isNaN(it.balanceUsd);
    })(
    store.current.account.wallets)));
    notLoadedBalancesExists = find(function(it){
      return it.state === 'error';
    })(
    store.current.account.wallets);
    totalBalance = (function(){
      switch (false) {
      case !notLoadedBalancesExists:
        return "...";
      default:
        return roundHuman(usdBalances);
      }
    }());
    iconStyle = {
      width: "15px",
      height: "15px",
      float: "right",
      top: "1px",
      position: "relative",
      marginLeft: 3
    };
    return react.createElement('div', {
      style: menuStyle,
      className: 'menu wallet-main menu345890219'
    }, children = react.createElement('div', {
      className: 'menu-body'
    }, children = [
      react.createElement('div', {
        className: 'branding'
      }, children = react.createElement('img', {
        src: info.branding.logoSm + "",
        onClick: gotoWallet
      })), react.createElement('div', {
        className: 'balance'
      }, children = [
        react.createElement('div', {
          className: 'currency h1'
        }, children = react.createElement('div', {
          className: 'balance-text'
        }, ' ' + lang.balance)), react.createElement('div', {
          className: placeholder + " amount"
        }, children = [
          react.createElement('div', {
            className: 'symbol'
          }, ' $'), react.createElement('div', {
            title: current.balanceUsd + "",
            id: 'balance-total',
            className: 'number'
          }, ' ' + totalBalance)
        ]), notLoadedBalancesExists ? react.createElement('div', {}, children = react.createElement('div', {
          className: 'balance-warning-container'
        }, children = [
          react.createElement('span', {
            className: 'warning-text'
          }, ' The total balance is unavailable now'), react.createElement('span', {
            className: 'total-balance-warning-icon'
          }, children = [
            react.createElement('img', {
              src: icons.warning2 + "",
              style: iconStyle,
              className: 'total-balance-warning-icon'
            }), react.createElement('div', {
              className: 'balance-warning-notification'
            }, children = [
              react.createElement('div', {
                className: 'full-warning-notification-text'
              }, ' The total balance is unavailable now because some of the tokens` balances could not be loaded.'), react.createElement('div', {
                className: 'triangle'
              })
            ])
          ])
        ])) : void 8, react.createElement('div', {}, children = [
          store.current.device === 'desktop' ? store.preference.refreshVisible === true ? react.createElement('button', {
            onClick: refresh,
            style: buttonSyncing,
            className: syncing + " button lock mt-5"
          }, children = icon('Sync', 20)) : void 8 : void 8, false ? store.current.device === 'desktop' ? react.createElement('button', {
            onClick: addCoin(store),
            style: buttonAdd,
            className: 'button lock mt-5'
          }, children = react.createElement('img', {
            src: icons.create + "",
            className: 'icon-svg-plus'
          })) : void 8 : void 8, store.current.device === 'desktop' ? tor(store, web3t) : void 8
        ])
      ]), store.current.device === 'mobile' ? yourAccount(store, web3t) : void 8, projectLinks({
        store: store,
        web3t: web3t
      })
    ]));
  };
}).call(this);
