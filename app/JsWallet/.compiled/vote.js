// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, getLang, icon, switchAccount, icons, epoch, map, minus, textField, button, burger, ref$, hdkey, bip39, md5, seedmem, getPair, toKeystore, item, content, vote, buildProposalView, buildProposalViews, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  web3 = require('../web3.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  switchAccount = require('./switch-account.ls');
  icons = require('../icons.ls');
  epoch = require('./epoch.ls');
  map = require('prelude-ls').map;
  minus = require('../math.ls').minus;
  textField = require('../components/text-field.ls');
  button = require('../components/button.ls');
  burger = require('../components/burger.ls');
  ref$ = require('../../web3t/providers/deps.js'), hdkey = ref$.hdkey, bip39 = ref$.bip39;
  md5 = require('md5');
  seedmem = require('../seed.ls');
  getPair = function(wallet, path, index, password, withKeystore){
    var w, address, salt, iv, uuid, kdf, keystore;
    w = wallet.derivePath(path).deriveChild(index).getWallet();
    address = "0x" + w.getAddress().toString('hex');
    salt = Buffer.from('dc9e4a98886738bd8aae134a1f89aaa5a502c3fbd10e336136d4d5fe47448ad6', 'hex');
    iv = Buffer.from('cecacd85e9cb89788b5aab2f93361233', 'hex');
    uuid = Buffer.from('7e59dc028d42d09db29aa8a0f862cc81', 'hex');
    kdf = 'pbkdf2';
    keystore = (function(){
      switch (false) {
      case !withKeystore:
        return w.toV3String(password, {
          salt: salt,
          iv: iv,
          uuid: uuid,
          kdf: kdf
        });
      default:
        return "";
      }
    }());
    return {
      address: address,
      keystore: keystore
    };
  };
  toKeystore = function(store, withKeystore){
    var seed, wallet, index, password, staking, mining;
    seed = bip39.mnemonicToSeed(seedmem.mnemonic);
    wallet = hdkey.fromMasterSeed(seed);
    index = store.current.accountIndex;
    password = md5(wallet.derivePath("m1").deriveChild(index).getWallet().getAddress().toString('hex'));
    staking = getPair(wallet, 'm0', index, password, false);
    mining = getPair(wallet, 'm0/2', index, password, withKeystore);
    return {
      staking: staking,
      mining: mining,
      password: password
    };
  };
  item = function(store, web3t){
    return function(vote){
      var lang, info, border, background, addClass, raise, view, voteOnClick, voteFor, updateProgress, children;
      lang = getLang(store);
      info = getPrimaryInfo(store);
      border = {
        borderBottom: "1px solid " + info.app.border
      };
      background = {
        background: info.app.primary + ""
      };
      addClass = function(){
        return store.current.rate = !store.current.rate;
      };
      raise = !vote.voted ? "" : 'active';
      view = store.current.voteIndex === vote.index ? 'active' : "";
      voteOnClick = function(){
        return store.current.voteIndex = vote.index;
      };
      voteFor = function(){
        if (vote.voted) {
          return alert("You already voted for this");
        }
        return web3t.velas.Staking.getStakerPools(store.staking.keystore.staking.address, function(err, pool){
          var data, to, amount;
          if (err != null) {
            return alert(err);
          }
          if (pool.length < 1) {
            return alert("You should stake before you can vote");
          }
          data = web3t.velas.Development.vote.getData(+vote.index);
          if (err != null) {
            return cb(err);
          }
          to = web3t.velas.Development.address;
          amount = 0;
          return web3t.vlx2.sendTransaction({
            to: to,
            data: data,
            amount: amount,
            gas: 9600000,
            gasPrice: 1000000
          }, function(err){});
        });
      };
      updateProgress = function(){
        var newp;
        newp = store.development.newProposal;
        return newp.updateProgress = progress;
      };
      return react.createElement('div', {
        style: border,
        onClick: voteOnClick,
        className: view + " item"
      }, children = [
        react.createElement('div', {
          className: 'rate'
        }, children = [
          react.createElement('div', {
            className: 'votes'
          }, ' ' + vote.votes.toString()), button({
            store: store,
            onClick: typeof onClick != 'undefined' && onClick !== null ? onClick : voteFor,
            text: 'vote',
            icon: 'rate',
            type: 'primary'
          })
        ]), react.createElement('div', {
          className: 'description'
        }, children = [
          react.createElement('div', {
            className: 'header'
          }, ' ' + vote.name), react.createElement('div', {
            className: 'sub-header'
          }, ' ' + vote.description), react.createElement('div', {
            className: 'progress'
          }, children = [
            react.createElement('progress', {
              value: vote.progress + "",
              max: "100"
            }), react.createElement('span', {}, ' Start'), react.createElement('span', {}, ' End')
          ])
        ])
      ]);
    };
  };
  content = function(store, web3t){
    var lang, info, style, borderStyle, addClass, view, newp, createNewVote, changeDescription, changeName, applyNewVote, cancelNewVote, children;
    lang = getLang(store);
    info = getPrimaryInfo(store);
    style = {
      color: info.app.text,
      border: "1px solid " + info.app.border,
      background: info.app.header
    };
    borderStyle = {
      color: info.app.text,
      border: "1px solid " + info.app.border,
      padding: "15px",
      marginTop: "-11px"
    };
    addClass = function(){
      return store.current.view = !store.current.view;
    };
    view = store.current.view ? 'compact' : "";
    newp = store.development.newProposal;
    createNewVote = function(){};
    changeDescription = function(it){
      return newp.description = it.target.value;
    };
    changeName = function(it){
      return newp.name = it.target.value;
    };
    applyNewVote = function(){
      var cb, data, to, amount;
      cb = alert;
      if (newp.description.length < 10) {
        return cb("description should be at least 10 characters");
      }
      if (newp.name.length < 3) {
        return cb("name should be at least 3 characters");
      }
      data = web3t.velas.Development.addProposal.getData(newp.description, newp.name);
      if (typeof err != 'undefined' && err !== null) {
        return cb(err);
      }
      to = web3t.velas.Development.address;
      amount = 0;
      return web3t.vlx2.sendTransaction({
        to: to,
        data: data,
        amount: amount,
        gas: 9600000,
        gasPrice: 1000000
      }, function(err){
        return newp.opened = false;
      });
    };
    cancelNewVote = function(){
      newp.description = "";
      newp.name = "";
      return newp.opened = false;
    };
    return react.createElement('div', {
      className: 'side'
    }, children = [
      false ? react.createElement('div', {
        style: style,
        className: 'filter'
      }, children = [
        react.createElement('ul', {}, children = [
          react.createElement('li', {
            key: "best"
          }, children = [
            react.createElement('img', {
              src: icons.best + ""
            }), " Best"
          ]), react.createElement('li', {
            key: "hot",
            className: 'active'
          }, children = [
            react.createElement('img', {
              src: icons.hot + ""
            }), " Hot"
          ]), react.createElement('li', {
            key: "new"
          }, children = [
            react.createElement('img', {
              src: icons['new'] + ""
            }), " New"
          ]), react.createElement('li', {
            key: "top"
          }, children = [
            react.createElement('img', {
              src: icons.top + ""
            }), " Top"
          ])
        ]), react.createElement('ul', {
          className: 'view'
        }, children = [
          react.createElement('li', {
            onClick: addClass,
            key: "compound1",
            className: view + ""
          }, children = [
            react.createElement('img', {
              src: icons.compact + ""
            }), react.createElement('img', {
              src: icons.classic + ""
            })
          ]), react.createElement('li', {
            onClick: createNewVote,
            key: "compound2"
          }, children = [
            react.createElement('img', {
              src: icons.create + "",
              width: 18,
              height: 18
            }), react.createElement('img', {
              src: icons.create + "",
              width: 18,
              height: 18
            })
          ])
        ])
      ]) : void 8, react.createElement('div', {
        className: 'notice'
      }, children = [
        react.createElement('span', {
          className: 'danger'
        }, ' Important.'), react.createElement('span', {}, ' A requirement for voting is active participation in Velas staking.')
      ]), newp.updateProgress ? react.createElement('div', {
        style: borderStyle,
        className: 'create-new-proposal main-content'
      }, ' Please make upgrade process here') : void 8, newp.opened === true ? react.createElement('div', {
        style: borderStyle,
        className: 'create-new-proposal main-content'
      }, children = [
        textField({
          store: store,
          value: newp.description,
          onChange: changeDescription,
          placeholder: "description"
        }), textField({
          store: store,
          value: newp.name,
          onChange: changeName,
          placeholder: "name"
        }), button({
          store: store,
          onClick: applyNewVote,
          type: 'primary',
          icon: 'apply',
          text: 'btnApply'
        }), button({
          store: store,
          onClick: cancelNewVote,
          icon: 'close2',
          text: 'cancel'
        })
      ]) : void 8, react.createElement('div', {
        style: style,
        className: 'main-content'
      }, children = map(item(store, web3t))(
      store.development.proposals))
    ]);
  };
  vote = function(arg$){
    var store, web3t, lang, gotoSearch, info, borderStyle, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    info = getPrimaryInfo(store);
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'vote vote1153270868'
    }, children = [
      react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' Vote'), react.createElement('div', {
          onClick: gotoSearch,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), react.createElement('div', {
        className: 'wrapper'
      }, children = content(store, web3t))
    ]);
  };
  module.exports = vote;
  buildProposalView = function(arg$, index, cb){
    var web3t, store;
    web3t = arg$.web3t, store = arg$.store;
    return web3t.velas.Development.getProposalByIndex(index + 1, store.staking.keystore.staking.address, function(err, proposal){
      if (err != null) {
        return cb(err);
      }
      return cb(null, proposal);
    });
  };
  buildProposalViews = function(arg$, length, cb){
    var web3t, store;
    web3t = arg$.web3t, store = arg$.store;
    if (length === 0) {
      return cb(null, []);
    }
    return setImmediate(function(){
      var nextLength;
      nextLength = length - 1;
      return buildProposalViews({
        web3t: web3t,
        store: store
      }, nextLength, function(err, rest){
        if (err != null) {
          return cb(err);
        }
        return buildProposalView({
          web3t: web3t,
          store: store
        }, nextLength, function(err, proposalView){
          if (err != null) {
            return cb(err);
          }
          proposalView = {
            name: proposalView[0],
            description: proposalView[1],
            votes: proposalView[2],
            weight: proposalView[3],
            progress: proposalView[4],
            voted: proposalView[5],
            index: nextLength + 1
          };
          return cb(null, arrayFrom$(rest).concat([proposalView]));
        });
      });
    });
  };
  module.exports.init = function(arg$, cb){
    var web3t, store, ref$, ref1$;
    web3t = arg$.web3t, store = arg$.store;
    store.staking.keystore = toKeystore(store, false);
    if (store != null && ((ref$ = store.urlHashParams) != null && ref$.vote)) {
      store.current.voteIndex = parseInt(store != null ? (ref1$ = store.urlHashParams) != null ? ref1$.vote : void 8 : void 8);
    }
    return web3t.velas.Development.getProposalsCount(function(err, length){
      if (err != null) {
        return cb(err);
      }
      return buildProposalViews({
        web3t: web3t,
        store: store
      }, +length, function(err, proposals){
        if (err != null) {
          return cb(err);
        }
        store.development.proposals = proposals;
        return cb(null);
      });
    });
  };
}).call(this);
