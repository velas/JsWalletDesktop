// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, getLang, historyFuncs, icon, ref$, map, split, filter, find, foldl, div, times, plus, minus, velasNodeTemplate, hdkey, bip39, md5, menuFuncs, btoa, Buffer, CopyToClipboard, copiedInform, copy, round5, roundHuman, ethToVlx, switchAccount, icons, exitStake, placeholder, claimStake, canMakeStaking, transaction, epoch, button, alertTxn, amountField, seedmem, burger, getPair, toKeystore, showValidator, stakingContent, staking, callRefresh;
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  web3 = require('../web3.ls');
  getLang = require('../get-lang.ls');
  historyFuncs = require('../history-funcs.ls');
  icon = require('./icon.ls');
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, filter = ref$.filter, find = ref$.find, foldl = ref$.foldl;
  ref$ = require('../math.ls'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  velasNodeTemplate = require('../velas/velas-node-template.ls');
  ref$ = require('../../web3t/providers/deps.js'), hdkey = ref$.hdkey, bip39 = ref$.bip39;
  md5 = require('md5');
  menuFuncs = require('../menu-funcs.ls');
  btoa = require('btoa');
  Buffer = require('safe-buffer').Buffer;
  CopyToClipboard = require('react-copy-to-clipboard').CopyToClipboard;
  copiedInform = require('../copied-inform.ls');
  copy = require('../copy.ls');
  round5 = require('../round5.ls');
  roundHuman = require('../round-human.ls');
  ethToVlx = require('../../web3t/addresses.js').ethToVlx;
  switchAccount = require('./switch-account.ls');
  icons = require('../icons.ls');
  exitStake = require('./exit-stake.ls');
  placeholder = require('./placeholder.ls');
  claimStake = require('./claim-stake.ls');
  canMakeStaking = require('../staking/can-make-staking.ls');
  transaction = require('mobx').transaction;
  epoch = require('./epoch.ls');
  button = require('../components/button.ls');
  alertTxn = require('./alert-txn.ls');
  amountField = require('../components/amount-field.ls');
  seedmem = require('../seed.ls');
  burger = require('../components/burger.ls');
  getPair = function(wallet, path, index, password, withKeystore){
    var w, address, salt, iv, uuid, kdf, keystore;
    w = wallet.derivePath(path).deriveChild(index).getWallet();
    address = "0x" + w.getAddress().toString('hex');
    salt = Buffer.from('dc9e4a98886738bd8aae134a1f89aaa5a502c3fbd10e336136d4d5fe47448ad6', 'hex');
    iv = Buffer.from('cecacd85e9cb89788b5aab2f93361233', 'hex');
    uuid = Buffer.from('7e59dc028d42d09db29aa8a0f862cc81', 'hex');
    kdf = 'pbkdf2';
    keystore = (function(){
      switch (false) {
      case !withKeystore:
        return w.toV3String(password, {
          salt: salt,
          iv: iv,
          uuid: uuid,
          kdf: kdf
        });
      default:
        return "";
      }
    }());
    return {
      address: address,
      keystore: keystore
    };
  };
  toKeystore = function(store, withKeystore){
    var seed, wallet, index, password, staking, mining;
    seed = bip39.mnemonicToSeed(seedmem.mnemonic);
    wallet = hdkey.fromMasterSeed(seed);
    index = store.current.accountIndex;
    password = md5(wallet.derivePath("m1").deriveChild(index).getWallet().getAddress().toString('hex'));
    staking = getPair(wallet, 'm0', index, password, false);
    mining = getPair(wallet, 'm0/2', index, password, withKeystore);
    return {
      staking: staking,
      mining: mining,
      password: password
    };
  };
  showValidator = function(store, web3t){
    return function(validator){
      return react.createElement('li', {
        key: "validator-" + validator
      }, ' ' + validator);
    };
  };
  stakingContent = function(store, web3t){
    var style, lang, inputStyle, buttonPrimary3Style, buttonPrimary4Style, filterIcon, commingSoon, pairs, becomeOrExtendValidator, becomeValidator, changeStake, velasNodeAppliedTemplate, velasNodeAppliedTemplateLine, showScript, hideScript, ref$, accountLeft, accountRight, changeAccountIndex, updateCurrent, accountLeftProxy, accountRightProxy, changeAccountIndexProxy, buildTemplateLine, lineStyle, activate, activateLine, activateString, activateSsh, activateDo, activeClass, activeLine, activeString, activeSsh, activeDo, getBalance, getOptions, useMin, useMax, voteForChange, yourBalance, yourStakingAmount, yourStaking, vlxToken, stakerStatus, checkUncheck, boxBackground, children;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    inputStyle = {
      background: style.app.wallet,
      color: style.app.text,
      overflowX: 'auto',
      marginTop: '10px'
    };
    buttonPrimary3Style = {
      border: "0",
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    buttonPrimary4Style = {
      border: "0",
      color: style.app.text,
      background: style.app.primary4
    };
    filterIcon = {
      filter: style.app.filterIcon
    };
    commingSoon = {
      opacity: ".3"
    };
    pairs = store.staking.keystore;
    becomeOrExtendValidator = function(stake, pairs, cb){
      return web3t.velas.ValidatorSet.miningByStakingAddress(pairs.staking.address, function(err, miningAddress){
        if (err != null) {
          return cb(err);
        }
        if (miningAddress === '0x0000000000000000000000000000000000000000') {
          return cb(null, web3t.velas.Staking.addPool.getData(stake, pairs.mining.address));
        }
        return cb(null, web3t.velas.Staking.stake.getData(pairs.staking.address, stake));
      });
    };
    becomeValidator = function(){
      console.log("[become-validator]");
      return canMakeStaking(store, web3t, function(err){
        if (err != null) {
          return alert(err);
        }
        return getOptions(function(err){
          var stake;
          if (err != null) {
            return alert(err);
          }
          stake = times(store.staking.add.addValidatorStake, Math.pow(10, 18));
          return becomeOrExtendValidator(stake, pairs, function(err, data){
            var to, amount;
            if (err != null) {
              return alert(err + "");
            }
            to = web3t.velas.Staking.address;
            amount = store.staking.add.addValidatorStake;
            return web3t.vlx2.sendTransaction({
              to: to,
              data: data,
              amount: amount,
              gas: 4600000,
              gasPrice: 1000000
            }, function(err){
              if (err != null) {
                return store.staking.add.result = err + "";
              }
              return staking.init({
                store: store,
                web3t: web3t
              }, function(){});
            });
          });
        });
      });
    };
    changeStake = function(it){
      return store.staking.add.addValidatorStake = it.target.value;
    };
    velasNodeAppliedTemplate = split("\n")(
    velasNodeTemplate(
    pairs));
    velasNodeAppliedTemplateLine = function(it){
      return "echo '" + it + "' | base64 --decode | sh";
    }(
    btoa(
    velasNodeTemplate(
    pairs)));
    if (pairs.mining == null) {
      return null;
    }
    showScript = function(){
      return store.staking.keystore = toKeystore(store, true);
    };
    hideScript = function(){
      return pairs.mining.keystore = "";
    };
    ref$ = menuFuncs(store, web3t), accountLeft = ref$.accountLeft, accountRight = ref$.accountRight, changeAccountIndex = ref$.changeAccountIndex;
    updateCurrent = function(func){
      return function(data){
        func(data);
        return staking.init({
          store: store,
          web3t: web3t
        }, function(){
          return store.staking.keystore = toKeystore(store, false);
        });
      };
    };
    accountLeftProxy = updateCurrent(accountLeft);
    accountRightProxy = updateCurrent(accountRight);
    changeAccountIndexProxy = updateCurrent(changeAccountIndex);
    buildTemplateLine = function(it){
      var index, lineStyle;
      index = velasNodeAppliedTemplate.indexOf(it);
      lineStyle = {
        padding: "10px",
        width: '100%',
        marginBottom: '2px',
        background: index % 2 ? 'rgba(255, 255, 255, 0.04)' : ''
      };
      return react.createElement('div', {
        style: lineStyle
      }, ' ' + it);
    };
    lineStyle = {
      padding: "10px",
      width: '100%'
    };
    activate = function(tab){
      return function(){
        return store.staking.tab = tab;
      };
    };
    activateLine = activate('line');
    activateString = activate('string');
    activateSsh = activate('ssh');
    activateDo = activate('do');
    activeClass = function(tab){
      if (store.staking.tab === tab) {
        return 'active';
      } else {
        return '';
      }
    };
    activeLine = activeClass('line');
    activeString = activeClass('string');
    activeSsh = activeClass('ssh');
    activeDo = activeClass('do');
    getBalance = function(){
      var wallet;
      wallet = find(function(it){
        return it.coin.token === 'vlx2';
      })(
      store.current.account.wallets);
      return wallet.balance;
    };
    getOptions = function(cb){
      return web3t.velas.Staking.candidateMinStake(function(err, data){
        var min, max;
        if (err != null) {
          return cb(err);
        }
        min = (function(){
          switch (false) {
          case !(+plus(store.staking.add.addValidatorStake, store.staking.stakeAmountTotal) >= 1000000):
            return 1;
          default:
            return div(data, Math.pow(10, 18));
          }
        }());
        max = minus(getBalance(), 0.1);
        if (+store.staking.add.addValidatorStake > +max) {
          return cb(lang.balanceLessStaking);
        }
        if (+store.staking.add.addValidatorStake < +min) {
          return cb(lang.amountLessStaking);
        }
        return cb(null, {
          min: min,
          max: max
        });
      });
    };
    useMin = function(){
      return store.staking.add.addValidatorStake = 1000000;
    };
    useMax = function(){
      return store.staking.add.addValidatorStake = minus(getBalance(), 0.1);
    };
    voteForChange = function(){
      return web3t.velas.ValidatorSet.emitInitiateChangeCallable(function(err, can){
        var data, to, amount;
        if (err != null) {
          return alert(err);
        }
        if (can !== true) {
          return alert(lang.actionProhibited);
        }
        data = web3t.velas.ValidatorSet.emitInitiateChange.getData();
        to = web3t.velas.ValidatorSet.address;
        amount = 0;
        return web3t.vlx2.sendTransaction({
          to: to,
          data: data,
          amount: amount,
          gas: 4600000,
          gasPrice: 1000000
        }, function(err){
          return store.current.page = 'staking';
        });
      });
    };
    yourBalance = " " + roundHuman(getBalance()) + " ";
    yourStakingAmount = div(store.staking.stakeAmountTotal, Math.pow(10, 18));
    yourStaking = " " + roundHuman(yourStakingAmount);
    vlxToken = "VLX";
    stakerStatus = store.staking.isActiveStaker ? 'Active' : 'Inactive';
    checkUncheck = function(){
      var change;
      change = !store.staking.rewards[0].checked;
      return map(function(it){
        return it.checked = change;
      })(
      store.staking.rewards);
    };
    boxBackground = {
      background: style.app.bgPrimaryLight
    };
    return react.createElement('div', {
      className: 'staking-content'
    }, children = [
      alertTxn({
        store: store
      }), react.createElement('div', {
        className: 'form-group'
      }, children = [
        react.createElement('label', {
          className: 'active-network'
        }, children = react.createElement('div', {
          className: 'track thumb'
        })), react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.installNode)), react.createElement('div', {
            className: 'description'
          }, children = [
            react.createElement('div', {
              className: 'left-node'
            }, children = react.createElement('img', {
              src: icons.imgNodeStaking + ""
            })), react.createElement('div', {
              className: 'right-node'
            }, children = [
              react.createElement('div', {}, ' ' + lang.txtInstallNode), react.createElement('br', {}), react.createElement('div', {}, children = [
                react.createElement('span', {
                  className: 'important'
                }, ' ' + lang.important + ':'), " " + lang.importantDont
              ]), pairs.mining.keystore.length === 0
                ? react.createElement('div', {}, children = [
                  react.createElement('div', {
                    className: 'btn'
                  }, children = button({
                    store: store,
                    type: 'secondary',
                    onClick: showScript,
                    icon: 'generate',
                    text: "generateScript"
                  })), react.createElement('div', {}, ' ' + lang.plsAllow)
                ])
                : react.createElement('div', {}, children = react.createElement('div', {
                  className: 'btn'
                }, children = button({
                  store: store,
                  onClick: hideScript,
                  icon: 'close2'
                })))
            ]), pairs.mining.keystore.length > 0 || window.location.href.indexOf('dev') > -1 ? react.createElement('div', {}, children = [
              react.createElement('div', {
                className: 'tabs'
              }, children = [
                react.createElement('span', {
                  onClick: activateLine,
                  className: activeLine + " tab"
                }, ' ' + lang.lineByLine), react.createElement('span', {
                  onClick: activateString,
                  className: activeString + " tab"
                }, ' ' + lang.asOne), react.createElement('span', {
                  onClick: activateSsh,
                  className: activeSsh + " tab"
                }, ' ' + lang.installSsh), react.createElement('span', {
                  onClick: activateDo,
                  className: activeDo + " tab"
                }, ' ' + lang.installDo)
              ]), activeLine === 'active' ? react.createElement('div', {
                className: 'code'
              }, children = [
                react.createElement('section', {
                  className: 'window'
                }, children = [
                  react.createElement('section', {
                    className: 'icons'
                  }, children = react.createElement('span', {})), react.createElement(CopyToClipboard, {
                    text: velasNodeAppliedTemplate.join('\n') + "",
                    onCopy: copiedInform(store),
                    style: filterIcon,
                    className: 'copy'
                  }, children = copy(store))
                ]), map(buildTemplateLine)(
                velasNodeAppliedTemplate)
              ]) : void 8, activeString === 'active' ? react.createElement('div', {
                className: 'code'
              }, children = [
                react.createElement('section', {
                  className: 'window'
                }, children = [
                  react.createElement('section', {
                    className: 'icons'
                  }, children = react.createElement('span', {})), react.createElement(CopyToClipboard, {
                    text: velasNodeAppliedTemplateLine + "",
                    onCopy: copiedInform(store),
                    style: filterIcon,
                    className: 'copy'
                  }, children = copy(store))
                ]), react.createElement('div', {
                  style: lineStyle
                }, children = velasNodeAppliedTemplateLine)
              ]) : void 8, activeSsh === 'active' ? react.createElement('div', {
                className: 'code'
              }, children = [
                react.createElement('section', {
                  className: 'window'
                }, children = [
                  react.createElement('section', {
                    className: 'icons'
                  }, children = react.createElement('span', {})), react.createElement(CopyToClipboard, {
                    text: "some code",
                    onCopy: copiedInform(store),
                    style: filterIcon,
                    className: 'copy'
                  }, children = copy(store))
                ]), react.createElement('div', {
                  style: lineStyle
                }, children = [
                  " " + lang.comingSoon, react.createElement('span', {
                    className: 'cursor'
                  }, ' |')
                ])
              ]) : void 8, activeDo === 'active' ? react.createElement('div', {
                className: 'code'
              }, children = [
                react.createElement('section', {
                  className: 'window'
                }, children = [
                  react.createElement('section', {
                    className: 'icons'
                  }, children = react.createElement('span', {})), react.createElement(CopyToClipboard, {
                    text: "some code",
                    onCopy: copiedInform(store),
                    style: filterIcon,
                    className: 'copy'
                  }, children = copy(store))
                ]), react.createElement('div', {
                  style: lineStyle
                }, children = [
                  " " + lang.comingSoon, react.createElement('span', {
                    className: 'cursor'
                  }, ' |')
                ])
              ]) : void 8
            ]) : void 8
          ])
        ]), store.staking.isActiveStaker === false ? react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.checkNode)), react.createElement('div', {
            className: 'description'
          }, children = react.createElement('div', {
            className: 'left'
          }, children = react.createElement('ul', {}, children = [
            react.createElement('li', {
              key: "langs-check-node1"
            }, ' 1. ' + lang.checkNode1), react.createElement('li', {
              key: "langs-check-node2"
            }, ' 2. ' + lang.checkNode2), react.createElement('li', {
              key: "langs-check-node3"
            }, ' 3. ' + lang.checkNode3), react.createElement('li', {
              key: "langs-check-node4"
            }, ' 4. ' + lang.checkNode4)
          ])))
        ]) : void 8, +store.staking.stakeAmountTotal === 0 ? react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.validator)), react.createElement('div', {
            className: 'description'
          }, children = [
            react.createElement('div', {
              className: 'left'
            }, children = [
              react.createElement('label', {}, ' ' + lang.stake), amountField({
                store: store,
                value: store.staking.add.addValidatorStake,
                onChange: changeStake,
                placeholder: lang.stake,
                showDetails: true,
                id: "vlx-stake-input",
                token: "vlx2"
              }), react.createElement('div', {
                className: 'balance'
              }, children = [
                react.createElement('span', {
                  className: 'small-btns'
                }, children = [
                  react.createElement('button', {
                    style: buttonPrimary3Style,
                    onClick: useMin,
                    className: 'small'
                  }, ' Min'), react.createElement('button', {
                    style: buttonPrimary3Style,
                    onClick: useMax,
                    className: 'small'
                  }, ' Max')
                ]), react.createElement('span', {}, ' ' + lang.balance + ':'), react.createElement('span', {
                  className: 'color'
                }, ' ' + yourBalance), react.createElement('img', {
                  src: icons.vlxIcon + "",
                  className: 'label-coin'
                }), react.createElement('span', {
                  className: 'color'
                }, ' ' + vlxToken)
              ])
            ]), button({
              store: store,
              onClick: becomeValidator,
              icon: 'apply',
              text: 'btnApply',
              type: 'secondary'
            })
          ])
        ]) : void 8, +store.staking.stakeAmountTotal > 0 ? react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.staking)), react.createElement('div', {
            className: 'description'
          }, children = [
            react.createElement('div', {
              className: 'left'
            }, children = [
              react.createElement('div', {
                className: 'staking-info'
              }, children = [
                react.createElement('div', {
                  className: 'col col-4'
                }, children = react.createElement('div', {
                  style: boxBackground
                }, children = [
                  react.createElement('div', {
                    className: 'value'
                  }, children = react.createElement('div', {
                    className: 'number'
                  }, children = [react.createElement('span', {}, ' ' + yourStaking), react.createElement('span', {}, ' ' + vlxToken)])), react.createElement('div', {
                    className: 'header'
                  }, children = " " + lang.staking)
                ])), react.createElement('div', {
                  className: 'col col-4'
                }, children = react.createElement('div', {
                  style: boxBackground
                }, children = [
                  react.createElement('div', {
                    className: 'value green'
                  }, children = react.createElement('div', {
                    className: 'number'
                  }, children = " " + stakerStatus)), react.createElement('div', {
                    className: 'header'
                  }, children = " " + lang.yourStatus)
                ])), react.createElement('div', {
                  className: 'col col-4'
                }, children = react.createElement('div', {
                  style: boxBackground
                }, children = [
                  react.createElement('div', {
                    className: 'value'
                  }, children = react.createElement('div', {
                    className: 'number'
                  }, children = " " + store.staking.delegators)), react.createElement('div', {
                    className: 'header'
                  }, children = " " + lang.delegators)
                ])), react.createElement('div', {
                  className: 'col col-4'
                }, children = react.createElement('div', {
                  style: boxBackground
                }, children = [
                  react.createElement('div', {
                    className: 'value'
                  }, children = react.createElement('div', {
                    className: 'number'
                  }, children = " " + store.staking.epoch)), react.createElement('div', {
                    className: 'header'
                  }, children = " " + lang.epoch)
                ]))
              ]), react.createElement('div', {
                className: 'table'
              }, children = store.staking.isActiveStaker === false ? react.createElement('div', {
                className: 'warning'
              }, children = react.createElement('ol', {}, children = [
                react.createElement('li', {
                  key: "your-status"
                }, ' ' + lang.yourStatus1), react.createElement('li', {
                  key: "your-status2"
                }, ' ' + lang.yourStatus2)
              ])) : void 8), react.createElement('hr', {}), react.createElement('label', {}, ' ' + lang.stakeMore), amountField({
                store: store,
                value: store.staking.add.addValidatorStake,
                onChange: changeStake,
                placeholder: lang.stake,
                showDetails: true,
                id: "vlx-stake-input",
                token: "vlx2"
              }), react.createElement('div', {
                className: 'balance'
              }, children = [
                react.createElement('span', {
                  className: 'small-btns'
                }, children = [
                  react.createElement('button', {
                    style: buttonPrimary3Style,
                    onClick: useMin,
                    className: 'small'
                  }, ' ' + lang.min), react.createElement('button', {
                    style: buttonPrimary3Style,
                    onClick: useMax,
                    className: 'small'
                  }, ' ' + lang.max)
                ]), react.createElement('span', {}, ' Your balance:'), react.createElement('span', {
                  className: 'color'
                }, ' ' + yourBalance), react.createElement('img', {
                  src: icons.vlxIcon + "",
                  className: 'label-coin'
                }), react.createElement('span', {
                  className: 'color'
                }, ' ' + vlxToken)
              ])
            ]), button({
              store: store,
              onClick: becomeValidator,
              type: 'secondary',
              text: 'btnApply',
              icon: 'apply'
            })
          ])
        ]) : void 8, window.location.href.indexOf('emit') > -1 ? react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.emitChange)), react.createElement('div', {
            className: 'description'
          }, children = [
            react.createElement('div', {
              className: 'pad-bottom'
            }, ' ' + lang.propose), button({
              store: store,
              onClick: voteForChange,
              text: 'emit'
            })
          ])
        ]) : void 8, claimStake(store, web3t), exitStake(store, web3t)
      ])
    ]);
  };
  staking = function(arg$){
    var store, web3t, lang, goBack, gotoSearch, info, style, borderStyle, borderStyle2, borderRight, headerTableStyle, lightText, iconColor, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    goBack = historyFuncs(store, web3t).goBack;
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    info = getPrimaryInfo(store);
    style = {
      background: info.app.wallet,
      color: info.app.text
    };
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    borderStyle2 = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: "#4b2888"
    };
    borderRight = {
      color: info.app.text,
      borderRight: "1px solid " + info.app.border
    };
    headerTableStyle = {
      borderBottom: "1px solid " + info.app.border,
      background: info.app.walletLight
    };
    lightText = {
      color: info.app.color3
    };
    iconColor = {
      filter: info.app.iconFilter
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'staking staking-422741282'
    }, children = [
      react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' ' + lang.staking), react.createElement('div', {
          onClick: goBack,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          style: iconColor,
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), stakingContent(store, web3t)
    ]);
  };
  callRefresh = function(arg$, cb){
    var web3t, callAgain;
    web3t = arg$.web3t, callAgain = arg$.callAgain;
    if (callAgain == null || callAgain === false) {
      return cb(null);
    }
    return web3t.refresh(function(err){
      if (err != null) {
        cb(err);
      }
      return cb(null);
    });
  };
  staking.init = function(arg$, cb){
    var store, web3t, callAgain;
    store = arg$.store, web3t = arg$.web3t, callAgain = arg$.callAgain;
    return callRefresh({
      web3t: web3t,
      callAgain: callAgain
    }, function(err){
      var stakingAddress;
      store.staking.keystore = toKeystore(store, false);
      store.staking.chosenPool = {
        address: store.staking.keystore.staking.address
      };
      store.staking.reward = null;
      store.staking.withdrawAmount = 0;
      store.staking.stakeAmountTotal = 0;
      stakingAddress = store.staking.keystore.staking.address;
      return web3t.velas.Staking.stakingEpoch(function(err, stakingEpoch){
        if (err != null) {
          return cb(err);
        }
        store.staking.add.addValidatorStake = 0;
        store.staking.epoch = stakingEpoch.toFixed();
        return web3t.velas.Staking.stakeAmount(stakingAddress, stakingAddress, function(err, amount){
          store.staking.stakeAmountTotal = amount.toFixed();
          return web3t.velas.Staking.isPoolActive(stakingAddress, function(err, isActive){
            if (err != null) {
              return cb(err);
            }
            store.staking.isActiveStaker = isActive;
            return web3t.velas.Staking.poolDelegators(stakingAddress, function(err, delegators){
              if (err != null) {
                return cb(err);
              }
              store.staking.delegators = delegators.length;
              return exitStake.init({
                store: store,
                web3t: web3t
              }, function(err){
                if (err != null) {
                  return cb(err);
                }
                return cb(null);
              });
            });
          });
        });
      });
    });
  };
  module.exports = staking;
  staking.focus = function(arg$, cb){
    var store, web3t;
    store = arg$.store, web3t = arg$.web3t;
    claimStake.calcReward(store, web3t);
    return cb(null);
  };
}).call(this);
