// Generated by LiveScript 1.6.0
(function(){
  var react, map, ref$, set, check, exists, del, setbkp, navigate, getPrimaryInfo, getLang, notifyFormResult, seedmem, menuFuncs, chooseLanguage, icons, confirm, button, textField, exportImportSeed, alert, wrongPin, checkPin, version, MIN_PASSWORD_LENGTH, validatePassword, input, resetWallet, totalTrials, wrongTrials, setupButton, createWallet, locked, focus;
  react = require('react');
  map = require('prelude-ls').map;
  ref$ = require('../pin.ls'), set = ref$.set, check = ref$.check, exists = ref$.exists, del = ref$.del, setbkp = ref$.setbkp;
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  notifyFormResult = require('../send-form.ls').notifyFormResult;
  seedmem = require('../seed.ls');
  menuFuncs = require('../menu-funcs.ls');
  chooseLanguage = require('./choose-language.ls');
  icons = require('../icons.ls');
  confirm = require('./confirmation.ls').confirm;
  button = require('../components/button.ls');
  textField = require('../components/text-field.ls');
  exportImportSeed = require('../components/export-import-seed.ls');
  alert = require('../pages/confirmation.ls').alert;
  wrongPin = function(store){
    var leftTrials;
    store.current.pin = "";
    store.current.pinTrial += 1;
    leftTrials = totalTrials - store.current.pinTrial;
    if (leftTrials <= 0) {
      return resetWallet(store);
    }
  };
  checkPin = function(store, web3t){
    if (!exists()) {
      return;
    }
    if (!check(store.current.pin)) {
      return wrongPin(store);
    }
    store.current.pinTrial = 0;
    store.current.pin = "";
    store.current.loading = true;
    if (store.current.pagePin != null) {
      navigate(store, web3t, store.current.pagePin);
      return store.current.pagePin = null;
    } else {
      navigate(store, web3t, ':init');
      return notifyFormResult('unlock', null);
    }
  };
  version = function(store, web3t){
    return react.createElement('div', {
      className: 'version'
    }, ' ' + store.version);
  };
  MIN_PASSWORD_LENGTH = 6;
  validatePassword = function(store, cb){
    var isSecureLength, ref$, isSecureEncoding;
    isSecureLength = ((ref$ = store.current.pin) != null ? ref$ : "").length >= MIN_PASSWORD_LENGTH;
    if (!isSecureLength) {
      return cb("Password must contain at least " + MIN_PASSWORD_LENGTH + " characters");
    }
    isSecureEncoding = /^[0-9a-zA-Z$&+,:;=?@#|'<>.^*()%!-_]{6,}$/.test(store.current.pin);
    if (!isSecureEncoding) {
      return cb("Password must contain only latin characters and/or special characters and digits");
    }
    return cb(null);
  };
  input = function(store, web3t){
    var style, buttonPrimary1Style, buttonPrimary0Style, lockedStyle, enter, change, lang, catchKey, resetAccount, drag, focusInput, children;
    style = getPrimaryInfo(store);
    buttonPrimary1Style = {
      border: "0",
      color: style.app.text,
      background: style.app.primary1,
      backgroundColor: style.app.primary1Spare,
      width: "130px",
      height: "36px",
      marginTop: "10px"
    };
    buttonPrimary0Style = {
      border: "0",
      color: style.app.textPrimary,
      background: "transparent",
      width: "130px",
      height: "36px",
      marginTop: "0px"
    };
    lockedStyle = {
      color: style.app.text,
      background: style.app.wallet,
      border: "0"
    };
    enter = function(){
      if (exists()) {
        return checkPin(store, web3t);
      } else {
        return validatePassword(store, function(err){
          if (err != null) {
            return alert(store, err);
          }
          set(store.current.pin);
          checkPin(store, web3t);
          return store.current.pin = "";
        });
      }
    };
    change = function(e){
      return store.current.pin = e.target.value;
    };
    lang = getLang(store);
    catchKey = function(it){
      if (it.keyCode === 13) {
        return enter();
      }
    };
    resetAccount = function(){
      return confirm(store, lang.backupInfo + "", function(res){
        if (res === false) {
          return;
        }
        return resetWallet(store);
      });
    };
    drag = store.current.pinTrial === 0 ? "" : 'drag';
    focusInput = function(ref){
      if (ref != null) {
        ref.focus();
      }
    };
    return react.createElement('div', {}, children = [
      textField({
        ref: function(c){
          return {
            a: typeof a != 'undefined' && a !== null
              ? a
              : focusInput(c)
          };
        },
        store: store,
        type: 'password',
        value: store.current.pin,
        placeholder: lang.pinPlaceholder,
        onChange: change,
        onKeyDown: catchKey,
        id: typeof id != 'undefined' && id !== null ? id : "locked-password"
      }), exists() ? react.createElement('div', {}, children = [
        button({
          store: store,
          onClick: enter,
          type: 'primary',
          text: 'enter'
        }), react.createElement('div', {}, children = [
          react.createElement('div', {
            className: 'division'
          }, children = [
            react.createElement('div', {
              className: 'line l'
            }), react.createElement('span', {}, ' ' + lang.or), react.createElement('div', {
              className: 'line r'
            })
          ]), react.createElement('div', {}, children = react.createElement('button', {
            style: buttonPrimary0Style,
            onClick: resetAccount,
            className: 'setup text-primary'
          }, ' ' + lang.newAccount))
        ])
      ]) : void 8
    ]);
  };
  resetWallet = function(store){
    setbkp();
    del();
    seedmem.setbkp();
    seedmem.del();
    store.current.pin = "";
    store.current.pinTrial = 0;
    return store.current.page = 'chooseinit';
  };
  totalTrials = 8;
  wrongTrials = function(store){
    var lang, style, leftTrials, notice, buttonPrimary0Style, resetAccount, wrongPinText, children;
    if (store.current.pinTrial === 0) {
      return null;
    }
    lang = getLang(store);
    style = getPrimaryInfo(store);
    leftTrials = totalTrials - store.current.pinTrial;
    notice = {
      background: style.app.wallet
    };
    buttonPrimary0Style = {
      border: "0",
      color: style.app.textPrimary,
      background: "transparent",
      width: "130px",
      height: "36px",
      marginTop: "0px"
    };
    resetAccount = function(){
      return confirm(store, lang.backupInfo + "", function(res){
        if (res === false) {
          return;
        }
        return resetWallet(store);
      });
    };
    wrongPinText = leftTrials + "/" + totalTrials + " " + lang.noticeReset + ".";
    return react.createElement('div', {
      className: 'wrong-pin-trial'
    }, children = [
      react.createElement('div', {
        key: "wrong-trial",
        className: 'wrong'
      }, ' ' + wrongPinText), react.createElement('div', {
        style: notice,
        className: 'notice'
      }, children = [
        react.createElement('span', {
          className: 'orange'
        }, ' ' + lang.notice + '!'), react.createElement('span', {}, ' ' + lang.noticeText)
      ]), react.createElement('div', {}, children = react.createElement('button', {
        style: buttonPrimary0Style,
        onClick: resetAccount,
        className: 'reset setup text-primary'
      }, ' ' + lang.resetAccount))
    ]);
  };
  setupButton = function(store, web3t){
    var lang, style, openLanguage, setup, textColor, buttonStyle, btnIcon, children;
    lang = getLang(store);
    style = getPrimaryInfo(store);
    openLanguage = menuFuncs(store, web3t).openLanguage;
    setup = function(){
      return validatePassword(store, function(err){
        if (err != null) {
          return alert(store, err);
        }
        set(store.current.pin);
        checkPin(store, web3t);
        return store.current.pin = "";
      });
    };
    textColor = {
      color: style.app.text
    };
    buttonStyle = {
      border: "1px solid " + style.app.primary3,
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    btnIcon = {
      filter: style.app.btnIcon
    };
    return react.createElement('div', {
      key: "setup-button"
    }, children = [
      react.createElement('button', {
        onClick: setup,
        style: buttonStyle,
        id: "locked-continue",
        className: 'setup'
      }, children = react.createElement('span', {}, children = [
        react.createElement('img', {
          src: icons.key + "",
          style: btnIcon,
          className: 'icon-svg'
        }), " " + lang.setup
      ])), react.createElement('div', {
        style: textColor,
        className: 'hint p'
      }, ' ' + lang.pinInfo)
    ]);
  };
  createWallet = function(store, web3t){
    var lang, style, create, textColor, buttonPrimary2Style, children;
    lang = getLang(store);
    style = getPrimaryInfo(store);
    create = function(){
      return next();
    };
    textColor = {
      color: style.app.text
    };
    buttonPrimary2Style = {
      border: "1px solid " + style.app.primary2,
      color: style.app.text,
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    return react.createElement('div', {
      key: "create-wallet"
    }, children = react.createElement('button', {
      onClick: create,
      style: buttonPrimary2Style,
      className: 'setup'
    }, children = react.createElement('span', {}, children = [
      react.createElement('img', {
        src: icons.createWallet + "",
        className: 'icon-svg'
      }), " " + lang.createWallet
    ])));
  };
  locked = function(arg$){
    var store, web3t, lang, style, title, footer, info, lockedStyle, buttonPrimary2Style, txtStyle, logoStyle, download, children, ref$;
    store = arg$.store, web3t = arg$.web3t;
    if (store.current.loading === true) {
      return null;
    }
    lang = getLang(store);
    style = getPrimaryInfo(store);
    title = (function(){
      switch (false) {
      case !!exists():
        return lang.enterPin;
      default:
        return lang.enterPin;
      }
    }());
    footer = (function(){
      switch (false) {
      case !!exists():
        return setupButton;
      default:
        return wrongTrials;
      }
    }());
    info = getPrimaryInfo(store);
    lockedStyle = {
      color: info.app.text,
      background: info.app.glitch
    };
    buttonPrimary2Style = {
      border: "1px solid " + style.app.primary2,
      color: style.app.text,
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    txtStyle = {
      color: info.app.text
    };
    logoStyle = {
      filter: info.app.filterLogo
    };
    download = function(){
      return navigate(store, web3t, 'downloadwallet');
    };
    return react.createElement('div', {
      key: "locked",
      style: lockedStyle,
      className: 'locked locked-406688437'
    }, children = react.createElement('div', {
      className: 'locked-inner'
    }, children = [
      react.createElement('div', {
        className: 'logo'
      }, children = [
        react.createElement('img', {
          src: info.branding.logo + ""
        }), react.createElement('div', {
          style: txtStyle,
          className: 'title'
        }, ' ' + info.branding.title), version(store, web3t)
      ]), react.createElement('div', {
        key: "locked-title",
        className: 'title'
      }, ' ' + title), react.createElement('div', {
        key: "locked-inputs",
        className: 'inputs'
      }, children = input(store, web3t)), exportImportSeed(store), footer(store, web3t), (typeof process != 'undefined' && process !== null ? (ref$ = process.versions) != null ? ref$.electron : void 8 : void 8) == null ? react.createElement('div', {
        className: 'downloadwallet'
      }, children = [
        react.createElement('a', {
          href: "https://apps.apple.com/us/app/velas-mobile-wallet/id1541032748",
          target: "_blank",
          rel: "noopener noreferrer nofollow"
        }, children = react.createElement('img', {
          src: icons['ios'] + "",
          className: 'icon-download'
        })), react.createElement('a', {
          href: "https://play.google.com/store/apps/details?id=com.velas.mobile_wallet",
          target: "_blank",
          rel: "noopener noreferrer nofollow"
        }, children = react.createElement('img', {
          src: icons['android'] + "",
          className: 'icon-download'
        })), react.createElement('a', {
          href: "https://github.com/velas/mobile-wallet/releases/latest/download/app-release.apk",
          target: "_blank",
          rel: "noopener noreferrer nofollow",
          id: "download-apk"
        }, children = react.createElement('img', {
          src: icons['apk'] + "",
          className: 'icon-download'
        })), react.createElement('span', {}, children = react.createElement('img', {
          onClick: download,
          src: icons['desktop'] + "",
          className: 'icon-download'
        }))
      ]) : void 8
    ]));
  };
  focus = function(arg$, cb){
    var store;
    store = arg$.store;
    store.forceReload = true;
    store.forceReloadTxs = true;
    return cb(null);
  };
  locked.focus = focus;
  module.exports = locked;
}).call(this);
