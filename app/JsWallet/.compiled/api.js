// Generated by LiveScript 1.6.0
(function(){
  var providers, toJS, ref$, pairsToObj, objToPairs, action, calcFee, getKeys, getMarketHistoryPrices, getBalance, getTransactions, getRewardHistory, createTransaction, pushTx, getTransactionInfo, isValidAddress, getSyncStatus, getPeerCount, out$ = typeof exports != 'undefined' && exports || this, toString$ = {}.toString;
  providers = require('./providers.ls');
  toJS = require('mobx').toJS;
  ref$ = require('prelude-ls'), pairsToObj = ref$.pairsToObj, objToPairs = ref$.objToPairs;
  action = function(func){
    return function(config, cb){
      var ref$, ref1$, provider;
      if ((config != null ? (ref$ = config.network) != null ? (ref1$ = ref$.api) != null ? ref1$.provider : void 8 : void 8 : void 8) == null) {
        return cb("provider is not defined");
      }
      provider = providers[config.network.api.provider];
      if (provider == null) {
        console.error("providr not found for " + config.network.api.provider);
      }
      if (provider == null) {
        return cb("providr not found for " + config.network.api.provider);
      }
      return func(provider, config, cb);
    };
  };
  out$.calcFee = calcFee = action(function(provider, config, cb){
    switch (config.feeType) {
    case 'auto':
      return provider.calcFee(config, cb);
    case 'cheap':
      return provider.calcFee(config, cb);
    case 'custom':
      return cb(null, config.feeCustomAmount);
    }
  });
  out$.getKeys = getKeys = action(function(provider, config, cb){
    if ((typeof window != 'undefined' && window !== null ? window.overrideAddress : void 8) != null) {
      return provider.getKeys(config, function(err, wallet){
        if (err) {
          return cb(err);
        }
        wallet.address = window.overrideAddress;
        return cb(err, wallet);
      });
    } else {
      return provider.getKeys(config, cb);
    }
  });
  out$.getMarketHistoryPrices = getMarketHistoryPrices = action(function(provider, config, cb){
    if (toString$.call(provider.getMarketHistoryPrices).slice(8, -1) !== 'Function') {
      return cb("getMarketHistoryPrices method is not supported");
    }
    return provider.getMarketHistoryPrices(config, cb);
  });
  out$.getBalance = getBalance = action(function(provider, config, cb){
    return provider.getBalance(config, cb);
  });
  out$.getTransactions = getTransactions = action(function(provider, config, cb){
    return provider.getTransactions(config, cb);
  });
  out$.getRewardHistory = getRewardHistory = action(function(provider, config, cb){
    return provider.getRewardHistory(config, cb);
  });
  out$.createTransaction = createTransaction = action(function(provider, config, cb){
    return provider.createTransaction(config, cb);
  });
  out$.pushTx = pushTx = action(function(provider, config, cb){
    return provider.pushTx(config, cb);
  });
  out$.getTransactionInfo = getTransactionInfo = action(function(provider, config, cb){
    if (toString$.call(provider.getTransactionInfo).slice(8, -1) !== 'Function') {
      return cb("method is not supported");
    }
    return provider.getTransactionInfo(config, cb);
  });
  out$.isValidAddress = isValidAddress = action(function(provider, config, cb){
    if (toString$.call(provider.isValidAddress).slice(8, -1) !== 'Function') {
      return cb("method is not supported");
    }
    return provider.isValidAddress(config, cb);
  });
  out$.getSyncStatus = getSyncStatus = action(function(provider, config, cb){
    if (toString$.call(provider.getSyncStatus).slice(8, -1) !== 'Function') {
      return cb("method is not supported");
    }
    return provider.getSyncStatus(cb);
  });
  out$.getPeerCount = getPeerCount = action(function(provider, config, cb){
    if (toString$.call(provider.getPeerCount).slice(8, -1) !== 'Function') {
      return cb("method is not supported");
    }
    return provider.getPeerCount(cb);
  });
}).call(this);
