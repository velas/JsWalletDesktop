// Generated by LiveScript 1.6.0
(function(){
  var ref$, sortBy, reverse, filter, map, find, moment, navigate, react, removeTx, getTransactionInfo, web3, toJS, confirm, prompt, applyTransactions, getLang, icons, roundHuman;
  ref$ = require('prelude-ls'), sortBy = ref$.sortBy, reverse = ref$.reverse, filter = ref$.filter, map = ref$.map, find = ref$.find;
  moment = require('moment');
  navigate = require('./navigate.ls');
  react = require('react');
  removeTx = require('./pending-tx.ls').removeTx;
  getTransactionInfo = require('./api.ls').getTransactionInfo;
  web3 = require('./web3.ls');
  toJS = require('mobx').toJS;
  ref$ = require('./pages/confirmation.ls'), confirm = ref$.confirm, prompt = ref$.prompt;
  applyTransactions = require('./apply-transactions.ls');
  getLang = require('./get-lang.ls');
  icons = require('./icons.ls');
  roundHuman = require('./round-human.ls');
  module.exports = function(store, web3t){
    var ago, date, filt, lang, arrow, arrowLg, sign, goBack, extended, cutAmount, amountBeautify, isActive, setFilter, switchType, switchFilter, switchTypeIn, switchTypeOut, switchSender, switchReceiver, getKey, getValue, removeTypeFromFilter, removeFilterRaram, deletePendingTx, transactionInfo;
    if (store == null || web3t == null) {
      return null;
    }
    ago = function(time){
      return moment(time * 1000).fromNow();
    };
    date = function(time){
      return moment(time * 1000).format();
    };
    filt = store.current.filter;
    lang = getLang(store);
    arrow = function(type){
      switch (false) {
      case type !== 'IN':
        return lang['in'] + "";
      default:
        return lang.out + "";
      }
    };
    arrowLg = function(type){
      switch (false) {
      case type !== 'IN':
        return icons.get + "";
      default:
        return icons.send + "";
      }
    };
    sign = function(type){
      switch (false) {
      case type !== 'IN':
        return '+';
      default:
        return '-';
      }
    };
    goBack = function(){
      var prev, page;
      if (store.pages.length <= 1) {
        return null;
      }
      store.pages.splice(-1, 1);
      prev = store.pages[store.pages.length - 1];
      page = prev != null ? prev : 'wallets';
      return navigate(store, web3t, page);
    };
    extended = function(str){
      switch (false) {
      case !(str.indexOf('.') > -1):
        return str + "0";
      default:
        return str + ".0";
      }
    };
    cutAmount = function(amount, max){
      var str, res;
      str = (amount != null ? amount : "").toString();
      res = (function(){
        switch (false) {
        case str.length !== max:
          return str;
        case !(str.length >= max):
          return str.substr(0, max - 1) + "..";
        default:
          return cutAmount(extended(str), max);
        }
      }());
      return res;
    };
    amountBeautify = function(amount, max){
      var str, $amount, ref$, int, dec, grayStyle, children;
      str = (amount != null ? amount : "").toString();
      $amount = roundHuman(str, {
        decimals: 4
      });
      ref$ = $amount.split("."), int = ref$[0], dec = ref$[1];
      grayStyle = {
        opacity: 0.8,
        fontSize: "90%",
        fontWeight: 600
      };
      return [
        react.createElement('div', {
          className: 'balance'
        }, children = react.createElement('span', {
          className: 'color'
        }, ' ' + int)), dec != null ? react.createElement('span', {
          style: grayStyle,
          className: 'gray-color'
        }, '.' + dec + '     ') : void 8
      ];
    };
    isActive = function(value){
      var types;
      types = store.current.filterTxsTypes;
      if (in$(value, types)) {
        return 'active';
      } else {
        return '';
      }
    };
    setFilter = function(value){
      var key, val;
      key = Object.keys(value)[0];
      val = value[key];
      if (val.toString().trim().length > 0) {
        filt[key + ""] = val;
      } else {
        delete filt[key + ""];
      }
      return applyTransactions(store);
    };
    switchType = curry$(function(type, event){
      var types;
      types = filt.types;
      if (!in$(type, store.current.filterTxsTypes)) {
        return store.current.filterTxsTypes.push(type);
      } else {
        return store.current.filterTxsTypes.splice(store.current.filterTxsTypes.indexOf(type), 1);
      }
    });
    switchFilter = curry$(function(value, event){
      var key, val;
      key = Object.keys(value)[0];
      val = value[key];
      if (filt[key + ""] == null) {
        filt[key + ""] = val;
      } else {
        delete filt[key + ""];
      }
      return applyTransactions(store);
    });
    switchType = curry$(function(type, event){
      if (!in$(type, store.current.filterTxsTypes)) {
        store.current.filterTxsTypes.push(type);
      } else {
        store.current.filterTxsTypes.splice(store.current.filterTxsTypes.indexOf(type), 1);
      }
      return applyTransactions(store);
    });
    switchTypeIn = switchType('IN');
    switchTypeOut = switchType('OUT');
    switchSender = function(from){
      if (!in$('IN', store.current.filterTxsTypes)) {
        store.current.filterTxsTypes.push('IN');
      }
      return setFilter({
        from: from
      });
    };
    switchReceiver = function(to){
      if (!in$('OUT', store.current.filterTxsTypes)) {
        store.current.filterTxsTypes.push('OUT');
      }
      return setFilter({
        to: to
      });
    };
    getKey = function(obj){
      return Object.keys(obj)[0];
    };
    getValue = function(obj){
      var key;
      key = Object.keys(obj)[0];
      return obj[key];
    };
    removeTypeFromFilter = curry$(function(type, event){
      store.current.filterTxsTypes.splice(store.current.filterTxsTypes.indexOf(type), 1);
      return applyTransactions(store);
    });
    removeFilterRaram = curry$(function(prop, event){
      var key;
      if (prop == null) {
        return null;
      }
      key = getKey(prop);
      if (store.current.filter[key + ""] == null) {
        return false;
      }
      delete store.current.filter[key + ""];
      return applyTransactions(store);
    });
    deletePendingTx = function(tx){
      return function(event){
        return confirm(store, "Would you like to remove pending transaction?  Your balance will be updated once the transaction is confirmed", function(agree){
          if (!agree) {
            return;
          }
          return removeTx((import$({
            store: store
          }, tx)), function(err){
            return web3t.refresh(function(){});
          });
        });
      };
    };
    transactionInfo = function(config){
      return function(event){
        return getTransactionInfo(config, function(err, info){});
      };
    };
    return {
      goBack: goBack,
      switchTypeIn: switchTypeIn,
      transactionInfo: transactionInfo,
      removeTypeFromFilter: removeTypeFromFilter,
      removeFilterRaram: removeFilterRaram,
      switchSender: switchSender,
      switchReceiver: switchReceiver,
      switchTypeOut: switchTypeOut,
      coins: store.coins,
      isActive: isActive,
      switchFilter: switchFilter,
      arrow: arrow,
      arrowLg: arrowLg,
      sign: sign,
      deletePendingTx: deletePendingTx,
      amountBeautify: amountBeautify,
      ago: ago
    };
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
