// Generated by LiveScript 1.6.0
(function(){
  var react, sendFuncs, ref$, map, find, keys, filter, pairsToObj, objToPairs, uniqueBy, getPrimaryInfo, icon, getLang, switchAccount, icons, roundHuman, roundNumber, walletsFuncs, epoch, button, addressHolder, identicon, historyFuncs, burger, amountField, amountFiatField, times, div, bignumber, getInstallList, common, cloneDeep, formGroup, customToken, $styles, toString$ = {}.toString;
  react = require('react');
  sendFuncs = require('../send-funcs.ls');
  ref$ = require('prelude-ls'), map = ref$.map, find = ref$.find, keys = ref$.keys, filter = ref$.filter, pairsToObj = ref$.pairsToObj, objToPairs = ref$.objToPairs, uniqueBy = ref$.uniqueBy;
  getPrimaryInfo = require('../get-primary-info.ls');
  icon = require('./icon.ls');
  getLang = require('../get-lang.ls');
  switchAccount = require('./switch-account.ls');
  icons = require('../icons.ls');
  roundHuman = require('../round-human.ls');
  roundNumber = require('../round-number.ls');
  walletsFuncs = require('../wallets-funcs.ls');
  epoch = require('./epoch.ls');
  button = require('../components/button.ls');
  addressHolder = require('../components/address-holder.ls');
  identicon = require('../components/identicon.ls');
  historyFuncs = require('../history-funcs.ls');
  burger = require('../components/burger.ls');
  amountField = require('../components/amount-field.ls');
  amountFiatField = require('../components/amount-fiat-field.ls');
  ref$ = require('../math.ls'), times = ref$.times, div = ref$.div;
  bignumber = require('bignumber.js');
  getInstallList = require('../install-plugin.ls').getInstallList;
  common = require('../plugin-loader.ls').common;
  cloneDeep = require('lodash/cloneDeep');
  formGroup = function(classes, title, style, content){
    var children;
    return react.createElement('div', {
      className: classes + " form-group"
    }, children = [
      react.createElement('label', {
        style: style,
        className: 'control-label'
      }, ' ' + title), content()
    ]);
  };
  customToken = function(arg$){
    var store, web3t, loadCoins, loadCoinsKeys;
    store = arg$.store, web3t = arg$.web3t;
    if (store.customToken.add === false) {
      return null;
    }
    loadCoins = require("../../web3t/load-coins.js");
    loadCoinsKeys = keys(
    loadCoins);
    return loadCoins({
      plugins: []
    }, function(err, $web3tTokens){
      if (err != null) {
        console.error(err);
      }
      return getInstallList(function(err, customTokens){
        var web3tTokens, basePlugins, allTokens, ref$, symbol, symbolDisplay, icon, contractAddress, decimals, editSymbol, network, switchNetwork, errors, selectedNetwork, WALLETS_FOR_NETWORKS, wallets, getWallet, evmWallet, close, isExiting, theme, roundMoney, style, styles, menuStyle, inputStyle, borderStyle, amountStyle, iconStyle, useMaxStyle, buttonPrimary3Style, buttonPrimary2Style, cryptoBackground, justCryptoBackground, contentBodyStyle, moreText, borderHeader, lang, openInvoice, showClass, tokenDisplay, tokenIcon, getNumber, goBackFromSend, up, networkType, token, group, subtitle, displayNetwork, contractAddressExists, checkTokenUnique, getParentWallet, saveCustomToken, decimalsChange, tokenSymbolChange, contractAddressChange, getContractSymbol, retrieveInfoByTokenAddress, setError, runAsyncTask, stopAsyncTask, cancel, hasContractError, hasSymbolError, hasDecimalsError, hasNetworkError, disabled, networkDropdownClick, rotateClass, availableNetworks, changeNetwork, setDefaultChosenTokenData, clearChosenTokenData, clearErrors, clearDefaultErrors, createNetworkPosition, children;
        customTokens = filter(function(it){
          return !in$(it.token, loadCoinsKeys);
        })(
        customTokens);
        web3tTokens = map(function(it){
          return it[1];
        })(
        filter(function(it){
          return it[1] != null;
        })(
        objToPairs(
        $web3tTokens)));
        basePlugins = common;
        allTokens = ((web3tTokens != null
          ? web3tTokens
          : []).concat(customTokens != null
          ? customTokens
          : [])).concat(basePlugins);
        ref$ = store.customToken, symbol = ref$.symbol, symbolDisplay = ref$.symbolDisplay, icon = ref$.icon, contractAddress = ref$.contractAddress, decimals = ref$.decimals, editSymbol = ref$.editSymbol, network = ref$.network, switchNetwork = ref$.switchNetwork, errors = ref$.errors, selectedNetwork = ref$.selectedNetwork;
        WALLETS_FOR_NETWORKS = ['vlx_eth', 'vlx_erc20', 'bsc_vlx', 'vlx_huobi'];
        wallets = filter(function(it){
          var ref$;
          return (it != null ? (ref$ = it[store.current.network]) != null ? ref$.disabled : void 8 : void 8) !== true;
        })(
        filter(function(it){
          return in$(it != null ? it.token : void 8, WALLETS_FOR_NETWORKS);
        })(
        allTokens));
        getWallet = function(token){
          return find(function(it){
            return it.token === token;
          })(
          allTokens);
        };
        if (network == null) {
          evmWallet = getWallet(WALLETS_FOR_NETWORKS[0]);
          store.customToken.network = (import$({
            token: evmWallet != null ? evmWallet.token : void 8
          }, evmWallet != null ? evmWallet[store.current.network] : void 8));
        }
        close = function(){
          store.current.addCoin = false;
          store.customToken.add = false;
          return clearChosenTokenData();
        };
        isExiting = store.customToken.add === false || store.current.addCoin === false;
        theme = getPrimaryInfo(store);
        roundMoney = function(val){
          return function(it){
            return it / 100;
          }(
          Math.round(
          function(it){
            return it * 100;
          }(
          +val)));
        };
        style = getPrimaryInfo(store);
        styles = $styles(style);
        menuStyle = {
          background: style.app.background,
          backgroundColor: style.app.bgspare,
          border: "1px solid " + style.app.border
        };
        inputStyle = {
          background: style.app.input,
          border: "1px solid " + style.app.border,
          color: style.app.text
        };
        borderStyle = {
          border: "1px solid " + style.app.border
        };
        amountStyle = {
          background: style.app.input,
          border: "1px solid " + style.app.border,
          color: style.app.text
        };
        iconStyle = {
          color: style.app.icon
        };
        useMaxStyle = {
          color: style.app.text2
        };
        buttonPrimary3Style = {
          border: "0",
          color: style.app.text2,
          background: style.app.primary3,
          backgroundColor: style.app.primary3Spare
        };
        buttonPrimary2Style = {
          border: "1px solid " + style.app.wallet,
          color: style.app.text,
          background: style.app.primary2,
          backgroundColor: style.app.primary2Spare
        };
        cryptoBackground = {
          background: style.app.wallet,
          width: "50%"
        };
        justCryptoBackground = {
          background: style.app.wallet
        };
        contentBodyStyle = {
          color: style.app.text
        };
        moreText = {
          color: style.app.text
        };
        borderHeader = {
          color: style.app.text,
          borderBottom: "1px solid " + style.app.border,
          background: style.app.background,
          backgroundColor: style.app.bgspare
        };
        lang = getLang(store);
        openInvoice = function(){};
        showClass = store.current.openMenu ? 'hide' : "";
        tokenDisplay = (symbol != null ? symbol : "").toUpperCase();
        tokenIcon = icon;
        getNumber = function(val){
          var number;
          number = (val != null ? val : "").toString();
          if (number === "") {
            return '0';
          }
          return val;
        };
        goBackFromSend = function(){
          return store.customToken.add = false;
        };
        up = function(str){
          return (str != null ? str : "").toUpperCase();
        };
        networkType = ((ref$ = store.current.network) != null ? ref$ : "").toUpperCase();
        token = store.customToken.network.token;
        group = store.customToken.network.group;
        subtitle = up((ref$ = store.customToken.selectedNetwork) != null ? ref$ : "");
        displayNetwork = group + " " + up(subtitle);
        /* Contract address */
        contractAddressExists = function(address){
          var found;
          address = address.trim();
          console.log("check1", customTokens);
          found = find(function(it){
            var ref$;
            return up(it != null ? (ref$ = it[store.current.network]) != null ? ref$.address : void 8 : void 8) === up(address);
          })(
          filter(function(it){
            var ref$;
            return (it != null ? (ref$ = it[store.current.network]) != null ? ref$.group : void 8 : void 8) === group;
          })(
          allTokens));
          console.log("found", found);
          return found != null;
        };
        checkTokenUnique = function(token){
          var tokenNetwork, ref$, selectedNetwork, plugins, found;
          tokenNetwork = (ref$ = store.customToken.network) != null ? ref$.group : void 8;
          selectedNetwork = store.customToken.selectedNetwork;
          plugins = allTokens;
          found = find(function(it){
            var ref$;
            return it.token === token && up((ref$ = it[selectedNetwork]) != null ? ref$.group : void 8) === up(tokenNetwork);
          })(
          plugins);
          return found == null;
        };
        getParentWallet = function(token){
          var wallet;
          wallet = find(function(it){
            return it.token === token;
          })(
          allTokens);
          return wallet;
        };
        saveCustomToken = function(){
          var plugins, prototypeToken, foundPlugin, protoPlugin, ref$, symbol, decimals, selectedNetwork;
          if (!(contractAddress !== "" || symbol !== "" || symbolDisplay !== "" || decimals !== "")) {
            return setError("contractAddress", "Please fill all required fields");
          }
          store.customToken.isLoading = true;
          plugins = allTokens;
          prototypeToken = store.customToken.network.token;
          foundPlugin = find(function(it){
            return it.token === prototypeToken;
          })(
          plugins);
          protoPlugin = cloneDeep(foundPlugin);
          ref$ = store.customToken, symbol = ref$.symbol, decimals = ref$.decimals, selectedNetwork = ref$.selectedNetwork;
          return getContractSymbol(contractAddress, function(err){
            var $token, ref$, isUnique, mainnet, testnet, resultNetwork, parentWallet, ref1$, nickname, image, ref2$, res;
            if (err != null) {
              return setError("symbol", "Contract not found for chosen network");
            }
            $token = symbol.trim().replace(/\s/g, "_").toLowerCase() + "_" + selectedNetwork + ("_" + ((ref$ = store.customToken.network) != null ? ref$.group : void 8) + "_") + "_custom";
            /* Check if it is unique token */
            isUnique = checkTokenUnique($token);
            if (!isUnique) {
              console.log("token is not unique!");
              $token = $token + ":" + Date.now();
            }
            mainnet = protoPlugin != null ? protoPlugin.mainnet : void 8;
            if (mainnet != null) {
              delete mainnet.networks;
            }
            if (mainnet != null) {
              delete mainnet.FOREIGN_BRIDGE;
            }
            if (mainnet != null) {
              delete mainnet.FOREIGN_BRIDGE_TOKEN;
            }
            if (mainnet != null) {
              delete mainnet.HOME_BRIDGE;
            }
            if (mainnet != null) {
              delete mainnet.HOME_BRIDGE_TOKEN;
            }
            importAll$(mainnet, {
              decimals: decimals,
              address: contractAddress
            });
            testnet = protoPlugin != null ? protoPlugin.testnet : void 8;
            if (testnet != null) {
              delete testnet.networks;
            }
            if (testnet != null) {
              delete testnet.FOREIGN_BRIDGE;
            }
            if (testnet != null) {
              delete testnet.FOREIGN_BRIDGE_TOKEN;
            }
            if (testnet != null) {
              delete testnet.HOME_BRIDGE;
            }
            if (testnet != null) {
              delete testnet.HOME_BRIDGE_TOKEN;
            }
            importAll$(testnet, {
              decimals: decimals,
              address: contractAddress
            });
            resultNetwork = (function(){
              switch (false) {
              case up(store.customToken.selectedNetwork) !== "MAINNET":
                return {
                  mainnet: mainnet,
                  testnet: null
                };
              default:
                return {
                  mainnet: null,
                  testnet: testnet
                };
              }
            }());
            parentWallet = getParentWallet(protoPlugin != null ? (ref1$ = protoPlugin[store.current.network]) != null ? ref1$.txFeeIn : void 8 : void 8);
            nickname = parentWallet
              ? parentWallet.nickname
              : protoPlugin.nickname;
            image = (ref2$ = icons.customWalletIcon) != null
              ? ref2$
              : (ref2$ = parentWallet != null ? parentWallet.image : void 8) != null
                ? ref2$
                : protoPlugin.image;
            res = {
              token: $token,
              custom: true,
              enabled: true,
              color: "white",
              name: symbolDisplay,
              image: image,
              type: "coin",
              usdInfo: 0,
              nickname: symbol
            };
            importAll$(res, resultNetwork);
            return web3t.installQuick(res, function(err){
              var timer, clearTask;
              if (err != null) {
                console.error(err);
              }
              store.customToken.isLoading = false;
              store.justAddedToken = $token;
              timer = {};
              clearTask = function(){
                store.justAddedToken = null;
                return clearTimeout(timer.id);
              };
              timer.id = setTimeout(clearTask, 1500);
              if (err == null) {
                return close();
              }
            });
          });
        };
        decimalsChange = function(event){
          var value, valid;
          value = event.target.value;
          value = (+getNumber(value)).toString();
          valid = /^[0-9]+?$/.test(value);
          if (!valid) {
            return;
          }
          if (value > 36) {
            store.customToken.errors.decimals = "Decimals must be at least 0, and not over 36";
          } else {
            store.customToken.errors.decimals = "";
          }
          return store.customToken.decimals = value;
        };
        tokenSymbolChange = function(event){
          var $symbol, ref$, ref1$;
          $symbol = ((ref$ = event != null ? (ref1$ = event.target) != null ? ref1$.value : void 8 : void 8) != null ? ref$ : "").trimLeft();
          if ($symbol.match(/[^a-zA-Z0-9\-_\s]+/g)) {
            return store.customToken.errors.symbol = "Symbol may contain latin characters, numbers, '_', '-' signs";
          }
          if ($symbol.length > 30) {
            store.customToken.errors.symbol = "Symbol must be 30 characters or fewer";
          } else {
            store.customToken.errors.symbol = "";
          }
          store.customToken.symbolDisplay = $symbol;
          if (((ref$ = store.customToken.symbol) != null ? ref$ : "").trim().length === 0) {
            return store.customToken.symbol = $symbol;
          }
        };
        contractAddressChange = function(event){
          var address, ref$, ref1$, exists, errMsg;
          store.customToken.errors.contractAddress = "";
          address = ((ref$ = event != null ? (ref1$ = event.target) != null ? ref1$.value : void 8 : void 8) != null ? ref$ : "").trim();
          if (address.length > 0 && !/^(0x)?[0-9a-f]{40}$/i.test(address)) {
            store.customToken.errors.contractAddress = "Invalid address";
            return store.customToken.contractAddress = address;
          }
          store.customToken.contractAddress = address;
          if (address.length > 0) {
            exists = contractAddressExists(address);
            if (exists) {
              return store.customToken.errors.contractAddress = "Token has already been added";
            }
          }
          retrieveInfoByTokenAddress(address);
          errMsg = (function(){
            var ref$;
            switch (false) {
            case (ref$ = toString$.call(err).slice(8, -1)) !== 'Object' && ref$ !== 'Error':
              return (ref$ = err != null ? err.message : void 8) != null ? ref$ : "Error occured while fetching contract data";
            default:
              return (err != null ? err : "").toString();
            }
          }());
          if (err != null) {
            return store.customToken.errors.contractAddress = errMsg;
          }
        };
        getContractSymbol = function(address, cb){
          var ref$, web3Provider, web3, abi, contract;
          web3Provider = ((ref$ = store.customToken.network) != null ? ref$.api : void 8).web3Provider;
          web3 = new Web3(new Web3.providers.HttpProvider(web3Provider));
          web3.eth.providerUrl = web3Provider;
          abi = [
            {
              "constant": true,
              "inputs": [],
              "name": "decimals",
              "outputs": [{
                "name": "",
                "type": "uint8"
              }],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }, {
              "constant": true,
              "inputs": [],
              "name": "symbol",
              "outputs": [{
                "name": "",
                "type": "string"
              }],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ];
          contract = web3.eth.contract(abi).at(address);
          return contract.symbol(function(error, symbol){
            return cb(null, symbol);
          });
        };
        retrieveInfoByTokenAddress = function(address){
          var ref$, web3Provider, web3, abi, contract;
          if ((address != null ? address : "").length === 0) {
            return null;
          }
          clearErrors();
          store.customToken.isLoading = true;
          web3Provider = ((ref$ = store.customToken.network) != null ? ref$.api : void 8).web3Provider;
          if (web3Provider == null) {
            return cb("web3Provider is not found!");
          }
          web3 = new Web3(new Web3.providers.HttpProvider(web3Provider));
          web3.eth.providerUrl = web3Provider;
          abi = [
            {
              "constant": true,
              "inputs": [],
              "name": "decimals",
              "outputs": [{
                "name": "",
                "type": "uint8"
              }],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }, {
              "constant": true,
              "inputs": [],
              "name": "symbol",
              "outputs": [{
                "name": "",
                "type": "string"
              }],
              "payable": false,
              "stateMutability": "view",
              "type": "function"
            }
          ];
          contract = web3.eth.contract(abi).at(address);
          return contract.symbol(function(error, symbol){
            if (error != null) {
              setDefaultChosenTokenData();
              store.customToken.isLoading = false;
              return setError("symbol", error);
            }
            store.customToken.symbol = symbol;
            store.customToken.symbolDisplay = symbol;
            return contract.decimals(function(err, decimalsHex){
              var decimals;
              if (err != null) {
                store.customToken.isLoading = false;
                return setError("symbol", err);
              }
              if (err != null) {
                decimalsHex = "0";
              }
              decimals = new bignumber(decimalsHex + '').toFixed();
              store.customToken.decimals = decimals;
              return store.customToken.isLoading = false;
            });
          });
        };
        setError = function(initiator, error){
          var errMsg;
          if (store.customToken.errors[initiator] == null) {
            return;
          }
          if (error == null) {
            return;
          }
          errMsg = (function(){
            var ref$;
            switch (false) {
            case !(((ref$ = error != null ? error.message : void 8) != null
              ? ref$
              : error.toString()).indexOf("not a base 16 number") > -1):
              return "Failed to get symbol for current contract";
            case (ref$ = toString$.call(error).slice(8, -1)) !== 'Object' && ref$ !== 'Error':
              return (ref$ = error != null ? error.message : void 8) != null ? ref$ : "Contract not found for chosen network";
            default:
              return (error != null ? error : "").toString();
            }
          }());
          return store.customToken.errors[initiator] = errMsg;
        };
        runAsyncTask = function(name, task){
          var tt;
          console.log("run " + name + " task");
          tt = setTimeout(task, 1);
          if (isExiting) {
            return stopAsyncTask(name, tt);
          }
        };
        stopAsyncTask = function(name, taskId){
          return clearTimeout(taskId);
        };
        cancel = function(){
          store.customToken.add = false;
          return clearChosenTokenData();
        };
        hasContractError = ((ref$ = store.customToken.errors.contractAddress) != null ? ref$ : "").trim().length > 0;
        hasSymbolError = ((ref$ = store.customToken.errors.symbol) != null ? ref$ : "").trim().length > 0;
        hasDecimalsError = ((ref$ = store.customToken.errors.decimals) != null ? ref$ : "").trim().length > 0;
        hasNetworkError = ((ref$ = store.customToken.errors.network) != null ? ref$ : "").trim().length > 0;
        disabled = (function(){
          switch (false) {
          case !(store.customToken.decimals === 0 || store.customToken.symbol.trim().length === 0 || store.customToken.contractAddress.trim().length === 0):
            return true;
          case !(hasContractError || hasSymbolError || hasDecimalsError):
            return true;
          default:
            return false;
          }
        }());
        /* Network dropdown */
        networkDropdownClick = function(){
          return store.customToken.switchNetwork = !store.customToken.switchNetwork;
        };
        rotateClass = (function(){
          switch (false) {
          case store.customToken.switchNetwork !== true:
            return 'rotate';
          default:
            return "";
          }
        }());
        /*
        * available-networks  <Array>[] Network> - Array of networks.
        * Network: { api, group }
        */
        availableNetworks = map(function(it){
          var ref$, ref1$;
          return {
            token: it != null ? it.token : void 8,
            api: it != null ? (ref$ = it[store.current.network]) != null ? ref$.api : void 8 : void 8,
            group: it != null ? (ref1$ = it[store.current.network]) != null ? ref1$.group : void 8 : void 8
          };
        })(
        uniqueBy(function(it){
          var ref$, ref1$;
          return it != null ? (ref$ = it[store.current.network]) != null ? (ref1$ = ref$.api) != null ? ref1$.web3Provider : void 8 : void 8 : void 8;
        })(
        filter(function(it){
          var ref$;
          return (it != null ? (ref$ = it[store.current.network]) != null ? ref$.disabled : void 8 : void 8) !== true;
        })(
        wallets)));
        changeNetwork = function(token, network){
          return function(){
            var foundWallet;
            if (token == null || network == null) {
              return;
            }
            store.customToken.selectedNetwork = network;
            foundWallet = getWallet(token);
            if ((foundWallet != null ? foundWallet[network] : void 8) == null) {
              return store.customToken.errors.network = "No configuration found for chosen " + network + " network";
            }
            store.customToken.network = (import$({
              token: token
            }, foundWallet != null ? foundWallet[network] : void 8));
            clearChosenTokenData();
            return clearDefaultErrors();
          };
        };
        setDefaultChosenTokenData = function(){
          store.customToken.decimals = 0;
          store.customToken.symbol = "";
          return store.customToken.symbolDisplay = "";
        };
        clearChosenTokenData = function(){
          store.customToken.decimals = 0;
          store.customToken.symbol = "";
          store.customToken.symbolDisplay = "";
          return store.customToken.contractAddress = "";
        };
        clearErrors = function(){
          store.customToken.errors.contractAddress = "";
          store.customToken.errors.symbol = "";
          store.customToken.errors.decimals = "";
          return store.customToken.errors.network = "";
        };
        clearDefaultErrors = function(){
          store.customToken.errors.contractAddress = "";
          store.customToken.errors.decimals = "";
          return store.customToken.errors.network = "";
        };
        createNetworkPosition = function(data){
          var api, group, token, apiUrl, url, web3Provider, provider, name, positionStyle, ref$, ref1$, getButtonStyle, buttonStyleMainnet, buttonStyleTestnet, changeMainnetNetwork, changeTestnetNetwork, children;
          api = data.api, group = data.group, token = data.token;
          apiUrl = api.apiUrl, url = api.url, web3Provider = api.web3Provider, provider = api.provider;
          name = group;
          positionStyle = {
            color: up((ref$ = store.customToken.network) != null ? (ref1$ = ref$.api) != null ? ref1$.provider : void 8 : void 8) === up(provider) ? '#3cd5af' : '',
            padding: "10px"
          };
          getButtonStyle = function(networkType){
            var ref$, ref1$;
            switch (false) {
            case !(up((ref$ = store.customToken.network) != null ? (ref1$ = ref$.api) != null ? ref1$.provider : void 8 : void 8) === up(provider) && up(selectedNetwork) === up(networkType)):
              return {
                color: '#3cd5af'
              };
            default:
              return {
                color: "white"
              };
            }
          };
          buttonStyleMainnet = getButtonStyle("mainnet");
          buttonStyleTestnet = getButtonStyle("testnet");
          changeMainnetNetwork = changeNetwork(token, "mainnet");
          changeTestnetNetwork = changeNetwork(token, "testnet");
          /* Render */
          return react.createElement('div', {
            key: "network-" + provider,
            style: positionStyle,
            className: 'table-row-menu'
          }, children = react.createElement('div', {
            style: styles.folderMenu,
            className: 'col folder-menu'
          }, children = [
            react.createElement('div', {
              style: styles.folderMenuDiv,
              className: 'network-item-title'
            }, ' ' + name), react.createElement('span', {
              className: 'networks'
            }, children = [
              react.createElement('span', {
                onClick: changeMainnetNetwork,
                style: buttonStyleMainnet,
                className: 'network-item-button mainnet-network'
              }, ' Mainnet'), react.createElement('span', {
                onClick: changeTestnetNetwork,
                style: buttonStyleTestnet,
                className: 'network-item-button testnet-network'
              }, ' Testnet')
            ])
          ]));
        };
        /* Render */
        return react.createElement('div', {
          className: 'custom-token-content custom-token-content254250696'
        }, children = react.createElement('div', {
          style: contentBodyStyle,
          className: 'content-body'
        }, children = [
          react.createElement('form', {}, children = [
            formGroup('sender', "Network", iconStyle, function(){
              var children;
              return react.createElement('div', {}, children = [
                react.createElement('div', {
                  style: styles.inputNetwork,
                  onClick: networkDropdownClick,
                  className: 'bold default-network-input'
                }, children = [
                  react.createElement('div', {
                    className: 'change-network-screen'
                  }, ' ' + displayNetwork), react.createElement('div', {
                    style: styles.navigationButton,
                    className: 'button navigation-button right'
                  }, children = react.createElement('img', {
                    src: icons.arrowDown + "",
                    style: styles.imgIconStyle,
                    className: rotateClass + " icon-svg"
                  })), store.customToken.switchNetwork ? react.createElement('div', {
                    style: styles.filterBody,
                    className: 'switch-menu'
                  }, children = react.createElement('div', {
                    className: 'middle'
                  }, children = map(createNetworkPosition)(
                  availableNetworks))) : void 8
                ]), hasNetworkError ? react.createElement('div', {
                  className: 'control-label error text-left'
                }, ' ' + store.customToken.errors.network) : void 8
              ]);
            }), formGroup('sender', "Token Contract Address", iconStyle, function(){
              var children;
              return react.createElement('div', {
                className: 'address'
              }, children = [
                react.createElement('input', {
                  type: 'text',
                  style: inputStyle,
                  onChange: contractAddressChange,
                  value: contractAddress + "",
                  id: "contract-address"
                }), hasContractError ? react.createElement('div', {
                  className: 'control-label error text-left'
                }, ' ' + store.customToken.errors.contractAddress) : void 8
              ]);
            }), formGroup('receiver', "Token symbol", iconStyle, function(){
              var children;
              return react.createElement('div', {}, children = [
                react.createElement('input', {
                  type: 'text',
                  disabled: hasSymbolError,
                  style: inputStyle,
                  onChange: tokenSymbolChange,
                  value: symbolDisplay + "",
                  id: "symbol"
                }), hasSymbolError ? react.createElement('div', {
                  className: 'control-label error text-left'
                }, ' ' + store.customToken.errors.symbol) : void 8
              ]);
            }), formGroup('send-amount', "Token Decimals", iconStyle, function(){
              var children;
              return react.createElement('div', {}, children = react.createElement('div', {
                className: 'input-wrapper'
              }, children = [
                react.createElement('input', {
                  type: 'number',
                  disabled: hasSymbolError,
                  style: inputStyle,
                  placeholder: "0",
                  onChange: decimalsChange,
                  value: decimals + "",
                  id: "decimals"
                }), hasDecimalsError ? react.createElement('div', {
                  className: 'control-label error text-left'
                }, ' ' + store.customToken.errors.decimals) : void 8
              ]));
            })
          ]), react.createElement('div', {
            className: 'button-container'
          }, children = react.createElement('div', {
            className: 'buttons'
          }, children = [
            button({
              store: store,
              text: "Add token",
              onClick: saveCustomToken,
              type: 'primary',
              noIcon: true,
              makeDisabled: disabled,
              id: "send-confirm"
            }), button({
              store: store,
              text: 'cancel',
              onClick: cancel,
              icon: 'close2',
              id: "send-cancel"
            })
          ]))
        ]));
      });
    });
  };
  module.exports = customToken;
  $styles = function(style){
    return {
      inputNetwork: {
        cursor: "pointer",
        minHeight: "36px",
        position: "relative",
        display: "flex",
        alignItems: "center",
        borderBottom: "0.1px solid rgb(238, 238, 238, 0.12)"
      },
      imgIconStyle: typeof imgIconStyle != 'undefined' && imgIconStyle !== null
        ? imgIconStyle
        : {
          width: "13px",
          height: "8px",
          marginLeft: "0",
          marginTop: "4px",
          filter: "grayscale(100%) brightness(40%) sepia(100%) hue-rotate(14deg) saturate(790%) contrast(1.5)"
        },
      filterBody: {
        border: "1px solid " + style.app.border,
        background: style.app.accountBg,
        right: "-1px",
        top: "38px",
        width: "100%",
        display: "inline-grid",
        zIndex: 3,
        boxShadow: "0px 13px 20px 0px rgba(0, 0, 0, 0.35)",
        borderRadius: "0 0 var(--border-btn) var(--border-btn)",
        position: "absolute"
      },
      folderMenu: {
        width: "100%"
      },
      folderMenuDiv: {
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden",
        fontSize: "12px",
        textTransform: "uppercase",
        letterSpacing: "2px",
        opacity: ".7",
        display: "inline-block",
        marginRight: "10px",
        marginBottom: "-5px"
      },
      navigationButton: {
        position: "absolute",
        right: 0,
        top: "5px"
      }
    };
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function importAll$(obj, src){
    for (var key in src) obj[key] = src[key];
    return obj;
  }
}).call(this);
