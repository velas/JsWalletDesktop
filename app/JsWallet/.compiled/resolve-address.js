// Generated by LiveScript 1.6.0
(function(){
  var web3, ref$, map, split, find, head, filter, isValidAddress;
  web3 = require('./web3.ls');
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, find = ref$.find, head = ref$.head, filter = ref$.filter;
  isValidAddress = require('./api.ls').isValidAddress;
  module.exports = function(config, cb){
    var store, network, coin, address, $token, $network, chosenNetwork, wallet;
    store = config.store, network = config.network, coin = config.coin, address = config.address;
    if (address.trim() === "") {
      return cb("Address not found");
    }
    $token = coin.token;
    $network = network;
    chosenNetwork = store.current.send.chosenNetwork;
    if (store.current.send.isSwap === true && chosenNetwork.referTo != null) {
      $token = chosenNetwork.referTo;
      wallet = find(function(it){
        return it.coin.token === $token;
      })(
      store.current.account.wallets);
      if (wallet == null) {
        return cb("Wallet for token " + chosenNetwork.name + " not found!");
      }
      $network = wallet.network;
    }
    return isValidAddress({
      network: $network,
      address: address,
      token: $token
    }, function(err, isValid){
      var isName;
      if (isValid) {
        return cb(null, address);
      }
      if (err.indexOf("method is not supported") === -1) {
        if (err != null) {
          return cb(err);
        }
      }
      isName = address.indexOf('.') !== -1 || address.indexOf('@') !== -1;
      if (!isName) {
        return cb(null, address);
      }
      return cb("Address is not valid");
    });
  };
}).call(this);
