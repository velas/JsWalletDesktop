// Generated by LiveScript 1.6.0
(function(){
  var newAccount, refreshWallet, ref$, toJS, transaction, map, pairsToObj, find, findIndex, take, drop, filter, groupBy, sortBy, objToPairs, keys, mirror, applyTransactions, scamWarning, seedmem, refreshWaletTxs, setAccount, setCurrentWallet, refreshAccount, refreshTxs, backgroundRefreshAccount, out$ = typeof exports != 'undefined' && exports || this;
  newAccount = require('./new-account.ls');
  refreshWallet = require('./refresh-wallet.ls');
  ref$ = require('mobx'), toJS = ref$.toJS, transaction = ref$.transaction;
  ref$ = require('prelude-ls'), map = ref$.map, pairsToObj = ref$.pairsToObj, find = ref$.find, findIndex = ref$.findIndex, take = ref$.take, drop = ref$.drop, filter = ref$.filter, groupBy = ref$.groupBy, sortBy = ref$.sortBy, objToPairs = ref$.objToPairs, keys = ref$.keys;
  mirror = require('./mirror.ls');
  applyTransactions = require('./apply-transactions.ls');
  scamWarning = require('./scam-warning.ls');
  seedmem = require('./seed.ls');
  refreshWaletTxs = require('./refresh-txs.ls');
  out$.setAccount = setAccount = function(web3, store, cb){
    return newAccount(store, seedmem.mnemonic, function(err, account){
      if (err != null) {
        return cb(err);
      }
      store.current.account = account;
      mirror.accountAddresses = pairsToObj(
      map(function(it){
        return [it.coin.token, it.address];
      })(
      account.wallets));
      return cb(null);
    });
  };
  setCurrentWallet = function(){
    var groupIndex, walletIndex, walletsGroups, groupsWallets, groupWallets, ref$, currentWallet;
    groupIndex = store.current.groupIndex;
    walletIndex = store.current.walletIndex;
    if (store.current.account != null) {
      walletsGroups = groupBy(function(it){
        return it.network.group;
      })(
      filter(function(arg$){
        var coin, network;
        coin = arg$.coin, network = arg$.network;
        return (coin.name + coin.token).toLowerCase().indexOf(store.current.search.toLowerCase()) !== -1 && network.disabled !== true;
      })(
      filter(function(it){
        return it != null;
      })(
      store.current.account.wallets)));
      groupsWallets = map(function(it){
        return it[1];
      })(
      objToPairs(
      walletsGroups));
      groupWallets = (ref$ = groupsWallets[groupIndex]) != null
        ? ref$
        : [];
      currentWallet = find(function(it){
        return groupWallets.indexOf(it) === walletIndex;
      })(
      groupWallets);
      if (currentWallet != null) {
        return store.current.wallet = currentWallet;
      }
    }
  };
  out$.refreshAccount = refreshAccount = curry$(function(web3, store, cb){
    scamWarning();
    if (store.forceReload !== true) {
      return cb(null);
    }
    return setAccount(web3, store, function(err){
      var accountName;
      if (err != null) {
        return cb(err);
      }
      setCurrentWallet();
      store.current.account.accountName = "Anonymous";
      accountName = store.current.account.accountName;
      if (accountName !== "Anonymous") {
        store.current.nickname = "";
      }
      if (accountName !== "Anonymous") {
        store.current.nicknamefull = accountName;
      }
      return refreshWallet(web3, store, function(err){
        return cb(null);
      });
    });
  });
  refreshTxs = curry$(function(web3, store, cb){
    return refreshWaletTxs(web3, store, function(){});
  });
  out$.backgroundRefreshAccount = backgroundRefreshAccount = function(web3, store, cb){
    var bgStore;
    store.current.refreshing = true;
    bgStore = toJS(store);
    return refreshAccount(web3, store, function(err){
      store.current.refreshing = false;
      if (err != null) {
        return cb(err);
      }
      store.forceReload = false;
      store.forceReload = false;
      transaction(function(){
        var walletIndex, wallet;
        walletIndex = (function(){
          var ref$, ref1$;
          switch (false) {
          case ((ref$ = store.current) != null ? (ref1$ = ref$.filter) != null ? ref1$.token : void 8 : void 8) == null:
            return findIndex(function(it){
              var ref$, ref1$;
              return it.coin.token === ((ref$ = store.current) != null ? (ref1$ = ref$.filter) != null ? ref1$.token : void 8 : void 8);
            })(
            store.current.account.wallets);
          default:
            return store.current.walletIndex;
          }
        }());
        if (walletIndex == null) {
          walletIndex = 0;
        }
        wallet = store.current.account.wallets[walletIndex];
        if (wallet == null) {
          return cb(null);
        }
        store.current.filter.filterTxsTypes = ['IN', 'OUT'];
        store.current.filter = {
          token: wallet.coin.token
        };
        return refreshTxs(web3, store, function(){
          applyTransactions(store);
          return cb(null);
        });
      });
      return cb(null);
    });
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
