// Generated by LiveScript 1.6.0
(function(){
  var ref$, filter, sortBy, reverse, map, getInstallList, installPlugin, window, localStorage, gobyte, common, baseArray, legacyTokens, legacyArr, legacyIsHidden, checkAndInstall, decideToShowOrIgnoreLegacyTokens, getCoins, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  ref$ = require('prelude-ls'), filter = ref$.filter, sortBy = ref$.sortBy, reverse = ref$.reverse, map = ref$.map;
  ref$ = require('./install-plugin.ls'), getInstallList = ref$.getInstallList, installPlugin = ref$.installPlugin;
  window = require('./browser/window.ls');
  localStorage = require('localStorage');
  gobyte = require('../web3t/plugins/gobyte-coin.js');
  out$.common = common = function(store){
    var vlx2, btc, vlx_native, eth, vlx_evm, coins;
    vlx2 = require('../web3t/plugins/vlx2-coin.js');
    btc = require('../web3t/plugins/btc-coin.js');
    vlx_native = require('../web3t/plugins/sol-coin.js');
    eth = require('../web3t/plugins/eth-coin.js');
    vlx_evm = require('../web3t/plugins/vlx-coin.js');
    coins = [vlx_native, vlx_evm, vlx2, btc, eth];
    if (store.urlParams.gbx != null) {
      coins.push(gobyte);
    }
    return coins;
  };
  baseArray = ['vlx_native', 'vlx_evm', 'vlx2', 'btc', 'eth'];
  legacyTokens = [require('../web3t/plugins/eth-legacy-coin.js'), require('../web3t/plugins/usdt_erc20_legacy-coin.json'), require('../web3t/plugins/vlx2-coin.js')];
  legacyArr = ['vlx2', 'vlx_evm_legacy', 'usdt_erc20_legacy', 'eth_legacy'];
  legacyIsHidden = function(name){
    var res;
    name = name != null ? name : "";
    res = localStorage.getItem("plugin-" + name);
    return res != null && res === "";
  };
  checkAndInstall = function(arg$, cb){
    var plugin, rest;
    plugin = arg$[0], rest = slice$.call(arg$, 1);
    if (plugin == null) {
      return cb(null);
    }
    return installPlugin(plugin, function(err){
      if (err != null) {
        console.error;
      }
      return checkAndInstall(rest, cb);
    });
  };
  decideToShowOrIgnoreLegacyTokens = function(store, items, cb){
    var installedItems, legTokens;
    installedItems = map(function(it){
      return it.token;
    })(
    items);
    /* Check if legacy tokens were installed or legacy tokens were not hidden by user, so do not make balance check for them */
    legTokens = filter(function(it){
      return !legacyIsHidden(it.token);
    })(
    filter(function(it){
      return !in$(it != null ? it.token : void 8, baseArray);
    })(
    filter(function(it){
      return !in$(it != null ? it.token : void 8, installedItems);
    })(
    legacyTokens)));
    /* Check not installed tokens and install them */
    return checkAndInstall(legTokens, function(err){
      if (err != null) {
        return cb(err);
      }
      return cb(null);
    });
  };
  out$.getCoins = getCoins = function(store, cb){
    var network, base;
    network = store.current.network;
    base = filter(function(it){
      var ref$;
      return it[network] != null && it.type === 'coin' && it.enabled === true && !(((ref$ = it[network]) != null ? ref$.disabled : void 8) === true);
    })(
    filter(function(it){
      return it != null;
    })(
    common(store)));
    return getInstallList(function(err, items){
      if (err != null) {
        return cb(err);
      }
      /* here we need to check legacy tokens if it is first load */
      return decideToShowOrIgnoreLegacyTokens(store, items, function(err, res){
        var installed, all;
        if (err != null) {
          return cb(err);
        }
        installed = filter(function(it){
          return !in$(it.token, baseArray);
        })(
        filter(function(it){
          return it.enabled !== false;
        })(
        filter(function(it){
          return it.type === 'coin';
        })(
        items)));
        all = base.concat(installed);
        return cb(null, all);
      });
    });
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
