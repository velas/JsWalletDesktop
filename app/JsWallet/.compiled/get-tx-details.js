// Generated by LiveScript 1.6.0
(function(){
  var addresses, ref$, map, filter, objToPairs, find, roundHuman, roundNumber, times, minus, div, plus;
  addresses = require('./velas/addresses.ls');
  ref$ = require('prelude-ls'), map = ref$.map, filter = ref$.filter, objToPairs = ref$.objToPairs, find = ref$.find;
  roundHuman = require('./round-human.ls');
  roundNumber = require('./round-number.ls');
  ref$ = require('./math.ls'), times = ref$.times, minus = ref$.minus, div = ref$.div, plus = ref$.plus;
  module.exports = function(store, web3t){
    var send, decimalsConfig, isData, ref$, network, contract, wallet, walletGroup, swap, tokenDisplay, ref1$, amountSend, funtype, receiverToken, walletReceiver, receiverGroup, homeFeePercent, homeFee, amountReceive, textPartsContract, textPartsRegular, textPartsSwap, text;
    send = store.current.send;
    decimalsConfig = send.network.decimals;
    isData = ((ref$ = send.data) != null ? ref$ : "").length > 0;
    network = store.current.network;
    contract = function(it){
      return it != null
        ? it
        : send.to;
    }(
    map(function(it){
      return it[0];
    })(
    filter(function(it){
      return it[1] === send.to;
    })(
    objToPairs(
    addresses[network]))));
    wallet = store.current.send.wallet;
    walletGroup = (ref$ = wallet.network) != null ? ref$.group : void 8;
    swap = store.current.send.swap;
    tokenDisplay = ((ref1$ = wallet.coin.nickname) != null
      ? ref1$
      : send.coin.token).toUpperCase();
    amountSend = roundHuman(send.amountSend, {
      decimals: decimalsConfig
    });
    funtype = (function(){
      switch (false) {
      case swap == null:
        receiverToken = store.current.send.chosenNetwork.referTo;
        walletReceiver = find(function(it){
          return it.coin.token === receiverToken;
        })(
        store.current.account.wallets);
        receiverGroup = (function(){
          var ref$;
          switch (false) {
          case receiverToken !== 'vlx_native':
            return "Velas Native";
          case ((ref$ = walletReceiver != null ? (ref$ = walletReceiver.network) != null ? ref$.group : void 8 : void 8) != null ? ref$ : "").toLowerCase() !== 'velas':
            return "Velas EVM";
          default:
            return walletReceiver != null ? (ref$ = walletReceiver.network) != null ? ref$.group : void 8 : void 8;
          }
        }());
        homeFeePercent = store.current.send.homeFeePercent;
        homeFee = (function(){
          switch (false) {
          case store.current.send.feeMode !== "fixed":
            return store.current.send.homeFeePercent;
          default:
            return times(store.current.send.amountSend, store.current.send.homeFeePercent);
          }
        }());
        amountReceive = roundHuman(minus(send.amountSend, homeFee), {
          decimals: decimalsConfig
        });
        return "Please confirm that you would like to send " + amountSend + " " + tokenDisplay + " from " + walletGroup + " to receive " + amountReceive + " " + tokenDisplay + " on " + receiverGroup + ".";
      case !(+send.amountSend > 0):
        return "Send " + amountSend + " " + tokenDisplay + " to " + contract + " contract.";
      default:
        return "Execute the " + contract + " contract.";
      }
    }());
    textPartsContract = [
      funtype, "You are allowed to spend your resources on execution " + roundNumber(send.amountSendFee, {
        decimals: decimalsConfig
      }) + " " + tokenDisplay + "."
    ];
    textPartsRegular = [
      "Send " + amountSend + " " + tokenDisplay + " to " + send.to, "You are allowed to spend your resources on execution " + roundNumber(send.amountSendFee, {
        decimals: decimalsConfig
      }) + " " + tokenDisplay + "."
    ];
    textPartsSwap = [
      "Swap " + amountSend + " " + tokenDisplay + " to " + send.to, "You are allowed to spend your resources on execution " + roundNumber(send.amountSendFee, {
        decimals: decimalsConfig
      }) + " " + tokenDisplay + "."
    ];
    text = (function(){
      switch (false) {
      case !isData:
        return textPartsContract;
      case swap !== true:
        return textPartsSwap;
      default:
        return textPartsRegular;
      }
    }());
    return text;
  };
}).call(this);
