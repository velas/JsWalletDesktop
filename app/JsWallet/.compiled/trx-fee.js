// Generated by LiveScript 1.6.0
(function(){
  var react, getPrimaryInfo, getLang, icon, icons, sendFuncs, parseNum, CurrencyInput, DECIMAL_SEPARATOR, trxFee;
  react = require('react');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('../pages/icon.ls');
  icons = require('../icons.ls');
  sendFuncs = require('../send-funcs.ls');
  parseNum = require('../numbers.js').parseNum;
  CurrencyInput = require('react-currency-input-field')['default'];
  DECIMAL_SEPARATOR = '.';
  trxFee = function(arg$){
    var store, web3t, wallet, feeToken, style, lang, send, activeCheap, activeCustom, activeAuto, activeClass, decimalsLimit, ref$, ref1$, chooseCheap, chooseCustom, chooseAuto, hasSendError, disabledClass, customIsDisabled, selectCustom, getNumber, valueWithoutDecimalWithDot, onChangeInternal, feeCurrency, isCustom, tokenDisplay, borderStyle, text, inputStyle, customFeeValue, cheapOption, customOption, autoOption, children;
    store = arg$.store, web3t = arg$.web3t, wallet = arg$.wallet, feeToken = arg$.feeToken;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    send = store.current.send;
    activeCheap = send.feeType === 'cheap';
    activeCustom = send.feeType === 'custom';
    activeAuto = send.feeType === 'auto';
    activeClass = function(feeType){
      if (feeType !== send.feeType) {
        return null;
      }
      return 'active';
    };
    decimalsLimit = (ref$ = wallet != null ? (ref1$ = wallet.network) != null ? ref1$.decimals : void 8 : void 8) != null ? ref$ : 4;
    ref$ = sendFuncs(store, web3t), chooseCheap = ref$.chooseCheap, chooseCustom = ref$.chooseCustom, chooseAuto = ref$.chooseAuto, hasSendError = ref$.hasSendError;
    disabledClass = hasSendError() ? "disabled" : "";
    customIsDisabled = wallet.coin.token === 'vlx_native';
    selectCustom = function(){
      if (hasSendError() || customIsDisabled) {
        return;
      }
      return chooseCustom(send.amountSendFee);
    };
    getNumber = function(val){
      var number;
      number = (val != null ? val : "").toString();
      if (number === "") {
        return '0';
      }
      return val;
    };
    valueWithoutDecimalWithDot = function(value){
      var res;
      value = (value != null ? value : "").toString();
      res = value.split(DECIMAL_SEPARATOR);
      return value.indexOf(DECIMAL_SEPARATOR) > -1 && (res.length > 1 && res[1] === "");
    };
    onChangeInternal = function(it){
      var value, result, groups, decimals, balance, res, parsedLeft, hasDot, str_val, $value, left;
      value = it;
      value = getNumber(value);
      result = value.toString().split(DECIMAL_SEPARATOR);
      groups = result[0];
      decimals = result[1];
      if (+groups > Math.pow(10, 15)) {
        return;
      }
      if (decimals != null && decimals.length > decimalsLimit) {
        value = roundNumber(value, {
          decimals: decimalsLimit
        });
      }
      balance = +wallet.balance;
      res = (value != null ? value : "0").toString().split(DECIMAL_SEPARATOR);
      parsedLeft = parseNum(res != null ? res[0] : void 8);
      hasDot = res.length > 1;
      if (value == null || value === "") {
        value = "0";
      }
      str_val = (value != null ? value : "0").toString();
      $value = (function(){
        var ref$;
        switch (false) {
        case it !== "":
          return 0;
        case !valueWithoutDecimalWithDot(value):
          left = res[0];
          return parseNum(left) + DECIMAL_SEPARATOR;
        case !(hasDot && parsedLeft === parseNum(it)):
          return parsedLeft + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        case !(hasDot && str_val.length !== (+str_val).toString().length && +value === +str_val):
          return parseNum(res[0]) + DECIMAL_SEPARATOR + ((ref$ = res != null ? res[1] : void 8) != null ? ref$ : "");
        default:
          return parseNum(value);
        }
      }());
      value = $value;
      return chooseCustom(value);
    };
    feeCurrency = (ref$ = wallet.network.txFeeIn) != null
      ? ref$
      : ((ref$ = wallet.coin.nickname) != null ? ref$ : "").toUpperCase();
    isCustom = (wallet != null ? (ref$ = wallet.coin) != null ? ref$.custom : void 8 : void 8) === true;
    tokenDisplay = feeToken.toUpperCase();
    borderStyle = {
      border: "1px solid " + style.app.border
    };
    text = {
      color: style.app.icon + ""
    };
    inputStyle = {
      background: style.app.input,
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    customFeeValue = function(){
      if (activeCustom) {
        return send.feeCustomAmount;
      } else {
        return send.amountSendFee;
      }
    };
    cheapOption = function(){
      var children;
      if (!send.amountSendFeeOptions.cheap) {
        return null;
      }
      if (send.amountSendFeeOptions.cheap > send.amountSendFeeOptions.auto) {
        return null;
      }
      return react.createElement('td', {
        onClick: chooseCheap,
        className: activeClass('cheap') + ""
      }, children = [
        react.createElement('div', {
          className: 'field type'
        }, ' ' + lang.cheap), react.createElement('div', {
          className: 'field coin'
        }, ' ' + (send.amountSendFeeOptions.cheap ? send.amountSendFeeOptions.cheap + " " + tokenDisplay : ""))
      ]);
    };
    customOption = function(){
      var disabled, disabledClass, children;
      disabled = (function(){
        switch (false) {
        case !customIsDisabled:
          return true;
        default:
          return false;
        }
      }());
      disabledClass = (function(){
        switch (false) {
        case !customIsDisabled:
          return "disabled";
        default:
          return "";
        }
      }());
      return react.createElement('td', {
        onClick: selectCustom,
        disabled: disabled,
        className: "tx-fee-mode " + activeClass('custom') + " " + disabledClass
      }, children = [
        react.createElement('div', {
          className: 'field type'
        }, ' ' + lang.custom), react.createElement('div', {
          className: 'field coin'
        }, ' ' + customFeeValue() + " " + tokenDisplay)
      ]);
    };
    autoOption = function(){
      var children;
      return react.createElement('td', {
        onClick: chooseAuto,
        className: "tx-fee-mode " + activeClass('auto')
      }, children = [
        react.createElement('div', {
          className: 'field type'
        }, ' ' + lang.auto), react.createElement('div', {
          className: 'field coin'
        }, ' ' + (send.amountSendFeeOptions.auto ? send.amountSendFeeOptions.auto + " " + tokenDisplay : ""))
      ]);
    };
    return react.createElement('div', {
      className: disabledClass + " trx-fee trx-fee-1294478930"
    }, children = [
      react.createElement('label', {
        style: text
      }, ' Transaction Fee'), react.createElement('table', {
        style: borderStyle,
        className: 'fee'
      }, children = react.createElement('tbody', {}, children = react.createElement('tr', {}, children = [cheapOption(), customOption(), autoOption()]))), store.current.send.feeType === 'custom' ? react.createElement(CurrencyInput, {
        key: "tx-fee-input",
        style: inputStyle,
        defaultValue: "0",
        allowDecimals: true,
        value: send.feeCustomAmount + "",
        decimalsLimit: decimalsLimit,
        label: "Send",
        decimalSeparator: DECIMAL_SEPARATOR,
        groupSeparator: ",",
        onValueChange: onChangeInternal,
        className: "textfield tx-fee"
      }) : void 8
    ]);
  };
  module.exports = trxFee;
}).call(this);
