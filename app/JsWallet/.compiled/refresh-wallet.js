// Generated by LiveScript 1.6.0
(function(){
  var calcWallet, getMarketCoinsHistory, loadRates, ref$, run, task, div, times, find, velasWeb3, getBalance, nativeSubscriptions, subscribeToVelasAccount, refreshWallet;
  calcWallet = require('./calc-wallet.ls');
  getMarketCoinsHistory = require('./get-market-coins-history.ls');
  loadRates = require('./load-rates.ls');
  ref$ = require('./workflow.ls'), run = ref$.run, task = ref$.task;
  ref$ = require('./math.ls'), div = ref$.div, times = ref$.times;
  find = require('prelude-ls').find;
  velasWeb3 = require('./../web3t/providers/solana/index.cjs');
  getBalance = require('./api.ls').getBalance;
  nativeSubscriptions = {};
  subscribeToVelasAccount = function(store, web3t){
    var walletNative, walletEvm, saveKey, currentNetwork, rates, publicKey, callback, commitment, id, err;
    walletNative = find(function(it){
      return it.coin.token === 'vlx_native';
    })(
    store.current.account.wallets);
    walletEvm = find(function(it){
      return it.coin.token === 'vlx_evm';
    })(
    store.current.account.wallets);
    saveKey = store.current.network + "_" + walletNative.publicKey;
    currentNetwork = store.current.network;
    if (nativeSubscriptions[saveKey + ""] != null) {
      return;
    }
    rates = store.rates;
    try {
      publicKey = new velasWeb3.PublicKey(walletNative.publicKey);
      callback = function(updatedAccount){
        var lamports, currentNetwork2, walletNative2, usdRate;
        lamports = updatedAccount.lamportsStr || updatedAccount.lamports;
        if (lamports == null) {
          return;
        }
        currentNetwork2 = store.current.network;
        walletNative2 = find(function(it){
          return it.coin.token === 'vlx_native';
        })(
        store.current.account.wallets);
        if (walletNative.address !== walletNative2.address || currentNetwork !== currentNetwork2) {
          return;
        }
        walletNative2.balance = div(lamports, Math.pow(10, 9));
        usdRate = rates[walletNative2.coin.token];
        if (usdRate) {
          walletNative2.balanceUsd = times(walletNative2.balance, usdRate);
        }
        return getBalance({
          address: walletEvm.address,
          network: walletEvm.network,
          token: 'vlx_evm',
          account: {
            address: walletEvm.address,
            privateKey: walletEvm.privateKey
          }
        }, function(err, balance){
          var walletEvm2, usdRate;
          if (balance != null && !isNaN(balance)) {
            walletEvm2 = find(function(it){
              return it.coin.token === 'vlx_evm';
            })(
            store.current.account.wallets);
            walletEvm2.balance = balance;
            usdRate = rates[walletEvm2.coin.token];
            if (usdRate) {
              return walletEvm2.balanceUsd = times(walletEvm2.balance, usdRate);
            }
          }
        });
      };
      commitment = 'finalized';
      id = web3t.velas.NativeStaking.connection.onAccountChange(publicKey, callback, commitment);
      if (id != null) {
        return nativeSubscriptions[saveKey + ""] = id;
      }
    } catch (e$) {
      err = e$;
      return console.log("ws onAccountChange err: ", err);
    }
  };
  refreshWallet = function(web3, store, cb){
    var task1, task3, task4;
    if (store.forceReload !== true) {
      return cb(null);
    }
    store.current.refreshing = true;
    task1 = task(function(cb){
      return loadRates(store, cb);
    });
    task3 = task(function(cb){
      return calcWallet(store, cb);
    });
    task4 = task(function(cb){
      return getMarketCoinsHistory(store, cb);
    });
    return run([task1, task3]).then(function(){
      subscribeToVelasAccount(store, web3);
      store.current.refreshing = false;
      store.forceReload = false;
      return cb(null);
    });
  };
  module.exports = refreshWallet;
}).call(this);
