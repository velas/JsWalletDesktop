// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, ResponsivePie, linearGradientDef, map, sortBy, each, ethToVlx, getPrimaryInfo, getStake, getColor, getFromOrTo, buildData;
  react = require('react');
  ref$ = require('nivo'), ResponsivePie = ref$.ResponsivePie, linearGradientDef = ref$.linearGradientDef;
  ref$ = require('prelude-ls'), map = ref$.map, sortBy = ref$.sortBy, each = ref$.each;
  ethToVlx = require('../../web3t/addresses.js').ethToVlx;
  getPrimaryInfo = require('../get-primary-info.ls');
  getStake = function(it){
    switch (false) {
    case it.stakers !== '..':
      return 0;
    default:
      return +it.stakers;
    }
  };
  getColor = function(store, items){
    return function(it){
      var style, res;
      style = getPrimaryInfo(store);
      return res = (function(){
        switch (false) {
        case it.type !== 'IN':
          return style.app.primary2;
        case it.type !== 'OUT':
          return style.app.primary1;
        default:
          return style.app.wallet;
        }
      }());
    };
  };
  getFromOrTo = function(it){
    switch (false) {
    case it.type !== 'IN':
      return "FROM " + it.from;
    case it.type !== 'OUT':
      return "TO " + it.to;
    default:
      return "NOTHING";
    }
  };
  buildData = curry$(function(store, items){
    var in_, out_;
    if (items.length === 0) {
      return [{
        "id": "1",
        "label": "0",
        "value": 1,
        type: "NONE"
      }];
    }
    in_ = 0;
    out_ = 0;
    each(function(it){
      var amount;
      amount = it.from !== it.to
        ? +it.amount
        : -+it.fee;
      if (it.type === 'IN') {
        in_ += amount;
      }
      if (it.type === 'OUT') {
        return out_ += amount;
      }
    })(
    items);
    return [
      {
        "id": "1",
        "label": "Received",
        "value": +in_,
        type: "IN"
      }, {
        "id": "2",
        "label": "Sent",
        "value": +out_,
        type: "OUT"
      }
    ];
  });
  module.exports = function(store, web3t){
    var items, data, borderWidth, cornerRadius, padAngle, innerRadius, isInteractive, defs, fill, children;
    items = (function(){
      switch (false) {
      case !(store.transactions.applied.length > 0):
        return sortBy(function(it){
          return it.type;
        })(
        store.transactions.applied);
      default:
        return [];
      }
    }());
    data = buildData(store, items);
    borderWidth = 0;
    cornerRadius = 5;
    padAngle = 3.5;
    innerRadius = 0.9;
    isInteractive = store.transactions.applied.length > 0;
    defs = [
      linearGradientDef('gradientOUT', [
        {
          offset: 0,
          color: '#F7618B'
        }, {
          offset: 100,
          color: '#bf5fa0',
          opacity: 100
        }
      ]), linearGradientDef('gradientIN', [
        {
          offset: 0,
          color: '#8374b7'
        }, {
          offset: 50,
          color: '#399fe8'
        }, {
          offset: 100,
          color: '#8374b7',
          opacity: 0.7
        }
      ]), linearGradientDef('gradientNONE', [
        {
          offset: 0,
          color: '#8374b7',
          opacity: 0.15
        }, {
          offset: 100,
          color: '#8374b7',
          opacity: 0.15
        }
      ])
    ];
    fill = [
      {
        match: function(d){
          return d.type === 'IN';
        },
        id: 'gradientIN'
      }, {
        match: function(d){
          return d.type === 'OUT';
        },
        id: 'gradientOUT'
      }, {
        match: function(d){
          return d.type === 'NONE';
        },
        id: 'gradientNONE'
      }
    ];
    return react.createElement('div', {
      className: 'stats-holder stats-holder-1563307320'
    }, children = react.createElement(ResponsivePie, {
      data: data,
      defs: defs,
      fill: fill,
      isInteractive: isInteractive,
      borderWidth: borderWidth,
      fit: true,
      enableSlicesLabels: false,
      enableRadialLabels: false,
      cornerRadius: cornerRadius,
      padAngle: padAngle,
      innerRadius: innerRadius
    }));
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
