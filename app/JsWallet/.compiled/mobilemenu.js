// Generated by LiveScript 1.6.0
(function(){
  var react, projectLinks, menuFuncs, getPrimaryInfo, getLang, icon, navigate, setupPages, icons;
  react = require('react');
  projectLinks = require('./project-links.ls');
  menuFuncs = require('../menu-funcs.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  navigate = require('../navigate.ls');
  setupPages = require('../setup-pages.ls');
  icons = require('../icons.ls');
  module.exports = function(store, web3){
    var ref$, current, openAccount, lock, walletStyle, info, activateS1, activateS2, activateS3, switchNetwork, refresh, style, wallets, search, settings, filestorage, staking2, resources, stakingActive, delegateActive, infoActive, menuStyle, iconStyle, lockStyle, lang, syncing, borderStyle, logoStyle, expandCollapse, langsMenuBody, walletIcon, commingSoon, iconNode, lockIcon, textStyle, gotoSettings, gotoSearch, wallet, gotoStaking, gotoInfo, gotoSupport, openSubmenu, menuStaking, menuOut, staking, showMobile, close, children;
    if (store == null || in$(store.current.page, setupPages)) {
      return null;
    }
    ref$ = menuFuncs(store, web3t), current = ref$.current, openAccount = ref$.openAccount, lock = ref$.lock, walletStyle = ref$.walletStyle, info = ref$.info, activateS1 = ref$.activateS1, activateS2 = ref$.activateS2, activateS3 = ref$.activateS3, switchNetwork = ref$.switchNetwork, refresh = ref$.refresh, lock = ref$.lock;
    style = getPrimaryInfo(store);
    wallets = store.current.page === 'wallets' ? 'active' : 'not-active';
    search = store.current.page === 'search' ? 'active' : 'not-active';
    settings = store.current.page === 'settings' ? 'active' : 'not-active';
    filestorage = store.current.page === 'filestorage' ? 'active' : 'not-active';
    staking2 = store.current.page === 'staking2' ? 'active' : 'not-active';
    resources = store.current.page === 'resources' ? 'active' : 'not-active';
    stakingActive = store.current.page === 'staking' ? 'active' : 'not-active';
    delegateActive = store.current.page === 'choosestaker' ? 'active' : 'not-active';
    infoActive = store.current.page === 'info' ? 'active' : 'not-active';
    menuStyle = {
      color: style.app.text
    };
    iconStyle = {
      color: style.app.text
    };
    lockStyle = {
      color: style.app.text,
      bottom: "30px",
      position: "absolute"
    };
    lang = getLang(store);
    info = getPrimaryInfo(store);
    syncing = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "syncing";
      default:
        return "";
      }
    }());
    borderStyle = {
      background: style.app.menu
    };
    logoStyle = {
      filter: style.app.filterLogo
    };
    expandCollapse = function(){
      return store.current.langsOpen = !store.current.langsOpen;
    };
    langsMenuBody = {
      border: "1px solid " + style.app.border,
      background: style.app.header
    };
    walletIcon = {
      width: "18px"
    };
    commingSoon = {
      opacity: ".3",
      cursor: "no-drop"
    };
    iconNode = {
      position: "inherit",
      verticalAlign: "sub",
      width: "12px",
      height: "12px",
      paddingRight: "10px"
    };
    lockIcon = {
      width: "14px"
    };
    textStyle = {
      color: style.app.text
    };
    gotoSettings = function(){
      store.menu.show = false;
      return navigate(store, web3t, 'settings');
    };
    gotoSearch = function(){
      navigate(store, web3t, 'search');
      return store.menu.show = false;
    };
    wallet = function(){
      navigate(store, web3t, 'wallets');
      return store.menu.show = false;
    };
    gotoStaking = function(){
      if (store.current.page === 'staking2') {
        return store.menu.show = false;
      }
      navigate(store, web3t, 'staking2');
      return store.menu.show = false;
    };
    gotoInfo = function(){
      navigate(store, web3t, 'info');
      return store.menu.show = false;
    };
    lock = function(){
      navigate(store, web3t, 'locked');
      return store.menu.show = false;
    };
    gotoSupport = function(){
      store.menu.show = false;
      return window.open(store.menu.support);
    };
    openSubmenu = function(){
      return store.current.submenu = !store.current.submenu;
    };
    menuStaking = store.current.submenu ? 'submenu' : '';
    menuOut = function(){
      return store.current.submenu = false;
    };
    staking = store.current.submenu ? 'active' : 'not-active';
    showMobile = store.menu.show ? 'active' : "";
    close = function(){
      return store.menu.show = false;
    };
    return react.createElement('div', {
      className: showMobile + " mobile-menu mobile-menu-416769987"
    }, children = react.createElement('div', {
      style: borderStyle,
      className: showMobile + " content"
    }, children = [
      react.createElement('div', {
        onClick: close,
        className: 'closed'
      }, children = icon('X', 20)), store.preference.settingsVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: wallet,
        style: iconStyle,
        className: wallets + " menu-item"
      }, children = [
        react.createElement('img', {
          src: icons.wallet + "",
          style: walletIcon
        }), react.createElement('label', {}, ' ' + lang.yourWallets)
      ]) : void 8 : void 8, store.preference.settingsVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: gotoStaking,
        style: iconStyle,
        className: staking2 + " menu-item"
      }, children = [
        react.createElement('img', {
          src: icons.staking + ""
        }), react.createElement('label', {}, ' ' + lang.staking)
      ]) : void 8 : void 8, store.preference.settingsVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: gotoSearch,
        style: iconStyle,
        className: search + " menu-item"
      }, children = [
        react.createElement('img', {
          src: icons.search + ""
        }), react.createElement('label', {}, ' ' + lang.dapps)
      ]) : void 8 : void 8, store.preference.settingsVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: gotoSettings,
        style: iconStyle,
        className: settings + " menu-item"
      }, children = [
        react.createElement('img', {
          src: icons.setting + ""
        }), react.createElement('label', {}, ' ' + lang.settings)
      ]) : void 8 : void 8, store.preference.settingsVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: gotoSupport,
        style: iconStyle,
        className: 'menu-item'
      }, children = [
        react.createElement('img', {
          src: icons.support + ""
        }), react.createElement('label', {}, ' ' + lang.support)
      ]) : void 8 : void 8, store.preference.lockVisible === true ? store.current.device === 'mobile' ? react.createElement('div', {
        onClick: lock,
        style: lockStyle,
        className: 'menu-item'
      }, children = [
        react.createElement('img', {
          src: icons.lock + "",
          style: lockIcon
        }), react.createElement('label', {}, ' Locked')
      ]) : void 8 : void 8
    ]));
  };
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
