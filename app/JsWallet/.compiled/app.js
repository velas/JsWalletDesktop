// Generated by LiveScript 1.6.0
(function(){
  var observer, observable, react, pages, header, no_internet_banner, mobilemenu, defaultAlert, leftMenu, description, window, copyMessage, modalControl, getPrimaryInfo, confirmationControl, hoveredAddress, ref$, Offline, Online, navigate, defineRoot;
  observer = require('mobx-react').observer;
  observable = require('mobx').observable;
  react = require('react');
  pages = require('./pages.ls');
  header = require('./pages/header.ls');
  no_internet_banner = require('./pages/no_internet_banner.ls');
  mobilemenu = require('./pages/mobilemenu.ls');
  defaultAlert = require('./components/default-alert.ls');
  leftMenu = require('./pages/left-menu.ls');
  description = require('./description.ls');
  window = require('./browser/window.ls');
  copyMessage = require('./copy-message.ls');
  modalControl = require('./modal.ls').modalControl;
  getPrimaryInfo = require('./get-primary-info.ls');
  confirmationControl = require('./pages/confirmation.ls').confirmationControl;
  hoveredAddress = require('./pages/hovered-address.ls');
  ref$ = require('./components/react-detect-offline'), Offline = ref$.Offline, Online = ref$.Online;
  navigate = require('./navigate.ls');
  defineRoot = function(store){
    var style, text;
    style = getPrimaryInfo(store);
    text = ":root { --background: " + style.app.background + ";--bgspare: " + style.app.bgspare + ";--bg-secondary: " + style.app.wallet + ";--bg-primary-light: " + style.app.bgPrimaryLight + ";--placeholder: " + style.app.placeholder + ";--placeholder-menu: " + style.app.placeholderMenu + ";--color3: " + style.app.color3 + ";--border: " + style.app.border + "; --color1: " + style.app.color1 + "; --color2: " + style.app.color2 + "; --color-td: " + style.app.colorTd + ";--drag-bg: " + style.app.dragBg + ";--td-hover: " + style.app.th + ";--border-color: " + style.app.borderColor + ";--waves: " + style.app.waves + ";--primary1: " + style.app.primary1 + ";--primary2: " + style.app.primary2 + ";--primary3: " + style.app.primary3 + ";--primary1-spare: " + style.app.primary1Spare + ";--primary2-spare: " + style.app.primary2Spare + ";--primary3-spare: " + style.app.primary3Spare + ";--input: " + style.app.input + ";--dark-theme: " + style.app.menu + ";--border: " + style.app.border + ";--ligh-text: " + style.app.icon + ";--alert-spare: " + style.app.alertSpare + "; --btn-clip: " + style.app.clip + "; --border-btn: " + style.app.borderBtn + "; --filter: " + style.app.filter + "; --confirm: " + style.app.confirm + "}";
    return react.createElement('style', {}, ' ' + text);
  };
  module.exports = function(arg$){
    var store, web3t, currentPage, theme, style, syncing, openMenu, closeAllConfirmAndAlertDialogs, detectNetworkChange, children;
    store = arg$.store, web3t = arg$.web3t;
    if (store == null) {
      return null;
    }
    currentPage = pages[store.current.page];
    theme = getPrimaryInfo(store);
    style = {
      background: theme.app.background,
      color: theme.app.text,
      backgroundColor: theme.app.bgspare
    };
    syncing = (function(){
      switch (false) {
      case !store.current.refreshing:
        return "syncing";
      default:
        return "";
      }
    }());
    openMenu = function(){
      return store.current.openMenu = !store.current.openMenu;
    };
    closeAllConfirmAndAlertDialogs = function(){
      store.current.promptPassword = false;
      store.current.swapConfirmation = false;
      store.current.confirmation = false;
      store.current.notification = false;
      store.current.prompt = false;
      store.current.prompt2 = false;
      store.current.prompt3 = false;
      store.current.chooseToken = false;
      return store.current.alert = false;
    };
    detectNetworkChange = function(isOnline){
      var ref$;
      closeAllConfirmAndAlertDialogs();
      if (!isOnline) {
        return store.walletIsOffline = true;
      } else {
        store.walletIsOffline = false;
        if ((ref$ = store.current.page) !== 'chooseinit' && ref$ !== 'newseedrestore' && ref$ !== 'reviewwords' && ref$ !== 'verifyseed' && ref$ !== 'restorewords') {
          return navigate(store, web3t, 'locked');
        }
        if (store.current.seedWords.length === 0) {
          return navigate(store, web3t, 'chooseinit');
        }
      }
    };
    return react.createElement('div', {}, children = [
      defineRoot(store), description(store), react.createElement('div', {
        key: "content",
        style: style,
        className: syncing + " app app873713319"
      }, children = [
        modalControl(store, web3t), confirmationControl(store, web3t), copyMessage(store, web3t), defaultAlert(store), store.current.device === 'mobile' ? mobilemenu(store, web3t) : void 8, store.current.device === 'desktop' ? leftMenu(store, web3t) : void 8, currentPage({
          store: store,
          web3t: web3t
        }), store.walletIsOffline === true ? no_internet_banner({
          store: store,
          web3t: web3t
        }) : void 8, hoveredAddress({
          store: store
        }), react.createElement(Offline, {
          onChange: detectNetworkChange
        }, children = [
          no_internet_banner({
            store: store,
            web3t: web3t
          }), react.createElement('div', {
            id: "offline-notification",
            className: 'notification fixed-n-centered error-no-connection'
          }, ' Warning! You have no internet connection!\nOffline mode is on!')
        ])
      ])
    ]);
  };
}).call(this);
