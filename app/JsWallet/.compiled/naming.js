// Generated by LiveScript 1.6.0
(function(){
  var react, ref$, map, join, filter, head, getRecord, getNameMask, web3, getPrimaryInfo, getLang, installRecord, state;
  react = require('react');
  ref$ = require('prelude-ls'), map = ref$.map, join = ref$.join, filter = ref$.filter, head = ref$.head;
  getRecord = require('../get-record.ls');
  getNameMask = require('../get-name-mask.ls');
  web3 = require('../web3.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  installRecord = function(name, record){
    return "Please setup html element <meta property='web3space' value='" + record + "' /> on " + name + " to pass verification";
  };
  state = {
    timeout: null
  };
  module.exports = function(arg$){
    var store, web3t, ref$, setupRecord, verifyRecord, price, empty, showMessage, canBuyNickname, check, resolveRecord, buyNickname, buyNicknameProcess, buyNicknameClick, setMask, enterNick, changeToCustom, changeToEthnamed, style, inputStyle, input2Style, lang, children;
    store = arg$.store, web3t = arg$.web3t;
    ref$ = web3t.naming, setupRecord = ref$.setupRecord, verifyRecord = ref$.verifyRecord;
    price = 0.01;
    empty = function(){
      var ref$;
      return ((ref$ = store.current.nickname) != null ? ref$ : "").length === 0;
    };
    showMessage = function(message){
      return store.current.message = message;
    };
    canBuyNickname = store.current.canBuy ? 'active' : 'disabled';
    check = function(cb){
      if (empty()) {
        return typeof cb == 'function' ? cb("Nickname is empty") : void 8;
      }
      if (typeof err != 'undefined' && err !== null) {
        return typeof cb == 'function' ? cb(err) : void 8;
      }
      store.current.checkingName = true;
      showMessage("Loading...");
      return verifyRecord(store.current.nicknamefull, function(err, data){
        var canBuy;
        store.current.checkingName = false;
        if (err != null) {
          return typeof cb == 'function' ? cb(err) : void 8;
        }
        canBuy = data === "";
        store.current.canBuy = canBuy;
        if (canBuy) {
          return typeof cb == 'function' ? cb("Address Not Found") : void 8;
        }
        return typeof cb == 'function' ? cb(null, data) : void 8;
      });
    };
    resolveRecord = function(){
      return check(function(err, data){
        if (err != null) {
          return showMessage(err);
        }
        return showMessage(data.length > 0 ? "Busy" : "Free");
      });
    };
    buyNickname = function(cb){
      var name, owner, amountEthers, record;
      name = store.current.nicknamefull;
      owner = head(
      map(function(it){
        return it.address;
      })(
      filter(function(it){
        return it.coin.token === 'eth';
      })(
      store.current.account.wallets)));
      amountEthers = price;
      record = getRecord(store);
      return check(function(err, data){
        if (err != null && err !== "Address Not Found") {
          return cb(err);
        }
        if (err !== "Address Not Found") {
          return cb("Address is already used");
        }
        return setupRecord({
          name: name,
          record: record,
          amountEthers: amountEthers,
          owner: owner
        }, function(err){
          if (err === "Does not match") {
            return cb(installRecord(name, record));
          }
          if (err != null) {
            return cb(err);
          }
          return cb(null, "Your name is registered.");
        });
      });
    };
    buyNicknameProcess = function(cb){
      store.current.status = 'buy-nickname';
      return buyNickname(function(err, done){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    };
    buyNicknameClick = function(event){
      return buyNicknameProcess(function(err, done){
        var ref$;
        store.current.status = 'main';
        if (err != null) {
          return showMessage((ref$ = err.message) != null ? ref$ : err);
        }
        return showMessage(done);
      });
    };
    setMask = function(){
      var ref$;
      return store.current.nicknamefull = getNameMask((ref$ = store.current.nickname) != null ? ref$ : "");
    };
    enterNick = function(event){
      var nickname, ref$, ref1$, ref2$;
      nickname = (ref$ = (ref1$ = ((ref2$ = event.target.value) != null ? ref2$ : "").match(/^[a-z0-9\.@]+/)) != null ? ref1$[0] : void 8) != null ? ref$ : "";
      showMessage("Typing...");
      clearTimeout(state.timeout);
      state.timeout = null;
      store.current.nickname = nickname;
      setMask();
      return state.timeout = setTimeout(resolveRecord, 2000);
    };
    changeToCustom = function(){
      return store.current.customDomain = true;
    };
    changeToEthnamed = function(){
      return store.current.customDomain = false;
    };
    style = getPrimaryInfo(store);
    inputStyle = {
      color: style.app.text,
      background: style.app.input
    };
    input2Style = {
      color: style.app.text,
      background: "rgba(0,0,0,0.2)"
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'box-container naming naming1190187335'
    }, children = react.createElement('div', {
      className: 'box'
    }, children = [
      react.createElement('div', {
        className: 'custom-domain'
      }, children = [
        react.createElement('div', {
          className: 'part hidden'
        }, children = react.createElement('input', {
          value: store.current.nicknamefull + "",
          style: inputStyle
        })), react.createElement('div', {
          className: 'part visible'
        }, children = react.createElement('input', {
          value: store.current.nickname + "",
          style: input2Style,
          onChange: enterNick
        }))
      ]), ((ref$ = store.current.message) != null ? ref$ : "").length > 0 ? react.createElement('div', {
        title: store.current.message + "",
        className: 'message'
      }, ' ' + store.current.message) : void 8, react.createElement('div', {}, children = (function(){
        switch (store.current.status) {
        case 'verify':
          return react.createElement('div', {}, ' ' + lang.verifyNickname);
        case 'buy-nickname':
          return react.createElement('div', {}, ' ' + lang.getNickname);
        default:
          return react.createElement('button', {
            onClick: buyNicknameClick
          }, ' ' + lang.register);
        }
      }()))
    ]));
  };
}).call(this);
