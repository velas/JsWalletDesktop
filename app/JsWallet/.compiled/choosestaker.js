// Generated by LiveScript 1.6.0
(function(){
  var react, reactDom, navigate, getPrimaryInfo, web3, bignumber, getLang, historyFuncs, ref$, queryPools, queryAccounts, convertPoolsToViewModel, convertAccountsToViewModel, icon, map, split, filter, find, foldl, sortBy, unique, head, each, objToPairs, div, times, plus, minus, velasNodeTemplate, hdkey, bip39, md5, menuFuncs, btoa, Buffer, copiedInform, copy, round5, ethToVlx, vlxToEth, switchAccount, roundHuman, exitStake, icons, placeholder, claimStake, canMakeStaking, epoch, alert, button, addressHolder, addressHolderPopup, alertTxn, amountField, moveStake, seedmem, burger, stakeAccounts, cb, asCallback, showValidator, stakingContent, validators, stringify, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  react = require('react');
  reactDom = require('react-dom');
  navigate = require('../navigate.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  web3 = require('../web3.ls');
  bignumber = require('bignumber.js');
  getLang = require('../get-lang.ls');
  historyFuncs = require('../history-funcs.ls');
  ref$ = require('../staking-funcs.ls'), queryPools = ref$.queryPools, queryAccounts = ref$.queryAccounts, convertPoolsToViewModel = ref$.convertPoolsToViewModel, convertAccountsToViewModel = ref$.convertAccountsToViewModel;
  icon = require('./icon.ls');
  ref$ = require('prelude-ls'), map = ref$.map, split = ref$.split, filter = ref$.filter, find = ref$.find, foldl = ref$.foldl, sortBy = ref$.sortBy, unique = ref$.unique, head = ref$.head, each = ref$.each, objToPairs = ref$.objToPairs;
  ref$ = require('../math.ls'), div = ref$.div, times = ref$.times, plus = ref$.plus, minus = ref$.minus;
  velasNodeTemplate = require('../velas/velas-node-template.ls');
  ref$ = require('../../web3t/providers/deps.js'), hdkey = ref$.hdkey, bip39 = ref$.bip39;
  md5 = require('md5');
  menuFuncs = require('../menu-funcs.ls');
  btoa = require('btoa');
  Buffer = require('safe-buffer').Buffer;
  copiedInform = require('../copied-inform.ls');
  copy = require('../copy.ls');
  round5 = require('../round5.ls');
  ref$ = require('../../web3t/addresses.js'), ethToVlx = ref$.ethToVlx, vlxToEth = ref$.vlxToEth;
  switchAccount = require('./switch-account.ls');
  roundHuman = require('../round-human.ls');
  exitStake = require('./exit-stake.ls');
  icons = require('../icons.ls');
  placeholder = require('./placeholder.ls');
  claimStake = require('./claim-stake.ls');
  canMakeStaking = require('../staking/can-make-staking.ls');
  epoch = require('./epoch.ls');
  alert = require('./confirmation.ls').alert;
  button = require('../components/button.ls');
  addressHolder = require('../components/address-holder.ls');
  addressHolderPopup = require('../components/address-holder-popup.ls');
  alertTxn = require('./alert-txn.ls');
  amountField = require('../components/amount-field.ls');
  moveStake = require('./move-stake.ls');
  seedmem = require('../seed.ls');
  burger = require('../components/burger.ls');
  stakeAccounts = require('./stake/accounts.ls');
  cb = console.log;
  asCallback = function(p, cb){
    p['catch'](function(err){
      return cb(err);
    });
    return p.then(function(data){
      return cb(null, data);
    });
  };
  showValidator = function(store, web3t){
    return function(validator){
      return react.createElement('li', {
        key: "validator_" + validator
      }, ' ' + validator);
    };
  };
  stakingContent = function(store, web3t){
    var goBack, style, lang, buttonPrimary3Style, filterIcon, commingSoon, iStakeChoosenPool, ref$, accountLeft, accountRight, changeAccountIndex, lineStyle, getBalance, getOptions, useMin, useMax, yourBalance, yourStakingAmount, yourStaking, vlxToken, isSpinned, buildStaker, cancelPool, updateJustPools, updatePoolsAndAccounts, refresh, iconStyle, stakerPoolStyle, stats, children;
    goBack = historyFuncs(store, web3t).goBack;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    buttonPrimary3Style = {
      border: "1px solid " + style.app.primary3,
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    filterIcon = {
      filter: style.app.filterIcon
    };
    commingSoon = {
      opacity: ".3"
    };
    iStakeChoosenPool = function(){
      var pool, myStake;
      pool = store.staking.chosenPool;
      myStake = +pool.myStake;
      return myStake >= 10000;
    };
    ref$ = menuFuncs(store, web3t), accountLeft = ref$.accountLeft, accountRight = ref$.accountRight, changeAccountIndex = ref$.changeAccountIndex;
    lineStyle = {
      padding: "10px",
      width: '100%'
    };
    getBalance = function(){
      var wallet;
      wallet = find(function(it){
        return it.coin.token === 'vlx_native';
      })(
      store.current.account.wallets);
      return wallet.balance;
    };
    getOptions = function(cb){
      var iAmStaker;
      iAmStaker = iStakeChoosenPool();
      if (iAmStaker) {
        return cb(null);
      }
      return web3t.velas.Staking.candidateMinStake(function(err, data){
        var min, balance, stake, max;
        if (err != null) {
          return cb(err);
        }
        min = (function(){
          switch (false) {
          case !(+store.staking.stakeAmountTotal >= 10000):
            return 1;
          default:
            return div(data, Math.pow(10, 18));
          }
        }());
        balance = minus(getBalance(), 0.1);
        stake = store.staking.add.addValidatorStake;
        if (10000 > +stake) {
          return cb(lang.amountLessStaking);
        }
        if (+balance < +stake) {
          return cb(lang.balanceLessStaking);
        }
        max = +balance;
        return cb(null, {
          min: min,
          max: max
        });
      });
    };
    useMin = function(){
      return store.staking.add.addValidatorStake = 10000;
    };
    useMax = function(){
      return store.staking.add.addValidatorStake = Math.max(minus(getBalance(), 0.1), 0);
    };
    yourBalance = " " + roundHuman(getBalance()) + " ";
    yourStakingAmount = div(store.staking.stakeAmountTotal, Math.pow(10, 18));
    yourStaking = " " + roundHuman(yourStakingAmount);
    vlxToken = "VLX";
    isSpinned = (store.staking.allPoolsLoaded === false || store.staking.allPoolsLoaded == null) && store.staking.poolsAreLoading === true ? "spin disabled" : "";
    buildStaker = function(store, web3t){
      return function(item){
        var checked, stake, myStake, buildMyStake, fee, lastVote, index, reward, filled, filledColor, vlx_native, wallet, votePower, mystakeClass, children;
        checked = item.checked;
        stake = item.stake;
        myStake = (function(){
          switch (false) {
          case +item.myStake.length !== 0:
            return [];
          default:
            return item.myStake;
          }
        }());
        buildMyStake = function(stake){
          var showDetails, children;
          showDetails = function(){
            var account;
            account = find(function(it){
              return it.seed === stake.seed;
            })(
            store.staking.accounts);
            if (account == null) {
              return null;
            }
            store.staking.chosenAccount = account;
            return navigate(store, web3t, 'account_details');
          };
          return react.createElement('div', {
            onClick: showDetails,
            className: "stake-item"
          }, children = react.createElement('div', {
            className: 'name'
          }, children = react.createElement('span', {}, ' ' + stake.seed)));
        };
        fee = item.commission;
        lastVote = item.lastVote;
        index = store.staking.pools.indexOf(item) + 1;
        reward = (function(){
          switch (false) {
          case item.validatorRewardPercent !== "..":
            return "..";
          default:
            return (100 - +item.validatorRewardPercent) * 1.4285714286;
          }
        }());
        filled = roundHuman(reward) + "%";
        filledColor = {
          color: (function(){
            switch (false) {
            case !(reward > 95):
              return 'red';
            case !(reward > 75):
              return 'orange';
            case !(reward > 40):
              return "rgb(165, 174, 81)";
            default:
              return "rgb(38, 219, 85)";
            }
          }())
        };
        vlx_native = find(function(it){
          return it.coin.token === 'vlx_native';
        })(
        store.current.account.wallets);
        if (vlx_native == null) {
          return null;
        }
        wallet = {
          address: item.address,
          network: vlx_native.network,
          coin: vlx_native.coin
        };
        votePower = (function(){
          switch (false) {
          case item.votePower == null:
            return item.votePower + "%";
          default:
            return "...";
          }
        }());
        mystakeClass = myStake !== 0 ? "with-stake" : "";
        return react.createElement('tr', {
          className: item.status + ""
        }, children = [
          react.createElement('td', {}, children = react.createElement('span', {
            className: item.status + " circle"
          }, ' ' + index)), react.createElement('td', {
            datacolumn: 'Staker Address',
            title: item.address + ""
          }, children = addressHolderPopup({
            store: store,
            wallet: wallet
          })), react.createElement('td', {}, ' ' + stake), react.createElement('td', {}, ' ' + fee + '%'), react.createElement('td', {}, ' ' + lastVote), react.createElement('td', {
            className: mystakeClass + ""
          }, children = map(buildMyStake)(
          myStake)), react.createElement('td', {}, ' ' + item.stakers)
        ]);
      };
    };
    cancelPool = function(){
      return store.staking.chosenPool = null;
    };
    updateJustPools = function(cb){
      var onProgress;
      if (store.staking.accounts.length === 0) {
        return cb(null);
      }
      onProgress = function(it){
        return store.staking.pools = convertPoolsToViewModel(arrayFrom$(it));
      };
      return queryPools(store, web3t, onProgress, function(err, pools){
        if (err != null) {
          return cb(err);
        }
      });
    };
    updatePoolsAndAccounts = function(cb){
      if (store.staking.accounts.length > 0) {
        return;
      }
      store.staking.allAccountsLoaded = false;
      store.staking.accountsAreLoading = true;
      store.staking.accounts = [];
      return validators.init({
        store: store,
        web3t: web3t
      }, function(err){
        if (err != null) {
          return cb(err);
        }
        return cb(null);
      });
    };
    refresh = function(){
      var cb;
      store.staking.allPoolsLoaded = false;
      if ((store.staking.allPoolsLoaded === false || store.staking.allPoolsLoaded == null) && store.staking.poolsAreLoading === true) {
        return false;
      }
      store.staking.poolsAreLoading = true;
      cb = console.log;
      store.staking.pools = [];
      store.staking.delegators = {};
      return updateJustPools(function(){
        return updatePoolsAndAccounts(function(){
          return cb(null, 'done');
        });
      });
    };
    iconStyle = {
      color: style.app.loader,
      marginTop: "10px",
      width: "inherit"
    };
    stakerPoolStyle = {
      maxWidth: 200,
      background: style.app.stats
    };
    stats = {
      background: style.app.stats
    };
    return react.createElement('div', {
      className: 'staking-content delegate'
    }, children = react.createElement('div', {
      className: 'main-sections'
    }, children = [
      react.createElement('div', {
        className: 'section'
      }, children = [
        react.createElement('div', {
          className: 'title'
        }, children = react.createElement('h2', {}, ' ' + lang.balance)), react.createElement('div', {
          className: 'description'
        }, children = react.createElement('span', {}, ' ' + yourBalance + ' VLX'))
      ]), stakeAccounts({
        store: store,
        web3t: web3t
      }), react.createElement('div', {
        id: "pools",
        className: 'form-group'
      }, children = [
        alertTxn({
          store: store
        }), react.createElement('div', {
          className: 'section'
        }, children = [
          react.createElement('div', {
            className: 'title'
          }, children = react.createElement('h3', {}, ' ' + lang.validators)), react.createElement('div', {
            className: 'description table-scroll'
          }, children = react.createElement('table', {}, children = [
            react.createElement('thead', {}, children = react.createElement('tr', {}, children = [
              react.createElement('td', {
                width: "3%",
                style: stats
              }, ' #'), react.createElement('td', {
                width: "30%",
                style: stakerPoolStyle,
                title: "Validator Staking Address. Permanent"
              }, ' ' + lang.validator + ' (?) '), react.createElement('td', {
                width: "15%",
                style: stats,
                title: "Sum of all stakings"
              }, ' ' + lang.totalStake + ' (?)'), react.createElement('td', {
                width: "5%",
                style: stats,
                title: "Validator Interest. (100% - Validator Interest = Pool Staking Reward)"
              }, ' ' + lang.comission + ' (?)'), react.createElement('td', {
                width: "10%",
                style: stats,
                title: "Last Staking Amount"
              }, ' ' + lang.lastVote + ' (?)'), react.createElement('td', {
                width: "10%",
                style: stats,
                title: "Find you staking by Seed"
              }, ' ' + lang.myStake + ' (?)'), react.createElement('td', {
                width: "5%",
                style: stats,
                title: "How many stakers in a pool"
              }, ' ' + lang.stakers + ' (?)')
            ])), react.createElement('tbody', {}, children = map(buildStaker(store, web3t))(
            store.staking.pools))
          ]))
        ])
      ])
    ]));
  };
  validators = function(arg$){
    var store, web3t, lang, goBack, wallet, gotoSearch, info, style, borderStyle, borderStyle2, borderRight, headerTableStyle, lightText, iconColor, showClass, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    goBack = historyFuncs(store, web3t).goBack;
    wallet = find(function(it){
      return it.coin.token === 'vlx_native';
    })(
    store.current.account.wallets);
    if (wallet == null) {
      return cb(null);
    }
    gotoSearch = function(){
      return navigate(store, web3t, 'search');
    };
    info = getPrimaryInfo(store);
    style = {
      background: info.app.wallet,
      color: info.app.text
    };
    borderStyle = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: info.app.background,
      backgroundColor: info.app.bgspare
    };
    borderStyle2 = {
      color: info.app.text,
      borderBottom: "1px solid " + info.app.border,
      background: "#4b2888"
    };
    borderRight = {
      color: info.app.text,
      borderRight: "1px solid " + info.app.border
    };
    headerTableStyle = {
      borderBottom: "1px solid " + info.app.border,
      background: info.app.walletLight
    };
    lightText = {
      color: info.app.color3
    };
    iconColor = {
      filter: info.app.iconFilter
    };
    showClass = store.current.openMenu ? 'hide' : "";
    return react.createElement('div', {
      className: 'staking staking-683313427'
    }, children = [
      react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: showClass + " header"
        }, ' ' + lang.delegateStake), react.createElement('div', {
          onClick: goBack,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          style: iconColor,
          className: 'icon-svg'
        })), burger(store, web3t), epoch(store, web3t), switchAccount(store, web3t)
      ]), stakingContent(store, web3t)
    ]);
  };
  stringify = function(value){
    if (value != null) {
      return roundHuman(parseFloat(div(value, Math.pow(10, 18))));
    } else {
      return '..';
    }
  };
  validators.init = function(arg$, cb){
    var store, web3t, random, indexIsDifferent;
    store = arg$.store, web3t = arg$.web3t;
    console.log("validators.init");
    store.staking.maxWithdraw = 0;
    random = function(){
      return Math.random();
    };
    store.current.page = "validators";
    store.staking.pools = [];
    store.staking.accounts = [];
    store.staking.delegators = {};
    store.staking.withdrawAmount = 0;
    store.staking.stakeAmountTotal = 0;
    store.staking.reward = null;
    store.staking.allPoolsLoaded = false;
    store.staking.poolsAreLoading = true;
    store.staking.allAccountsLoaded = false;
    store.staking.accountsAreLoading = true;
    store.staking.chosenPool = null;
    store.staking.add.addValidatorStake = 0;
    indexIsDifferent = store.current.accountIndex !== store.staking.accountIndex;
    if (store.staking.poolsNetwork === store.current.network) {
      if (store.staking.allPoolsLoaded != null && store.staking.allPoolsLoaded === true && !indexIsDifferent) {
        return cb(null);
      }
    } else {
      store.staking.poolsNetwork = store.current.network;
    }
    store.staking.pools = [];
    asCallback(web3t.velas.NativeStaking.connection.getMinimumBalanceForRentExemption(200), function(err, rent){
      var wallet;
      if (err != null) {
        rent = 2282880;
      }
      rent = div(rent, Math.pow(10, 9));
      store.staking.rent = rent;
      wallet = find(function(it){
        return it.coin.token === 'vlx_native';
      })(
      store.current.account.wallets);
      if (wallet == null) {
        return cb(null);
      }
      web3t.velas.NativeStaking.setAccountPublicKey(wallet.publicKey);
      web3t.velas.NativeStaking.setAccountSecretKey(wallet.secretKey);
      return asCallback(web3t.velas.NativeStaking.getParsedProgramAccounts(), function(err, parsedProgramAccounts){
        var onProgress;
        if (err != null) {
          parsedProgramAccounts = [];
        }
        store.staking.parsedProgramAccounts = parsedProgramAccounts;
        onProgress = function(it){
          return store.staking.accounts = convertAccountsToViewModel(arrayFrom$(it));
        };
        return queryAccounts(store, web3t, onProgress, function(err, result){
          var onProgress;
          if (err != null) {
            return cb(err);
          }
          onProgress = function(it){
            return store.staking.pools = convertPoolsToViewModel(arrayFrom$(it));
          };
          return queryPools(store, web3t, onProgress, function(err, pools){
            if (err != null) {
              return cb(err);
            }
            store.staking.pools = convertPoolsToViewModel(pools);
            return store.staking.accounts = convertAccountsToViewModel(result);
          });
        });
      });
    });
  };
  module.exports = validators;
}).call(this);
