// Generated by LiveScript 1.6.0
(function(){
  var react, newseedFuncs, getLang, getPrimaryInfo, icons, ref$, map, find, foldl, unique, take, sortBy, confirm, newseed, random, getVerifier, init, focus;
  react = require('react');
  newseedFuncs = require('../newseed-funcs.ls');
  getLang = require('../get-lang.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  icons = require('../icons.ls');
  ref$ = require('prelude-ls'), map = ref$.map, find = ref$.find, foldl = ref$.foldl, unique = ref$.unique, take = ref$.take, sortBy = ref$.sortBy;
  confirm = require('./confirmation.ls').confirm;
  newseed = function(arg$){
    var store, web3t, lang, ref$, next, save, style, textStyle, addressInput, buttonPrimary1Style, buttonPrimary3Style, btnIcon, seedStyle, newseedStyle, wrongWord, verifySeed, back, onKeyDown, buildVerifySeed, children;
    store = arg$.store, web3t = arg$.web3t;
    lang = getLang(store);
    ref$ = newseedFuncs(store, web3t), next = ref$.next, save = ref$.save;
    style = getPrimaryInfo(store);
    textStyle = {
      color: style.app.text
    };
    addressInput = {
      color: style.app.text,
      background: "transparent"
    };
    buttonPrimary1Style = {
      border: "1px solid " + style.app.primary1,
      color: style.app.textSeedBtn,
      background: style.app.primary1,
      backgroundColor: style.app.primary1Spare
    };
    buttonPrimary3Style = {
      border: "1px solid " + style.app.primary3,
      color: style.app.text2,
      background: style.app.primary3,
      backgroundColor: style.app.primary3Spare
    };
    btnIcon = {
      filter: style.app.primaryButtonFilter
    };
    seedStyle = {
      border: "1px solid " + style.app.border,
      color: style.app.text
    };
    newseedStyle = {
      marginBottom: "10px",
      width: "120px"
    };
    wrongWord = function(item){
      console.log(item.original.part, item.part);
      return item.original.part !== item.part;
    };
    verifySeed = function(){
      var ixs, item, wrong;
      store.current.verifySeedError = false;
      ixs = store.current.verifySeedIndexes;
      item = ixs[store.current.verifySeedIndex];
      wrong = item.original.part !== item.part;
      if (wrong) {
        return store.current.verifySeedError = true;
      }
      if (store.current.verifySeedIndex + 1 < ixs.length) {
        return store.current.verifySeedIndex += 1;
      }
      return save();
    };
    back = function(){
      if (store.current.verifySeedIndexes > 0) {
        return store.current.verifySeedIndexes += 1;
      }
      return confirm(store, "This action can reset all your words and you have to write down them again. Do you want to continue?", function(yesno){
        if (yesno === false) {
          return;
        }
        return store.current.page = 'reviewwords';
      });
    };
    onKeyDown = function(it){
      if (it.keyCode === 13) {
        return verifySeed();
      }
    };
    buildVerifySeed = curry$(function(store, item){
      var enterConfirm, children;
      enterConfirm = function(it){
        var ref$, ref1$;
        return item.part = ((ref$ = it != null ? (ref1$ = it.target) != null ? ref1$.value : void 8 : void 8) != null ? ref$ : "").trim();
      };
      return react.createElement('div', {
        style: seedStyle,
        className: 'word'
      }, children = react.createElement('input', {
        style: addressInput,
        key: "enter_" + item.index + "_word",
        value: item.part + "",
        onChange: enterConfirm,
        placeholder: lang.word + " #" + (item.index + 1),
        onKeyDown: onKeyDown
      }));
    });
    return react.createElement('div', {
      className: 'newseed newseed-136522795'
    }, children = [
      react.createElement('img', {
        style: newseedStyle,
        src: icons.verifyseed + ""
      }), react.createElement('div', {
        style: textStyle,
        className: 'title'
      }, ' ' + lang.verifySeedPhrase), react.createElement('div', {
        className: 'words'
      }, children = buildVerifySeed(store, store.current.verifySeedIndexes[store.current.verifySeedIndex])), react.createElement('div', {}, children = [
        react.createElement('button', {
          style: buttonPrimary3Style,
          onClick: back,
          className: 'right'
        }, children = react.createElement('span', {}, children = [
          react.createElement('img', {
            src: icons.close2 + "",
            style: btnIcon,
            className: 'icon-svg'
          }), " " + lang.cancel
        ])), react.createElement('button', {
          style: buttonPrimary1Style,
          onClick: verifySeed,
          className: 'right'
        }, children = react.createElement('span', {}, children = [
          react.createElement('img', {
            src: icons.right + "",
            style: btnIcon,
            className: 'icon-svg'
          }), " " + lang.next
        ]))
      ]), store.current.verifySeedError === true ? react.createElement('div', {
        style: textStyle,
        className: 'warning'
      }, children = react.createElement('div', {}, ' ' + lang.wordsAreNotMatch)) : void 8
    ]);
  };
  random = function(){
    return Math.floor(Math.random() * 10 + 1);
  };
  getVerifier = function(store){
    return function(original){
      var index;
      index = store.current.seedWords.indexOf(original);
      return {
        index: index,
        part: '',
        original: original
      };
    };
  };
  init = function(arg$, cb){
    var store;
    store = arg$.store;
    store.current.verifySeedIndex = 0;
    store.current.verifySeedIndexes = sortBy(random)(
    map(getVerifier(store))(
    store.current.seedWords));
    return cb(null);
  };
  focus = function(arg$, cb){
    var store;
    store = arg$.store;
    return cb(null);
  };
  newseed.focus = focus;
  newseed.init = init;
  module.exports = newseed;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
