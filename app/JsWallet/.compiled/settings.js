// Generated by LiveScript 1.6.0
(function(){
  var react, menuFuncs, historyFuncs, naming, getPrimaryInfo, getLang, icon, navigate, icons, button, burger, chooseThemes, ref$, keys, objToPairs, pairsToObj, map, filter, listLanguage, switchLanguage, switchAccount, networks, networksReverted, switchNetwork, namingPart, manageAccount;
  react = require('react');
  menuFuncs = require('../menu-funcs.ls');
  historyFuncs = require('../history-funcs.ls');
  naming = require('./naming.ls');
  getPrimaryInfo = require('../get-primary-info.ls');
  getLang = require('../get-lang.ls');
  icon = require('./icon.ls');
  navigate = require('../navigate.ls');
  icons = require('../icons.ls');
  button = require('../components/button.ls');
  burger = require('../components/burger.ls');
  chooseThemes = require('./choose-themes.ls');
  ref$ = require('prelude-ls'), keys = ref$.keys, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, map = ref$.map, filter = ref$.filter;
  listLanguage = function(store, web3t){
    var style, lang, countryCodes, setLang, changeLang, color, up, children;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    countryCodes = {
      en: 'English',
      ru: 'Русский',
      ua: 'Українська',
      cn: '中文語言',
      kr: '한국어',
      fr: 'Français',
      es: 'Español',
      ar: 'عربى',
      'in': "हिंदी",
      id: 'Indonesian',
      ph: 'Pilipino',
      yr: 'Yoruba',
      vn: "Tiếng Việt"
    };
    setLang = function(lang){
      localStorage.setItem('lang', lang);
      return store.lang = lang;
    };
    changeLang = function(code){
      return function(){
        store.current.languageMenu = false;
        return setLang(code);
      };
    };
    color = {
      color: style.app.text
    };
    up = function(it){
      return it.toUpperCase();
    };
    return react.createElement('ul', {}, children = map(function(code){
      var langStyle, name, tag, children;
      langStyle = color;
      name = countryCodes[code];
      tag = "langs_" + code;
      return react.createElement('li', {
        key: "langs_" + code,
        onClick: changeLang(code),
        style: langStyle,
        className: code + " lang-item"
      }, children = [
        react.createElement('img', {
          src: icons[tag] + ""
        }), " " + name
      ]);
    })(
    filter(function(it){
      var name;
      name = countryCodes[it];
      return store.current.searchLanguage.trim().length === 0 || up(name).startsWith(up(store.current.searchLanguage)) || up(it).startsWith(up(store.current.searchLanguage));
    })(
    keys(
    countryCodes))));
  };
  switchLanguage = function(store, web3t){
    var style, lang, filterBody, inputStyle, openLanguage, menuOut, searchLang, children;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    filterBody = {
      border: "1px solid " + style.app.border,
      background: style.app.header
    };
    inputStyle = {
      background: style.app.wallet,
      color: style.app.text,
      border: "0"
    };
    openLanguage = function(){
      return store.current.languageMenu = !store.current.languageMenu;
    };
    menuOut = function(){
      return store.current.languageMenu = false;
    };
    searchLang = function(event){
      var input, ref$;
      input = (ref$ = event.target.value) != null ? ref$ : "";
      return store.current.searchLanguage = input;
    };
    return react.createElement('span', {}, children = [
      button({
        store: store,
        onClick: openLanguage,
        type: 'secondary',
        icon: 'arrowRight',
        text: 'languageType'
      }), store.current.languageMenu ? react.createElement('div', {
        style: filterBody,
        onMouseLeave: menuOut,
        className: 'langs-drop'
      }, children = [
        react.createElement('input', {
          value: store.current.searchLanguage + "",
          style: inputStyle,
          placeholder: lang.search + "",
          onChange: searchLang,
          className: 'search'
        }), listLanguage(store, web3t)
      ]) : void 8
    ]);
  };
  switchAccount = function(store, web3t){
    var ref$, accountLeft, accountRight, changeAccountIndex, style, lang, inputStyle, color, buttonPrimary2Style, children;
    ref$ = menuFuncs(store, web3t), accountLeft = ref$.accountLeft, accountRight = ref$.accountRight, changeAccountIndex = ref$.changeAccountIndex;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    inputStyle = {
      background: style.app.input,
      color: style.app.text,
      border: "0"
    };
    color = {
      color: style.app.text
    };
    buttonPrimary2Style = {
      border: "1px solid " + style.app.wallet,
      color: style.app.text,
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    return react.createElement('div', {
      style: color,
      className: 'switch-account'
    }, children = [
      react.createElement('div', {
        className: 'mb-12'
      }, ' ' + lang.accountIndex + ':'), react.createElement('span', {
        onClick: accountLeft,
        style: buttonPrimary2Style,
        className: 'button left'
      }, children = icon('ChevronLeft', 15)), react.createElement('span', {
        className: 'bold'
      }, children = react.createElement('input', {
        value: store.current.accountIndex + "",
        style: inputStyle,
        onChange: changeAccountIndex,
        className: 'change-index'
      })), react.createElement('span', {
        onClick: accountRight,
        style: buttonPrimary2Style,
        className: 'button right'
      }, children = icon('ChevronRight', 15))
    ]);
  };
  networks = {
    mainnet: false,
    testnet: true
  };
  networksReverted = pairsToObj(
  map(function(it){
    return [it[1], it[0]];
  })(
  objToPairs(
  networks)));
  switchNetwork = function(store, web3t){
    var style, lang, changeNetwork, value, isChecked, checkboxStyle, children;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    changeNetwork = function(it){
      var value;
      if (store.current.refreshing === true) {
        return;
      }
      value = it.target.value === 'true';
      store.forceReload = true;
      store.forceReloadTxs = true;
      store.transactions.all = [];
      store.transactions.applied = [];
      web3t.use(networksReverted[!value]);
      store.current.walletIndex = 0;
      return store.current.groupIndex = 0;
    };
    value = networks[store.current.network];
    isChecked = store.current.network === "testnet";
    checkboxStyle = (function(){
      switch (false) {
      case store.current.refreshing !== true:
        return {
          opacity: 0.2
        };
      default:
        return {
          opacity: 1
        };
      }
    }());
    return react.createElement('label', {
      style: checkboxStyle,
      className: 'active-network'
    }, children = [
      react.createElement('input', {
        type: 'checkbox',
        onChange: changeNetwork,
        value: value,
        id: "settings-testnet",
        checked: isChecked
      }), react.createElement('div', {
        className: 'track thumb'
      })
    ]);
  };
  namingPart = function(arg$){
    var store, web3t, children;
    store = arg$.store, web3t = arg$.web3t;
    return react.createElement('div', {
      className: 'section'
    }, children = [
      react.createElement('div', {
        className: 'title'
      }, ' ' + lang.yourNickname), react.createElement('div', {
        className: 'description'
      }, ' ' + lang.yourNicknameInfo), react.createElement('div', {
        className: 'content'
      }, children = naming({
        store: store,
        web3t: web3t
      }))
    ]);
  };
  manageAccount = function(store, web3t){
    var ref$, current, generate, enterPin, checkPin, cancelTry, editSeed, saveSeed, changeSeed, exportPrivateKey, style, lang, inputStyle, color, logoStyle, buttonPrimary2Style, gotoTerms, gotoPrivacy, inputStyle2, buttonStyle2, children;
    ref$ = menuFuncs(store, web3t), current = ref$.current, generate = ref$.generate, enterPin = ref$.enterPin, checkPin = ref$.checkPin, cancelTry = ref$.cancelTry, editSeed = ref$.editSeed, saveSeed = ref$.saveSeed, changeSeed = ref$.changeSeed, exportPrivateKey = ref$.exportPrivateKey;
    style = getPrimaryInfo(store);
    lang = getLang(store);
    inputStyle = {
      background: style.app.wallet,
      color: style.app.text
    };
    color = {
      color: style.app.text
    };
    logoStyle = {
      filter: style.app.filterLogo
    };
    buttonPrimary2Style = {
      border: "1px solid " + style.app.primary2,
      color: style.app.text,
      background: style.app.primary2,
      backgroundColor: style.app.primary2Spare
    };
    gotoTerms = function(){
      return navigate(store, web3t, 'terms2');
    };
    gotoPrivacy = function(){
      return navigate(store, web3t, 'privacy');
    };
    inputStyle2 = (ref$ = {}, import$(ref$, inputStyle), ref$.width = "85px", ref$);
    buttonStyle2 = (ref$ = {}, import$(ref$, buttonPrimary2Style), ref$.width = "20px", ref$);
    return react.createElement('div', {}, children = [
      react.createElement('div', {
        id: "section-change-language",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, ' ' + lang.language), react.createElement('div', {
          style: color,
          className: 'description'
        }, children = [react.createElement('span', {}, ' ' + lang.languageWebWallet), react.createElement('span', {}, ' - ' + lang.languageType)]), react.createElement('div', {
          id: "switch-language",
          className: 'content'
        }, children = switchLanguage(store, web3t))
      ]), react.createElement('div', {
        id: "section-switch-account-index",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, ' ' + lang.switchAccountIndex), react.createElement('div', {
          style: color,
          className: 'description'
        }, children = react.createElement('span', {}, ' ' + lang.switchAccountInfo)), react.createElement('div', {
          className: 'content'
        }, children = switchAccount(store, web3t))
      ]), react.createElement('div', {
        id: "section-export-private-key",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, ' ' + lang.exportPrivateKey), react.createElement('div', {
          style: color,
          className: 'description'
        }, children = react.createElement('span', {}, ' ' + lang.exportPrivateKeyWarning + '.')), react.createElement('div', {
          className: 'content'
        }, children = button({
          store: store,
          text: 'showSecret',
          onClick: exportPrivateKey,
          icon: 'show',
          type: 'secondary',
          id: "btn-copy"
        }))
      ]), react.createElement('div', {
        id: "section-switch-network",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, ' ' + lang.network), react.createElement('div', {
          style: color,
          className: 'description'
        }, children = store.current.network === 'testnet'
          ? react.createElement('span', {}, ' ' + lang.networkDescription2)
          : store.current.network === 'devnet'
            ? react.createElement('span', {}, ' The default network for all transactions is Devnet')
            : react.createElement('span', {}, ' ' + lang.networkDescription)), react.createElement('div', {
          className: 'content'
        }, children = switchNetwork(store, web3t))
      ]), react.createElement('div', {
        id: "section-themes",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, ' ' + lang.themes), react.createElement('div', {
          style: color,
          className: 'description'
        }, children = react.createElement('span', {}, ' ' + lang.themesDescription)), react.createElement('div', {
          className: 'content'
        }, children = chooseThemes(store, web3t))
      ]), react.createElement('div', {
        id: "section-build-info",
        className: 'section'
      }, children = [
        react.createElement('div', {
          style: color,
          className: 'title'
        }, children = [
          react.createElement('div', {
            className: 'logo'
          }, children = react.createElement('img', {
            src: style.branding.logo + "",
            style: logoStyle
          })), react.createElement('span', {}, ' Velas Wallet'), react.createElement('span', {
            className: 'bold low'
          }, ' ' + store.version)
        ]), react.createElement('div', {
          style: color,
          className: 'description pb-0'
        }, children = [
          react.createElement('span', {}, ' ' + lang.aboutWallet + '.'), react.createElement('br', {}), react.createElement('span', {}, ' ' + lang.plsRead), react.createElement('span', {
            onClick: gotoPrivacy,
            className: 'link'
          }, ' ' + lang.privacyPolicy), react.createElement('span', {}, '  &'), react.createElement('span', {
            onClick: gotoTerms,
            className: 'link'
          }, ' ' + lang.termsOfUse)
        ]), react.createElement('div', {
          className: 'content'
        })
      ])
    ]);
  };
  module.exports = function(arg$){
    var store, web3t, goBack, style, accountBodyStyle, iconColor, borderStyle, settingsStyle, lang, children;
    store = arg$.store, web3t = arg$.web3t;
    goBack = function(){
      return navigate(store, web3t, 'wallets');
    };
    style = getPrimaryInfo(store);
    accountBodyStyle = {
      color: style.app.text
    };
    iconColor = {
      filter: style.app.iconFilter
    };
    borderStyle = {
      color: style.app.text,
      borderBottom: "1px solid " + style.app.border,
      background: style.app.background,
      backgroundColor: style.app.bgspare
    };
    settingsStyle = {
      overflow: "auto",
      maxHeight: "100vh"
    };
    lang = getLang(store);
    return react.createElement('div', {
      className: 'settings-menu settings-menu220366167'
    }, children = [
      react.createElement('div', {
        style: borderStyle,
        className: 'title'
      }, children = [
        react.createElement('div', {
          className: 'header'
        }, ' ' + lang.manageAccount), react.createElement('div', {
          onClick: goBack,
          className: 'close'
        }, children = react.createElement('img', {
          src: icons.arrowLeft + "",
          style: iconColor,
          className: 'icon-svg'
        })), burger(store, web3t)
      ]), react.createElement('div', {
        style: accountBodyStyle,
        className: 'account-body'
      }, children = react.createElement('div', {
        style: settingsStyle,
        className: 'settings'
      }, children = manageAccount(store, web3t)))
    ]);
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
