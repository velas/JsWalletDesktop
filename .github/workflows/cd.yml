name: Create Release
on:
  push:
    tags:
      - "*"

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1
      - name: Install the Apple certificate
        env:
          SIGN_MAC_OS_CERTIFICATE_BASE64: ${{ secrets.SIGN_MAC_OS_CERTIFICATE_BASE64 }}
          P12_MAC_OS_PASSWORD: ${{ secrets.P12_MAC_OS_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        if: startsWith(matrix.os, 'macos')
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$SIGN_MAC_OS_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_MAC_OS_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
      - name: Install Node.js and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14

      # - name: Install Snapcraft
      #   # uses: samuelmeuli/action-snapcraft@v1
      #   # Only install Snapcraft on Ubuntu
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: sudo snap install snapcraft --classic
      #   # with:
      #     # Log in to Snap Store
      #     # snapcraft_token: ${{ secrets.snapcraft_token }}

      - name: Build/release Electron app
        uses: samuelmeuli/action-electron-builder@v1
        env:
          # env used in app notarize
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          ASC_PROVIDER: ${{ secrets.ASC_PROVIDER }}
        with:
          github_token: ${{ secrets.github_token }} # Automatically generated
          release: ${{ startsWith(github.ref, 'refs/tags/v') }}
      - name: Clean up keychain
        if: startsWith(matrix.os, 'macos')
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
